#------------------------------------------
# Actual Bootstrap Keys
#
# Defaults variable values are injected at load time
#------------------------------------------
runtime: main
connections:
  grpcconn:
    uri: 0.0.0.0:8030
    services:
      - filter: "{{`{{ .Name }}`}} ~= pydio.grpc..*"
listeners:
  grpcall:
    type: tcp
    bind: 0.0.0.0
    port: 8030
servers:
  caddy:
    type: caddy
    services:
      - filter: "{{`{{ .Name }}`}} ~= pydio\\.web\\.* or {{`{{ .Name }}`}} ~= pydio\\.rest\\.* or {{`{{ .Name }}`}} ~= pydio\\.gateway\\.*"
      - filter: "{{`{{ .Name }}`}} !~= pydio\\.web\\.sites"
  grpcall:
    type: grpc
    listener: grpcall
    services:
      - filter: "{{`{{ .Name }}`}} ~= pydio\\.grpc\\..*"

storages:
  sql:
    uri: "{{ .DbManualDSN }}?parseTime=True&prefix={{`{{ .Meta.prefix }}`}}&policies={{`{{ .Meta.policies }}`}}&singular={{`{{ .Meta.singular }}`}}"
  dssql:
    uri: {{ .DbManualDSN }}?parseTime=True&prefix={{`{{ .Meta.prefix }}`}}{{`{{if ne .DataSource ""}}`}}{{`{{ .DataSource }}`}}_{{`{{end}}`}}&policies={{`{{ .Meta.policies }}`}}&singular={{`{{ .Meta.singular }}`}}
  index:
    uri:
      "bleve://{{`{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}`}}/{{`{{  .Meta.prefix }}`}}.db"
  bleve:
    uri: "bleve://{{`{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}`}}/{{`{{  .Meta.file }}`}}"
  bolt:
    uri: "boltdb://{{`{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}`}}/{{`{{ .Meta.file }}`}}"

queues:
  debouncer:
    uri: "mem://?debounce={{`{{ .debounce }}`}}&idle={{`{{ .idle }}`}} }&max={{`{{ .max }}`}}&openerID={{`{{ .openerID }}`}}&tenant={{`{{ .Tenant }}`}}"
  persisted:
    uri: "fifo://{{`{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant \"default\" )) }}`}}?name={{`{{ .name }}`}}&prefix={{`{{ .prefix }}`}}"

caches:
  short:
    uri: "pm://?evictionTime={{`{{ .evictionTime }}`}}&cleanWindow={{`{{ .cleanWindow }}`}}&tenant={{`{{ .Tenant }}`}}&prefix={{`{{ .prefix }}`}}"
  shared:
    uri: "bigcache://?evictionTime={{`{{ .evictionTime }}`}}&cleanWindow={{`{{ .cleanWindow }}`}}&tenant={{`{{ .Tenant }}`}}&prefix={{`{{ .prefix }}`}}"


#------------------------------------
# All services
#------------------------------------
services: &services
  pydio.grpc.oauth:
    storages:
      main:
        - type: sql
          prefix: oauth2_
          singular: "true"
  pydio.web.oauth:
    storages:
      main:
        - type: sql
          prefix: oauth2_
          singular: "true"
  pydio.rest.frontend:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.search:
    storages:
      main:
        - type: index
          file: searchengine
  pydio.grpc.chat:
    storages:
      main:
        - type: kv
          prefix: chat
  pydio.grpc.data-key:
    storages:
      main:
        - type: sql
          prefix: data_
  pydio.grpc.activity:
    storages:
      main:
        - type: bolt
          file: activities.db
  pydio.grpc.versions:
    storages:
      main:
        - type: bolt
          file: versions.db
  pydio.grpc.mailer:
    storages:
      main:
        - type: bolt
          file: queue.db
  pydio.grpc.docstore:
    storages:
      main:
        - type: bolt
          file: docstore.db
        - type: bleve
          file: docstore.bleve?rotationSize=-1
  pydio.grpc.log:
    storages:
      main:
        - type: bleve
          file: syslog.bleve?mapping=log&rotationSize=-1
  pydio.grpc.jobs:
    storages:
      main:
        - type: bolt
          file: jobs.db
      logs:
        - type: bleve
          file: tasklogs.bleve?mapping=log&rotationSize=-1
  pydio.grpc.role:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_role_policies
  pydio.grpc.acl:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.user:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_user_policies
  pydio.grpc.token:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.key:
    storages:
      main:
        - type: sql
          prefix: data_key_
  pydio.grpc.user-key:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.workspace:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_workspace_policies
  pydio.grpc.meta:
    storages:
      main:
        - type: sql
          prefix: data_
  pydio.grpc.policy:
    storages:
      main:
        - type: sql
          prefix: ladon_
          singular: "true"
  pydio.grpc.user-meta:
    storages:
      main:
        - type: sql
          prefix: idm_usr_
          policies: idm_usr_meta_policies
  pydio.grpc.data.index:
    storages:
      main:
        - type: dssql
          prefix: data_index_
