apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "cells.fullname" . }}
data:
  source: |
    {{- if (include "cells.vault.enabled" .) }}
    export VAULT_TOKEN=$(cat /vault/secrets/token)
    {{- end }}
  install-conf.yaml: |
    proxyconfigs:
      - binds:
      {{- if .Values.service.binds }}
        {{- range .Values.service.binds }}
        - {{ . | quote }}
        {{- end }}
      {{- else }}
        - 0.0.0.0:{{ .Values.service.port }}
      {{- end }}
      {{- if .Values.service.reverseproxyurl }}
        reverseproxyurl: {{ .Values.service.reverseproxyurl }}
      {{- end }}
      {{- if (include "cells.tls.enabled" . ) }}
        tlsconfig:
          {{- if (include "cells.tls.selfSigned" .) }}
          selfsigned:
          {{- else }}
          certificate:
            certfile: /var/cells/certs/cells-server-tls.crt
            keyfile: /var/cells/certs/cells-server-tls.key
            cellsrootca: /var/cells/certs/cells-tls-ca.crt
          {{- end }}
      {{- end }}

    {{ if (include "cells.database.enabled" .) }}
    dbconnectiontype: tcp
    dbtcphostname: {{ include "cells.database.host" . }}
    dbtcpport: {{ include "cells.database.port" . }}
    dbtcpname: {{ include "cells.database.name" . }}
    {{- if (include "cells.database.auth.enabled" .) }}
    dbtcpuser: {${{ include "cells.database.auth.user" . }}}
    dbtcppassword: {${{ include "cells.database.auth.password" . }}}
    {{- end }}
    {{ else }}
    dbconnectiontype: manual
    dbmanualdsn: sqlite:///var/cells/pydio.db
    {{ end }}

    {{- if (include "cells.nosql.enabled" .) }}
    documentsdsn: {{ include "cells.nosql.url" (list . "/cells") }}
    usedocumentsdsn: true
    {{- else }}
    usedocumentsdsn: false
    {{- end }}

    # Defined in .env file
    frontendlogin: admin
    frontendpassword: P@ssw0rd

    {{- if (include "cells.s3.enabled" .) }}
    dstype: S3
    dss3custom: {{ include "cells.s3.url" (list . "") }}
    dss3apikey: {{ include "cells.s3.auth.user" . }}
    dss3apisecret: {{ include "cells.s3.auth.password" . }}
    dss3bucketdefault: pydiods1
    dss3bucketpersonal: personal
    dss3bucketcells: cellsdata
    dss3bucketbinaries: binaries
    dss3bucketthumbs: thumbnails
    dss3bucketversions: versions
    {{- end }}

    customconfigs:
      {{- toYaml .Values.service.customconfigs | nindent 6 }}
---
{{- if .Values.vault.enabled }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: cells-vault
data:
  bootstrap.sh: |
    #!/bin/sh

    OUTPUT=/tmp/output.txt

    export VAULT_TOKEN=$(cat /root/.vault-token)
    export VAULT_ADDR=http://127.0.0.1:8200

    COUNT=1
    LIMIT=30
    while [ 1 ]; do

      VAULT_STATUS=$(vault status -format json)
      EXIT_STATUS=$?

      if echo \"$VAULT_STATUS\" | grep '"initialized": false'; then
        if echo \"$VAULT_STATUS\" | grep '"type": "shamir"'; then
          vault operator init -n 1 -t 1 >> ${OUTPUT?}

          unseal=$(cat ${OUTPUT?} | grep "Unseal Key 1:" | sed -e "s/Unseal Key 1: //g")
          vault operator unseal ${unseal?}
        else
          vault operator init >> ${OUTPUT?}
        fi

        vault operator init -n 1 -t 1 >> ${OUTPUT?}

        unseal=$(cat ${OUTPUT?} | grep "Unseal Key 1:" | sed -e "s/Unseal Key 1: //g")
        root=$(cat ${OUTPUT?} | grep "Initial Root Token:" | sed -e "s/Initial Root Token: //g")

        vault operator unseal ${unseal?}

        vault login -no-print ${root?}

        vault secrets enable -version=2 -path=secret kv
        vault secrets enable -version=2 -path=caddycerts kv
        vault secrets enable pki

        vault write pki/root/generate/internal \
          common_name={{ include "cells.serviceDomain" . }} \
          ttl=8760h

        vault write pki/config/urls \
          issuing_certificates="{{ include "cells.vault.url" (list . "/v1/pki/ca") }}" \
          crl_distribution_points="{{ include "cells.vault.url" (list . "/v1/pki/crl") }}"

        vault secrets tune -max-lease-ttl=8760h pki

        vault write pki/roles/application \
          allowed_domains=*.{{ include "cells.serviceDomain" . }} \
          allow_any_name=true \
          allow_subdomains=true \
          max_ttl=72h

        vault policy write pki /vault/userconfig/cells-vault/pki-policy.hcl

        vault auth enable kubernetes

        vault write auth/kubernetes/config \
            kubernetes_host=https://kubernetes.default.svc \
            kubernetes_ca_cert=@/var/run/secrets/kubernetes.io/serviceaccount/ca.crt

        vault policy write app /vault/userconfig/cells-vault/app-policy.hcl

        vault write auth/kubernetes/role/app \
           bound_service_account_names=app \
           bound_service_account_namespaces=cells \
           policies=app,pki,default \
           ttl=24h

        vault token create -policy=app
      elif [ $EXIT_STATUS -eq 2 ]; then
        echo "$VAULT_STATUS"
        exit 0

      elif [ $COUNT -ge $LIMIT ]; then
        # Dont know what happened... Exiting
        echo "$VAULT_STAUS"
        exit 1
      else
        # For debugging\n
        echo "$VAULT_STATUS"
        exit 0
      fi

      COUNT=$((COUNT+1))

      sleep 1
    done

  app-policy.hcl: |
    path "secret/*"     { capabilities = ["create", "update", "read", "delete"] }
    path "caddycerts/*" { capabilities = ["create", "update", "read", "delete"] }

  pki-policy.hcl: |
    path "pki*"                    { capabilities = ["read", "list"] } 
    path "pki/sign/application"    { capabilities = ["create", "update"] }
    path "pki/issue/application"   { capabilities = ["create"] }

{{- end }}