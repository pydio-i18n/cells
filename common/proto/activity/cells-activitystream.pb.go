// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: cells-activitystream.proto

package activity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ObjectType int32

const (
	ObjectType_BaseObject ObjectType = 0
	ObjectType_Activity   ObjectType = 1
	ObjectType_Link       ObjectType = 47
	ObjectType_Mention    ObjectType = 48
	// CollectionTypes
	ObjectType_Collection            ObjectType = 49
	ObjectType_OrderedCollection     ObjectType = 50
	ObjectType_CollectionPage        ObjectType = 51
	ObjectType_OrderedCollectionPage ObjectType = 52
	// Actor Types
	ObjectType_Application  ObjectType = 2
	ObjectType_Group        ObjectType = 3
	ObjectType_Organization ObjectType = 4
	ObjectType_Person       ObjectType = 5
	ObjectType_Service      ObjectType = 6
	// Objects Types
	ObjectType_Article      ObjectType = 7
	ObjectType_Audio        ObjectType = 8
	ObjectType_Document     ObjectType = 9
	ObjectType_Event        ObjectType = 10
	ObjectType_Image        ObjectType = 11
	ObjectType_Note         ObjectType = 12
	ObjectType_Page         ObjectType = 13
	ObjectType_Place        ObjectType = 14
	ObjectType_Profile      ObjectType = 15
	ObjectType_Relationship ObjectType = 16
	ObjectType_Tombstone    ObjectType = 17
	ObjectType_Video        ObjectType = 18
	// Activity Types
	ObjectType_Accept          ObjectType = 19
	ObjectType_Add             ObjectType = 20
	ObjectType_Announce        ObjectType = 21
	ObjectType_Arrive          ObjectType = 22
	ObjectType_Block           ObjectType = 23
	ObjectType_Create          ObjectType = 24
	ObjectType_Delete          ObjectType = 25
	ObjectType_Dislike         ObjectType = 26
	ObjectType_Flag            ObjectType = 27
	ObjectType_Follow          ObjectType = 28
	ObjectType_Ignore          ObjectType = 29
	ObjectType_Invite          ObjectType = 30
	ObjectType_Join            ObjectType = 31
	ObjectType_Leave           ObjectType = 32
	ObjectType_Like            ObjectType = 33
	ObjectType_Listen          ObjectType = 34
	ObjectType_Move            ObjectType = 35
	ObjectType_Offer           ObjectType = 36
	ObjectType_Question        ObjectType = 37
	ObjectType_Reject          ObjectType = 38
	ObjectType_Read            ObjectType = 39
	ObjectType_Remove          ObjectType = 40
	ObjectType_TentativeReject ObjectType = 41
	ObjectType_TentativeAccept ObjectType = 42
	ObjectType_Travel          ObjectType = 43
	ObjectType_Undo            ObjectType = 44
	ObjectType_Update          ObjectType = 45
	ObjectType_UpdateComment   ObjectType = 58
	ObjectType_UpdateMeta      ObjectType = 59
	ObjectType_View            ObjectType = 46
	// Pydio Types
	ObjectType_Workspace ObjectType = 53
	ObjectType_Digest    ObjectType = 54
	ObjectType_Folder    ObjectType = 55
	ObjectType_Cell      ObjectType = 56
	ObjectType_Share     ObjectType = 57
)

// Enum value maps for ObjectType.
var (
	ObjectType_name = map[int32]string{
		0:  "BaseObject",
		1:  "Activity",
		47: "Link",
		48: "Mention",
		49: "Collection",
		50: "OrderedCollection",
		51: "CollectionPage",
		52: "OrderedCollectionPage",
		2:  "Application",
		3:  "Group",
		4:  "Organization",
		5:  "Person",
		6:  "Service",
		7:  "Article",
		8:  "Audio",
		9:  "Document",
		10: "Event",
		11: "Image",
		12: "Note",
		13: "Page",
		14: "Place",
		15: "Profile",
		16: "Relationship",
		17: "Tombstone",
		18: "Video",
		19: "Accept",
		20: "Add",
		21: "Announce",
		22: "Arrive",
		23: "Block",
		24: "Create",
		25: "Delete",
		26: "Dislike",
		27: "Flag",
		28: "Follow",
		29: "Ignore",
		30: "Invite",
		31: "Join",
		32: "Leave",
		33: "Like",
		34: "Listen",
		35: "Move",
		36: "Offer",
		37: "Question",
		38: "Reject",
		39: "Read",
		40: "Remove",
		41: "TentativeReject",
		42: "TentativeAccept",
		43: "Travel",
		44: "Undo",
		45: "Update",
		58: "UpdateComment",
		59: "UpdateMeta",
		46: "View",
		53: "Workspace",
		54: "Digest",
		55: "Folder",
		56: "Cell",
		57: "Share",
	}
	ObjectType_value = map[string]int32{
		"BaseObject":            0,
		"Activity":              1,
		"Link":                  47,
		"Mention":               48,
		"Collection":            49,
		"OrderedCollection":     50,
		"CollectionPage":        51,
		"OrderedCollectionPage": 52,
		"Application":           2,
		"Group":                 3,
		"Organization":          4,
		"Person":                5,
		"Service":               6,
		"Article":               7,
		"Audio":                 8,
		"Document":              9,
		"Event":                 10,
		"Image":                 11,
		"Note":                  12,
		"Page":                  13,
		"Place":                 14,
		"Profile":               15,
		"Relationship":          16,
		"Tombstone":             17,
		"Video":                 18,
		"Accept":                19,
		"Add":                   20,
		"Announce":              21,
		"Arrive":                22,
		"Block":                 23,
		"Create":                24,
		"Delete":                25,
		"Dislike":               26,
		"Flag":                  27,
		"Follow":                28,
		"Ignore":                29,
		"Invite":                30,
		"Join":                  31,
		"Leave":                 32,
		"Like":                  33,
		"Listen":                34,
		"Move":                  35,
		"Offer":                 36,
		"Question":              37,
		"Reject":                38,
		"Read":                  39,
		"Remove":                40,
		"TentativeReject":       41,
		"TentativeAccept":       42,
		"Travel":                43,
		"Undo":                  44,
		"Update":                45,
		"UpdateComment":         58,
		"UpdateMeta":            59,
		"View":                  46,
		"Workspace":             53,
		"Digest":                54,
		"Folder":                55,
		"Cell":                  56,
		"Share":                 57,
	}
)

func (x ObjectType) Enum() *ObjectType {
	p := new(ObjectType)
	*p = x
	return p
}

func (x ObjectType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_activitystream_proto_enumTypes[0].Descriptor()
}

func (ObjectType) Type() protoreflect.EnumType {
	return &file_cells_activitystream_proto_enumTypes[0]
}

func (x ObjectType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectType.Descriptor instead.
func (ObjectType) EnumDescriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{0}
}

type StreamContext int32

const (
	StreamContext_MYFEED  StreamContext = 0
	StreamContext_USER_ID StreamContext = 1
	StreamContext_NODE_ID StreamContext = 2
)

// Enum value maps for StreamContext.
var (
	StreamContext_name = map[int32]string{
		0: "MYFEED",
		1: "USER_ID",
		2: "NODE_ID",
	}
	StreamContext_value = map[string]int32{
		"MYFEED":  0,
		"USER_ID": 1,
		"NODE_ID": 2,
	}
)

func (x StreamContext) Enum() *StreamContext {
	p := new(StreamContext)
	*p = x
	return p
}

func (x StreamContext) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamContext) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_activitystream_proto_enumTypes[1].Descriptor()
}

func (StreamContext) Type() protoreflect.EnumType {
	return &file_cells_activitystream_proto_enumTypes[1]
}

func (x StreamContext) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamContext.Descriptor instead.
func (StreamContext) EnumDescriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{1}
}

type SummaryPointOfView int32

const (
	SummaryPointOfView_GENERIC SummaryPointOfView = 0
	SummaryPointOfView_ACTOR   SummaryPointOfView = 1
	SummaryPointOfView_SUBJECT SummaryPointOfView = 2
)

// Enum value maps for SummaryPointOfView.
var (
	SummaryPointOfView_name = map[int32]string{
		0: "GENERIC",
		1: "ACTOR",
		2: "SUBJECT",
	}
	SummaryPointOfView_value = map[string]int32{
		"GENERIC": 0,
		"ACTOR":   1,
		"SUBJECT": 2,
	}
)

func (x SummaryPointOfView) Enum() *SummaryPointOfView {
	p := new(SummaryPointOfView)
	*p = x
	return p
}

func (x SummaryPointOfView) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SummaryPointOfView) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_activitystream_proto_enumTypes[2].Descriptor()
}

func (SummaryPointOfView) Type() protoreflect.EnumType {
	return &file_cells_activitystream_proto_enumTypes[2]
}

func (x SummaryPointOfView) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SummaryPointOfView.Descriptor instead.
func (SummaryPointOfView) EnumDescriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{2}
}

type OwnerType int32

const (
	OwnerType_NODE OwnerType = 0
	OwnerType_USER OwnerType = 1
)

// Enum value maps for OwnerType.
var (
	OwnerType_name = map[int32]string{
		0: "NODE",
		1: "USER",
	}
	OwnerType_value = map[string]int32{
		"NODE": 0,
		"USER": 1,
	}
)

func (x OwnerType) Enum() *OwnerType {
	p := new(OwnerType)
	*p = x
	return p
}

func (x OwnerType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OwnerType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_activitystream_proto_enumTypes[3].Descriptor()
}

func (OwnerType) Type() protoreflect.EnumType {
	return &file_cells_activitystream_proto_enumTypes[3]
}

func (x OwnerType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OwnerType.Descriptor instead.
func (OwnerType) EnumDescriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{3}
}

type Object struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonLdContext string                 `protobuf:"bytes,53,opt,name=jsonLdContext,json=@context,proto3" json:"jsonLdContext,omitempty"`
	Type          ObjectType             `protobuf:"varint,1,opt,name=type,proto3,enum=activity.ObjectType" json:"type,omitempty"`
	Id            string                 `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	Name          string                 `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Summary       string                 `protobuf:"bytes,4,opt,name=summary,proto3" json:"summary,omitempty"`
	Markdown      string                 `protobuf:"bytes,62,opt,name=markdown,proto3" json:"markdown,omitempty"`
	Context       *Object                `protobuf:"bytes,5,opt,name=context,proto3" json:"context,omitempty"`
	Attachment    *Object                `protobuf:"bytes,6,opt,name=attachment,proto3" json:"attachment,omitempty"`
	AttributedTo  *Object                `protobuf:"bytes,7,opt,name=attributedTo,proto3" json:"attributedTo,omitempty"`
	Audience      *Object                `protobuf:"bytes,8,opt,name=audience,proto3" json:"audience,omitempty"`
	Content       *Object                `protobuf:"bytes,9,opt,name=content,proto3" json:"content,omitempty"`
	StartTime     *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=endTime,proto3" json:"endTime,omitempty"`
	Published     *timestamppb.Timestamp `protobuf:"bytes,12,opt,name=published,proto3" json:"published,omitempty"`
	Updated       *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=updated,proto3" json:"updated,omitempty"`
	Duration      *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=duration,proto3" json:"duration,omitempty"`
	Url           *Object                `protobuf:"bytes,15,opt,name=url,proto3" json:"url,omitempty"`
	MediaType     string                 `protobuf:"bytes,16,opt,name=mediaType,proto3" json:"mediaType,omitempty"`
	Icon          *Object                `protobuf:"bytes,17,opt,name=icon,proto3" json:"icon,omitempty"`
	Image         *Object                `protobuf:"bytes,18,opt,name=image,proto3" json:"image,omitempty"`
	Preview       *Object                `protobuf:"bytes,19,opt,name=preview,proto3" json:"preview,omitempty"`
	Location      *Object                `protobuf:"bytes,20,opt,name=location,proto3" json:"location,omitempty"`
	InReplyTo     *Object                `protobuf:"bytes,21,opt,name=inReplyTo,proto3" json:"inReplyTo,omitempty"`
	Replies       *Object                `protobuf:"bytes,22,opt,name=replies,proto3" json:"replies,omitempty"`
	Tag           *Object                `protobuf:"bytes,23,opt,name=tag,proto3" json:"tag,omitempty"`
	Generator     *Object                `protobuf:"bytes,24,opt,name=generator,proto3" json:"generator,omitempty"`
	To            *Object                `protobuf:"bytes,25,opt,name=to,proto3" json:"to,omitempty"`
	Bto           *Object                `protobuf:"bytes,26,opt,name=bto,proto3" json:"bto,omitempty"`
	Cc            *Object                `protobuf:"bytes,27,opt,name=cc,proto3" json:"cc,omitempty"`
	Bcc           *Object                `protobuf:"bytes,28,opt,name=bcc,proto3" json:"bcc,omitempty"`
	// Activity Properties
	Actor      *Object `protobuf:"bytes,29,opt,name=actor,proto3" json:"actor,omitempty"`
	Object     *Object `protobuf:"bytes,30,opt,name=object,proto3" json:"object,omitempty"`
	Target     *Object `protobuf:"bytes,31,opt,name=target,proto3" json:"target,omitempty"`
	Result     *Object `protobuf:"bytes,32,opt,name=result,proto3" json:"result,omitempty"`
	Origin     *Object `protobuf:"bytes,33,opt,name=origin,proto3" json:"origin,omitempty"`
	Instrument *Object `protobuf:"bytes,34,opt,name=instrument,proto3" json:"instrument,omitempty"`
	// Link Properties
	Href     string `protobuf:"bytes,35,opt,name=href,proto3" json:"href,omitempty"`
	Rel      string `protobuf:"bytes,36,opt,name=rel,proto3" json:"rel,omitempty"`
	Hreflang string `protobuf:"bytes,37,opt,name=hreflang,proto3" json:"hreflang,omitempty"`
	Height   int32  `protobuf:"varint,38,opt,name=height,proto3" json:"height,omitempty"`
	Width    int32  `protobuf:"varint,39,opt,name=width,proto3" json:"width,omitempty"`
	// Question Properties
	OneOf  *Object                `protobuf:"bytes,40,opt,name=oneOf,proto3" json:"oneOf,omitempty"`
	AnyOf  *Object                `protobuf:"bytes,41,opt,name=anyOf,proto3" json:"anyOf,omitempty"`
	Closed *timestamppb.Timestamp `protobuf:"bytes,42,opt,name=closed,proto3" json:"closed,omitempty"`
	// Relationship Properties
	Subject      *Object `protobuf:"bytes,43,opt,name=subject,proto3" json:"subject,omitempty"`
	Relationship *Object `protobuf:"bytes,44,opt,name=relationship,proto3" json:"relationship,omitempty"`
	// Tombstone Properties
	FormerType ObjectType             `protobuf:"varint,45,opt,name=formerType,proto3,enum=activity.ObjectType" json:"formerType,omitempty"`
	Deleted    *timestamppb.Timestamp `protobuf:"bytes,46,opt,name=deleted,proto3" json:"deleted,omitempty"`
	// Place Properties
	Accuracy  float32 `protobuf:"fixed32,47,opt,name=accuracy,proto3" json:"accuracy,omitempty"`
	Altitude  float32 `protobuf:"fixed32,48,opt,name=altitude,proto3" json:"altitude,omitempty"`
	Latitude  float32 `protobuf:"fixed32,49,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float32 `protobuf:"fixed32,50,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Radius    float32 `protobuf:"fixed32,51,opt,name=radius,proto3" json:"radius,omitempty"`
	Units     string  `protobuf:"bytes,52,opt,name=units,proto3" json:"units,omitempty"`
	// Collection Properties
	Items      []*Object `protobuf:"bytes,54,rep,name=items,proto3" json:"items,omitempty"`
	TotalItems int32     `protobuf:"varint,55,opt,name=totalItems,proto3" json:"totalItems,omitempty"`
	Current    *Object   `protobuf:"bytes,56,opt,name=current,proto3" json:"current,omitempty"`
	First      *Object   `protobuf:"bytes,57,opt,name=first,proto3" json:"first,omitempty"`
	Last       *Object   `protobuf:"bytes,58,opt,name=last,proto3" json:"last,omitempty"`
	PartOf     *Object   `protobuf:"bytes,59,opt,name=partOf,proto3" json:"partOf,omitempty"`
	Next       *Object   `protobuf:"bytes,60,opt,name=next,proto3" json:"next,omitempty"`
	Prev       *Object   `protobuf:"bytes,61,opt,name=prev,proto3" json:"prev,omitempty"`
}

func (x *Object) Reset() {
	*x = Object{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Object) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Object) ProtoMessage() {}

func (x *Object) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Object.ProtoReflect.Descriptor instead.
func (*Object) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{0}
}

func (x *Object) GetJsonLdContext() string {
	if x != nil {
		return x.JsonLdContext
	}
	return ""
}

func (x *Object) GetType() ObjectType {
	if x != nil {
		return x.Type
	}
	return ObjectType_BaseObject
}

func (x *Object) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Object) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Object) GetSummary() string {
	if x != nil {
		return x.Summary
	}
	return ""
}

func (x *Object) GetMarkdown() string {
	if x != nil {
		return x.Markdown
	}
	return ""
}

func (x *Object) GetContext() *Object {
	if x != nil {
		return x.Context
	}
	return nil
}

func (x *Object) GetAttachment() *Object {
	if x != nil {
		return x.Attachment
	}
	return nil
}

func (x *Object) GetAttributedTo() *Object {
	if x != nil {
		return x.AttributedTo
	}
	return nil
}

func (x *Object) GetAudience() *Object {
	if x != nil {
		return x.Audience
	}
	return nil
}

func (x *Object) GetContent() *Object {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *Object) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *Object) GetEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.EndTime
	}
	return nil
}

func (x *Object) GetPublished() *timestamppb.Timestamp {
	if x != nil {
		return x.Published
	}
	return nil
}

func (x *Object) GetUpdated() *timestamppb.Timestamp {
	if x != nil {
		return x.Updated
	}
	return nil
}

func (x *Object) GetDuration() *timestamppb.Timestamp {
	if x != nil {
		return x.Duration
	}
	return nil
}

func (x *Object) GetUrl() *Object {
	if x != nil {
		return x.Url
	}
	return nil
}

func (x *Object) GetMediaType() string {
	if x != nil {
		return x.MediaType
	}
	return ""
}

func (x *Object) GetIcon() *Object {
	if x != nil {
		return x.Icon
	}
	return nil
}

func (x *Object) GetImage() *Object {
	if x != nil {
		return x.Image
	}
	return nil
}

func (x *Object) GetPreview() *Object {
	if x != nil {
		return x.Preview
	}
	return nil
}

func (x *Object) GetLocation() *Object {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *Object) GetInReplyTo() *Object {
	if x != nil {
		return x.InReplyTo
	}
	return nil
}

func (x *Object) GetReplies() *Object {
	if x != nil {
		return x.Replies
	}
	return nil
}

func (x *Object) GetTag() *Object {
	if x != nil {
		return x.Tag
	}
	return nil
}

func (x *Object) GetGenerator() *Object {
	if x != nil {
		return x.Generator
	}
	return nil
}

func (x *Object) GetTo() *Object {
	if x != nil {
		return x.To
	}
	return nil
}

func (x *Object) GetBto() *Object {
	if x != nil {
		return x.Bto
	}
	return nil
}

func (x *Object) GetCc() *Object {
	if x != nil {
		return x.Cc
	}
	return nil
}

func (x *Object) GetBcc() *Object {
	if x != nil {
		return x.Bcc
	}
	return nil
}

func (x *Object) GetActor() *Object {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Object) GetObject() *Object {
	if x != nil {
		return x.Object
	}
	return nil
}

func (x *Object) GetTarget() *Object {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *Object) GetResult() *Object {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *Object) GetOrigin() *Object {
	if x != nil {
		return x.Origin
	}
	return nil
}

func (x *Object) GetInstrument() *Object {
	if x != nil {
		return x.Instrument
	}
	return nil
}

func (x *Object) GetHref() string {
	if x != nil {
		return x.Href
	}
	return ""
}

func (x *Object) GetRel() string {
	if x != nil {
		return x.Rel
	}
	return ""
}

func (x *Object) GetHreflang() string {
	if x != nil {
		return x.Hreflang
	}
	return ""
}

func (x *Object) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *Object) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *Object) GetOneOf() *Object {
	if x != nil {
		return x.OneOf
	}
	return nil
}

func (x *Object) GetAnyOf() *Object {
	if x != nil {
		return x.AnyOf
	}
	return nil
}

func (x *Object) GetClosed() *timestamppb.Timestamp {
	if x != nil {
		return x.Closed
	}
	return nil
}

func (x *Object) GetSubject() *Object {
	if x != nil {
		return x.Subject
	}
	return nil
}

func (x *Object) GetRelationship() *Object {
	if x != nil {
		return x.Relationship
	}
	return nil
}

func (x *Object) GetFormerType() ObjectType {
	if x != nil {
		return x.FormerType
	}
	return ObjectType_BaseObject
}

func (x *Object) GetDeleted() *timestamppb.Timestamp {
	if x != nil {
		return x.Deleted
	}
	return nil
}

func (x *Object) GetAccuracy() float32 {
	if x != nil {
		return x.Accuracy
	}
	return 0
}

func (x *Object) GetAltitude() float32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *Object) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *Object) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *Object) GetRadius() float32 {
	if x != nil {
		return x.Radius
	}
	return 0
}

func (x *Object) GetUnits() string {
	if x != nil {
		return x.Units
	}
	return ""
}

func (x *Object) GetItems() []*Object {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Object) GetTotalItems() int32 {
	if x != nil {
		return x.TotalItems
	}
	return 0
}

func (x *Object) GetCurrent() *Object {
	if x != nil {
		return x.Current
	}
	return nil
}

func (x *Object) GetFirst() *Object {
	if x != nil {
		return x.First
	}
	return nil
}

func (x *Object) GetLast() *Object {
	if x != nil {
		return x.Last
	}
	return nil
}

func (x *Object) GetPartOf() *Object {
	if x != nil {
		return x.PartOf
	}
	return nil
}

func (x *Object) GetNext() *Object {
	if x != nil {
		return x.Next
	}
	return nil
}

func (x *Object) GetPrev() *Object {
	if x != nil {
		return x.Prev
	}
	return nil
}

type PostActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerType OwnerType `protobuf:"varint,1,opt,name=OwnerType,proto3,enum=activity.OwnerType" json:"OwnerType,omitempty"`
	OwnerId   string    `protobuf:"bytes,2,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	BoxName   string    `protobuf:"bytes,3,opt,name=BoxName,proto3" json:"BoxName,omitempty"`
	Activity  *Object   `protobuf:"bytes,4,opt,name=Activity,proto3" json:"Activity,omitempty"`
}

func (x *PostActivityRequest) Reset() {
	*x = PostActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActivityRequest) ProtoMessage() {}

func (x *PostActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActivityRequest.ProtoReflect.Descriptor instead.
func (*PostActivityRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{1}
}

func (x *PostActivityRequest) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_NODE
}

func (x *PostActivityRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PostActivityRequest) GetBoxName() string {
	if x != nil {
		return x.BoxName
	}
	return ""
}

func (x *PostActivityRequest) GetActivity() *Object {
	if x != nil {
		return x.Activity
	}
	return nil
}

type PostActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *PostActivityResponse) Reset() {
	*x = PostActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActivityResponse) ProtoMessage() {}

func (x *PostActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActivityResponse.ProtoReflect.Descriptor instead.
func (*PostActivityResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{2}
}

func (x *PostActivityResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PostActivityEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonType  string    `protobuf:"bytes,1,opt,name=jsonType,json=@type,proto3" json:"jsonType,omitempty"`
	OwnerType OwnerType `protobuf:"varint,2,opt,name=OwnerType,proto3,enum=activity.OwnerType" json:"OwnerType,omitempty"`
	OwnerId   string    `protobuf:"bytes,3,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	BoxName   string    `protobuf:"bytes,4,opt,name=BoxName,proto3" json:"BoxName,omitempty"`
	Activity  *Object   `protobuf:"bytes,5,opt,name=Activity,proto3" json:"Activity,omitempty"`
}

func (x *PostActivityEvent) Reset() {
	*x = PostActivityEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostActivityEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostActivityEvent) ProtoMessage() {}

func (x *PostActivityEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostActivityEvent.ProtoReflect.Descriptor instead.
func (*PostActivityEvent) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{3}
}

func (x *PostActivityEvent) GetJsonType() string {
	if x != nil {
		return x.JsonType
	}
	return ""
}

func (x *PostActivityEvent) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_NODE
}

func (x *PostActivityEvent) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *PostActivityEvent) GetBoxName() string {
	if x != nil {
		return x.BoxName
	}
	return ""
}

func (x *PostActivityEvent) GetActivity() *Object {
	if x != nil {
		return x.Activity
	}
	return nil
}

type StreamActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Define the context of the stream
	Context StreamContext `protobuf:"varint,1,opt,name=Context,proto3,enum=activity.StreamContext" json:"Context,omitempty"`
	// Value for the context (e.g. User Id, Node Id)
	ContextData string `protobuf:"bytes,2,opt,name=ContextData,proto3" json:"ContextData,omitempty"`
	// Json-encoded filter
	StreamFilter string `protobuf:"bytes,3,opt,name=StreamFilter,proto3" json:"StreamFilter,omitempty"`
	// Target inbox or outbox for the given object
	BoxName string `protobuf:"bytes,4,opt,name=BoxName,proto3" json:"BoxName,omitempty"`
	// Count last activities that were not loaded yet
	UnreadCountOnly bool `protobuf:"varint,5,opt,name=UnreadCountOnly,proto3" json:"UnreadCountOnly,omitempty"`
	// Start listing at a given position
	Offset int64 `protobuf:"varint,6,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Limit the number of results
	Limit int64 `protobuf:"varint,7,opt,name=Limit,proto3" json:"Limit,omitempty"`
	// Compute a digest of all unread activities
	AsDigest bool `protobuf:"varint,8,opt,name=AsDigest,proto3" json:"AsDigest,omitempty"`
	// Provide context for building the human-readable strings of each activity
	PointOfView SummaryPointOfView `protobuf:"varint,9,opt,name=PointOfView,proto3,enum=activity.SummaryPointOfView" json:"PointOfView,omitempty"`
	// Provide language information for building the human-readable strings.
	Language string `protobuf:"bytes,10,opt,name=Language,proto3" json:"Language,omitempty"`
}

func (x *StreamActivitiesRequest) Reset() {
	*x = StreamActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamActivitiesRequest) ProtoMessage() {}

func (x *StreamActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamActivitiesRequest.ProtoReflect.Descriptor instead.
func (*StreamActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{4}
}

func (x *StreamActivitiesRequest) GetContext() StreamContext {
	if x != nil {
		return x.Context
	}
	return StreamContext_MYFEED
}

func (x *StreamActivitiesRequest) GetContextData() string {
	if x != nil {
		return x.ContextData
	}
	return ""
}

func (x *StreamActivitiesRequest) GetStreamFilter() string {
	if x != nil {
		return x.StreamFilter
	}
	return ""
}

func (x *StreamActivitiesRequest) GetBoxName() string {
	if x != nil {
		return x.BoxName
	}
	return ""
}

func (x *StreamActivitiesRequest) GetUnreadCountOnly() bool {
	if x != nil {
		return x.UnreadCountOnly
	}
	return false
}

func (x *StreamActivitiesRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *StreamActivitiesRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *StreamActivitiesRequest) GetAsDigest() bool {
	if x != nil {
		return x.AsDigest
	}
	return false
}

func (x *StreamActivitiesRequest) GetPointOfView() SummaryPointOfView {
	if x != nil {
		return x.PointOfView
	}
	return SummaryPointOfView_GENERIC
}

func (x *StreamActivitiesRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

type StreamActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Activity *Object `protobuf:"bytes,1,opt,name=activity,proto3" json:"activity,omitempty"`
}

func (x *StreamActivitiesResponse) Reset() {
	*x = StreamActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamActivitiesResponse) ProtoMessage() {}

func (x *StreamActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamActivitiesResponse.ProtoReflect.Descriptor instead.
func (*StreamActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{5}
}

func (x *StreamActivitiesResponse) GetActivity() *Object {
	if x != nil {
		return x.Activity
	}
	return nil
}

type Subscription struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the user for this subscription
	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	// Type of owner
	ObjectType OwnerType `protobuf:"varint,2,opt,name=ObjectType,proto3,enum=activity.OwnerType" json:"ObjectType,omitempty"`
	// If of the owner
	ObjectId string `protobuf:"bytes,3,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`
	// List of events to listen to
	Events []string `protobuf:"bytes,4,rep,name=Events,proto3" json:"Events,omitempty"`
}

func (x *Subscription) Reset() {
	*x = Subscription{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subscription) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subscription) ProtoMessage() {}

func (x *Subscription) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subscription.ProtoReflect.Descriptor instead.
func (*Subscription) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{6}
}

func (x *Subscription) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *Subscription) GetObjectType() OwnerType {
	if x != nil {
		return x.ObjectType
	}
	return OwnerType_NODE
}

func (x *Subscription) GetObjectId() string {
	if x != nil {
		return x.ObjectId
	}
	return ""
}

func (x *Subscription) GetEvents() []string {
	if x != nil {
		return x.Events
	}
	return nil
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Place a new subscription
	Subscription *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeRequest) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type SearchSubscriptionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of UserIds for which we want to list
	UserIds []string `protobuf:"bytes,1,rep,name=UserIds,proto3" json:"UserIds,omitempty"`
	// Filter by type of objects
	ObjectTypes []OwnerType `protobuf:"varint,2,rep,packed,name=ObjectTypes,proto3,enum=activity.OwnerType" json:"ObjectTypes,omitempty"`
	// Filter by object Ids
	ObjectIds []string `protobuf:"bytes,3,rep,name=ObjectIds,proto3" json:"ObjectIds,omitempty"`
}

func (x *SearchSubscriptionsRequest) Reset() {
	*x = SearchSubscriptionsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsRequest) ProtoMessage() {}

func (x *SearchSubscriptionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsRequest.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{9}
}

func (x *SearchSubscriptionsRequest) GetUserIds() []string {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *SearchSubscriptionsRequest) GetObjectTypes() []OwnerType {
	if x != nil {
		return x.ObjectTypes
	}
	return nil
}

func (x *SearchSubscriptionsRequest) GetObjectIds() []string {
	if x != nil {
		return x.ObjectIds
	}
	return nil
}

type SearchSubscriptionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscription *Subscription `protobuf:"bytes,1,opt,name=Subscription,proto3" json:"Subscription,omitempty"`
}

func (x *SearchSubscriptionsResponse) Reset() {
	*x = SearchSubscriptionsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchSubscriptionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchSubscriptionsResponse) ProtoMessage() {}

func (x *SearchSubscriptionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchSubscriptionsResponse.ProtoReflect.Descriptor instead.
func (*SearchSubscriptionsResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{10}
}

func (x *SearchSubscriptionsResponse) GetSubscription() *Subscription {
	if x != nil {
		return x.Subscription
	}
	return nil
}

type UnreadActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Get the number of unread activities for this user
	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
}

func (x *UnreadActivitiesRequest) Reset() {
	*x = UnreadActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadActivitiesRequest) ProtoMessage() {}

func (x *UnreadActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadActivitiesRequest.ProtoReflect.Descriptor instead.
func (*UnreadActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{11}
}

func (x *UnreadActivitiesRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type UnreadActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Number int32 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (x *UnreadActivitiesResponse) Reset() {
	*x = UnreadActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnreadActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnreadActivitiesResponse) ProtoMessage() {}

func (x *UnreadActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnreadActivitiesResponse.ProtoReflect.Descriptor instead.
func (*UnreadActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{12}
}

func (x *UnreadActivitiesResponse) GetNumber() int32 {
	if x != nil {
		return x.Number
	}
	return 0
}

type UserLastActivityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Current user Id
	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	// Inbox or Outbox
	BoxName string `protobuf:"bytes,2,opt,name=BoxName,proto3" json:"BoxName,omitempty"`
	// Id of the last known activity
	ActivityId string `protobuf:"bytes,3,opt,name=ActivityId,proto3" json:"ActivityId,omitempty"`
}

func (x *UserLastActivityRequest) Reset() {
	*x = UserLastActivityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLastActivityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLastActivityRequest) ProtoMessage() {}

func (x *UserLastActivityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLastActivityRequest.ProtoReflect.Descriptor instead.
func (*UserLastActivityRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{13}
}

func (x *UserLastActivityRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *UserLastActivityRequest) GetBoxName() string {
	if x != nil {
		return x.BoxName
	}
	return ""
}

func (x *UserLastActivityRequest) GetActivityId() string {
	if x != nil {
		return x.ActivityId
	}
	return ""
}

type UserLastActivityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *UserLastActivityResponse) Reset() {
	*x = UserLastActivityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserLastActivityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserLastActivityResponse) ProtoMessage() {}

func (x *UserLastActivityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserLastActivityResponse.ProtoReflect.Descriptor instead.
func (*UserLastActivityResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{14}
}

func (x *UserLastActivityResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type PurgeActivitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ObjectType
	OwnerType OwnerType `protobuf:"varint,1,opt,name=OwnerType,proto3,enum=activity.OwnerType" json:"OwnerType,omitempty"`
	// Object Id, use * to browse all
	OwnerID string `protobuf:"bytes,2,opt,name=OwnerID,proto3" json:"OwnerID,omitempty"`
	// Box Name
	BoxName string `protobuf:"bytes,3,opt,name=BoxName,proto3" json:"BoxName,omitempty"`
	// Keep at least this number of records
	MinCount int32 `protobuf:"varint,4,opt,name=minCount,proto3" json:"minCount,omitempty"`
	// Keep max number of records
	MaxCount int32 `protobuf:"varint,5,opt,name=maxCount,proto3" json:"maxCount,omitempty"`
	// Remove records updated before...
	UpdatedBeforeTimestamp int32 `protobuf:"varint,6,opt,name=updatedBeforeTimestamp,proto3" json:"updatedBeforeTimestamp,omitempty"`
	// Trigger DB compaction after purge
	CompactDB bool `protobuf:"varint,8,opt,name=CompactDB,proto3" json:"CompactDB,omitempty"`
	// Clear original DB after compaction
	ClearBackups bool `protobuf:"varint,7,opt,name=ClearBackups,proto3" json:"ClearBackups,omitempty"`
}

func (x *PurgeActivitiesRequest) Reset() {
	*x = PurgeActivitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeActivitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeActivitiesRequest) ProtoMessage() {}

func (x *PurgeActivitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeActivitiesRequest.ProtoReflect.Descriptor instead.
func (*PurgeActivitiesRequest) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{15}
}

func (x *PurgeActivitiesRequest) GetOwnerType() OwnerType {
	if x != nil {
		return x.OwnerType
	}
	return OwnerType_NODE
}

func (x *PurgeActivitiesRequest) GetOwnerID() string {
	if x != nil {
		return x.OwnerID
	}
	return ""
}

func (x *PurgeActivitiesRequest) GetBoxName() string {
	if x != nil {
		return x.BoxName
	}
	return ""
}

func (x *PurgeActivitiesRequest) GetMinCount() int32 {
	if x != nil {
		return x.MinCount
	}
	return 0
}

func (x *PurgeActivitiesRequest) GetMaxCount() int32 {
	if x != nil {
		return x.MaxCount
	}
	return 0
}

func (x *PurgeActivitiesRequest) GetUpdatedBeforeTimestamp() int32 {
	if x != nil {
		return x.UpdatedBeforeTimestamp
	}
	return 0
}

func (x *PurgeActivitiesRequest) GetCompactDB() bool {
	if x != nil {
		return x.CompactDB
	}
	return false
}

func (x *PurgeActivitiesRequest) GetClearBackups() bool {
	if x != nil {
		return x.ClearBackups
	}
	return false
}

type PurgeActivitiesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If request succeeded
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// Number of rows deleted
	DeletedCount int32 `protobuf:"varint,2,opt,name=DeletedCount,proto3" json:"DeletedCount,omitempty"`
}

func (x *PurgeActivitiesResponse) Reset() {
	*x = PurgeActivitiesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_activitystream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PurgeActivitiesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PurgeActivitiesResponse) ProtoMessage() {}

func (x *PurgeActivitiesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_activitystream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PurgeActivitiesResponse.ProtoReflect.Descriptor instead.
func (*PurgeActivitiesResponse) Descriptor() ([]byte, []int) {
	return file_cells_activitystream_proto_rawDescGZIP(), []int{16}
}

func (x *PurgeActivitiesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *PurgeActivitiesResponse) GetDeletedCount() int32 {
	if x != nil {
		return x.DeletedCount
	}
	return 0
}

var File_cells_activitystream_proto protoreflect.FileDescriptor

var file_cells_activitystream_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf5, 0x12, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x4c, 0x64, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x35, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x40, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x02, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d,
	0x61, 0x72, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x12, 0x30, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x61, 0x63,
	0x68, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x64, 0x54, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x54, 0x6f, 0x12, 0x2c, 0x0a, 0x08, 0x61,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x08, 0x61, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x34, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12,
	0x34, 0x0a, 0x07, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x75, 0x72,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x64, 0x69, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52,
	0x04, 0x69, 0x63, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a,
	0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x07, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x12, 0x2c, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x09, 0x69, 0x6e, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x54, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x69, 0x6e,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x2a, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x09, 0x67, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x09, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x22, 0x0a, 0x03, 0x62, 0x74, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03, 0x62, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x02, 0x63, 0x63, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x02, 0x63, 0x63, 0x12,
	0x22, 0x0a, 0x03, 0x62, 0x63, 0x63, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x03,
	0x62, 0x63, 0x63, 0x12, 0x26, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18,
	0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12,
	0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x6f, 0x72, 0x69,
	0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x72, 0x65, 0x66, 0x18, 0x23, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x72, 0x65, 0x66, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x65, 0x6c,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x72, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x72, 0x65, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x72, 0x65, 0x66, 0x6c, 0x61, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68,
	0x74, 0x18, 0x26, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x77, 0x69, 0x64, 0x74, 0x68, 0x18, 0x27, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x77, 0x69, 0x64, 0x74, 0x68, 0x12, 0x26, 0x0a, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x6f, 0x6e, 0x65, 0x4f, 0x66, 0x12, 0x26, 0x0a,
	0x05, 0x61, 0x6e, 0x79, 0x4f, 0x66, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05,
	0x61, 0x6e, 0x79, 0x4f, 0x66, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18,
	0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x07, 0x73, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x07, 0x73, 0x75,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x34, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x68, 0x69, 0x70, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x12, 0x34, 0x0a, 0x0a, 0x66,
	0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x14, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x34, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x63, 0x63, 0x75, 0x72,
	0x61, 0x63, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x30, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x31, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c,
	0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x32, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x64,
	0x69, 0x75, 0x73, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x72, 0x61, 0x64, 0x69, 0x75,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x18, 0x34, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x18, 0x36, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x37, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2a, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x05, 0x66,
	0x69, 0x72, 0x73, 0x74, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x05, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x6c, 0x61, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x74, 0x4f, 0x66, 0x12, 0x24, 0x0a, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x3c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x52, 0x04, 0x6e, 0x65, 0x78, 0x74, 0x12, 0x24, 0x0a, 0x04, 0x70, 0x72, 0x65,
	0x76, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x04, 0x70, 0x72, 0x65, 0x76, 0x22,
	0xaa, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c,
	0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x30, 0x0a, 0x14,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xc1,
	0x01, 0x0a, 0x11, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x77, 0x6e, 0x65,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f,
	0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x22, 0xfc, 0x02, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31,
	0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x17, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44, 0x61, 0x74, 0x61,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x55, 0x6e, 0x72, 0x65,
	0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x73, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x73, 0x44,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66,
	0x56, 0x69, 0x65, 0x77, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x4f, 0x66, 0x56, 0x69, 0x65, 0x77, 0x52, 0x0b, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f,
	0x66, 0x56, 0x69, 0x65, 0x77, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0x48, 0x0a, 0x18, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a,
	0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x22, 0x8f, 0x01, 0x0a, 0x0c,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x4e, 0x0a,
	0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4f, 0x0a,
	0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8b,
	0x01, 0x0a, 0x1a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x73, 0x12, 0x35, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x1c,
	0x0a, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x73, 0x22, 0x59, 0x0a, 0x1b,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x0c, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x31, 0x0a, 0x17, 0x55, 0x6e, 0x72, 0x65, 0x61,
	0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x32, 0x0a, 0x18, 0x55, 0x6e,
	0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0x6b,
	0x0a, 0x17, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x78, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x18, 0x55,
	0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x22, 0xb1, 0x02, 0x0a, 0x16, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x09,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x13, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x42, 0x6f, 0x78,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x42, 0x6f, 0x78, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6d, 0x69, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x44, 0x42,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x44,
	0x42, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x22, 0x57, 0x0a, 0x17, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xa4,
	0x06, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x61, 0x73, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x00, 0x12, 0x0c, 0x0a,
	0x08, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x4c,
	0x69, 0x6e, 0x6b, 0x10, 0x2f, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x30, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x10, 0x31, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x32, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6c,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x10, 0x33, 0x12, 0x19, 0x0a,
	0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x67, 0x65, 0x10, 0x34, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e,
	0x10, 0x05, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x10, 0x06, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x72, 0x74, 0x69, 0x63, 0x6c, 0x65, 0x10, 0x07, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x75, 0x64, 0x69, 0x6f, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x63, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x10, 0x09, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x10, 0x0a,
	0x12, 0x09, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x6f, 0x74, 0x65, 0x10, 0x0c, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x61, 0x67, 0x65, 0x10, 0x0d, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72,
	0x6f, 0x66, 0x69, 0x6c, 0x65, 0x10, 0x0f, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x65, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x68, 0x69, 0x70, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x6d,
	0x62, 0x73, 0x74, 0x6f, 0x6e, 0x65, 0x10, 0x11, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x69, 0x64, 0x65,
	0x6f, 0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x13, 0x12,
	0x07, 0x0a, 0x03, 0x41, 0x64, 0x64, 0x10, 0x14, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x6e, 0x6e, 0x6f,
	0x75, 0x6e, 0x63, 0x65, 0x10, 0x15, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x72, 0x72, 0x69, 0x76, 0x65,
	0x10, 0x16, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x10, 0x17, 0x12, 0x0a, 0x0a,
	0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x18, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x6c, 0x69, 0x6b, 0x65,
	0x10, 0x1a, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x6c, 0x61, 0x67, 0x10, 0x1b, 0x12, 0x0a, 0x0a, 0x06,
	0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x67, 0x6e, 0x6f,
	0x72, 0x65, 0x10, 0x1d, 0x12, 0x0a, 0x0a, 0x06, 0x49, 0x6e, 0x76, 0x69, 0x74, 0x65, 0x10, 0x1e,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x6f, 0x69, 0x6e, 0x10, 0x1f, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x65,
	0x61, 0x76, 0x65, 0x10, 0x20, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x69, 0x6b, 0x65, 0x10, 0x21, 0x12,
	0x0a, 0x0a, 0x06, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x10, 0x22, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x6f, 0x76, 0x65, 0x10, 0x23, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x66, 0x66, 0x65, 0x72, 0x10, 0x24,
	0x12, 0x0c, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x25, 0x12, 0x0a,
	0x0a, 0x06, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x26, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x65,
	0x61, 0x64, 0x10, 0x27, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x28,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x6a,
	0x65, 0x63, 0x74, 0x10, 0x29, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x10, 0x2a, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x10, 0x2b, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x6e, 0x64, 0x6f, 0x10, 0x2c,
	0x12, 0x0a, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x2d, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x10, 0x3a, 0x12,
	0x0e, 0x0a, 0x0a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x10, 0x3b, 0x12,
	0x08, 0x0a, 0x04, 0x56, 0x69, 0x65, 0x77, 0x10, 0x2e, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x35, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x10, 0x36, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x10, 0x37,
	0x12, 0x08, 0x0a, 0x04, 0x43, 0x65, 0x6c, 0x6c, 0x10, 0x38, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x10, 0x39, 0x2a, 0x35, 0x0a, 0x0d, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x59, 0x46, 0x45, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x44, 0x10, 0x01, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x02, 0x2a, 0x39, 0x0a, 0x12,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x66, 0x56, 0x69,
	0x65, 0x77, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x49, 0x43, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x41, 0x43, 0x54, 0x4f, 0x52, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55,
	0x42, 0x4a, 0x45, 0x43, 0x54, 0x10, 0x02, 0x2a, 0x1f, 0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x32, 0x90, 0x05, 0x0a, 0x0f, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x0c,
	0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x12,
	0x5d, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x61,
	0x0a, 0x16, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69,
	0x65, 0x73, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x6e, 0x72, 0x65, 0x61, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x58, 0x0a, 0x0f, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x69, 0x65, 0x73, 0x12, 0x20, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x2e, 0x50, 0x75, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x13, 0x53,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x12, 0x21, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x61, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x46, 0x0a, 0x09, 0x53,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x1a, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x66, 0x0a, 0x13, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x24, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cells_activitystream_proto_rawDescOnce sync.Once
	file_cells_activitystream_proto_rawDescData = file_cells_activitystream_proto_rawDesc
)

func file_cells_activitystream_proto_rawDescGZIP() []byte {
	file_cells_activitystream_proto_rawDescOnce.Do(func() {
		file_cells_activitystream_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_activitystream_proto_rawDescData)
	})
	return file_cells_activitystream_proto_rawDescData
}

var file_cells_activitystream_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cells_activitystream_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_cells_activitystream_proto_goTypes = []interface{}{
	(ObjectType)(0),                     // 0: activity.ObjectType
	(StreamContext)(0),                  // 1: activity.StreamContext
	(SummaryPointOfView)(0),             // 2: activity.SummaryPointOfView
	(OwnerType)(0),                      // 3: activity.OwnerType
	(*Object)(nil),                      // 4: activity.Object
	(*PostActivityRequest)(nil),         // 5: activity.PostActivityRequest
	(*PostActivityResponse)(nil),        // 6: activity.PostActivityResponse
	(*PostActivityEvent)(nil),           // 7: activity.PostActivityEvent
	(*StreamActivitiesRequest)(nil),     // 8: activity.StreamActivitiesRequest
	(*StreamActivitiesResponse)(nil),    // 9: activity.StreamActivitiesResponse
	(*Subscription)(nil),                // 10: activity.Subscription
	(*SubscribeRequest)(nil),            // 11: activity.SubscribeRequest
	(*SubscribeResponse)(nil),           // 12: activity.SubscribeResponse
	(*SearchSubscriptionsRequest)(nil),  // 13: activity.SearchSubscriptionsRequest
	(*SearchSubscriptionsResponse)(nil), // 14: activity.SearchSubscriptionsResponse
	(*UnreadActivitiesRequest)(nil),     // 15: activity.UnreadActivitiesRequest
	(*UnreadActivitiesResponse)(nil),    // 16: activity.UnreadActivitiesResponse
	(*UserLastActivityRequest)(nil),     // 17: activity.UserLastActivityRequest
	(*UserLastActivityResponse)(nil),    // 18: activity.UserLastActivityResponse
	(*PurgeActivitiesRequest)(nil),      // 19: activity.PurgeActivitiesRequest
	(*PurgeActivitiesResponse)(nil),     // 20: activity.PurgeActivitiesResponse
	(*timestamppb.Timestamp)(nil),       // 21: google.protobuf.Timestamp
}
var file_cells_activitystream_proto_depIdxs = []int32{
	0,  // 0: activity.Object.type:type_name -> activity.ObjectType
	4,  // 1: activity.Object.context:type_name -> activity.Object
	4,  // 2: activity.Object.attachment:type_name -> activity.Object
	4,  // 3: activity.Object.attributedTo:type_name -> activity.Object
	4,  // 4: activity.Object.audience:type_name -> activity.Object
	4,  // 5: activity.Object.content:type_name -> activity.Object
	21, // 6: activity.Object.startTime:type_name -> google.protobuf.Timestamp
	21, // 7: activity.Object.endTime:type_name -> google.protobuf.Timestamp
	21, // 8: activity.Object.published:type_name -> google.protobuf.Timestamp
	21, // 9: activity.Object.updated:type_name -> google.protobuf.Timestamp
	21, // 10: activity.Object.duration:type_name -> google.protobuf.Timestamp
	4,  // 11: activity.Object.url:type_name -> activity.Object
	4,  // 12: activity.Object.icon:type_name -> activity.Object
	4,  // 13: activity.Object.image:type_name -> activity.Object
	4,  // 14: activity.Object.preview:type_name -> activity.Object
	4,  // 15: activity.Object.location:type_name -> activity.Object
	4,  // 16: activity.Object.inReplyTo:type_name -> activity.Object
	4,  // 17: activity.Object.replies:type_name -> activity.Object
	4,  // 18: activity.Object.tag:type_name -> activity.Object
	4,  // 19: activity.Object.generator:type_name -> activity.Object
	4,  // 20: activity.Object.to:type_name -> activity.Object
	4,  // 21: activity.Object.bto:type_name -> activity.Object
	4,  // 22: activity.Object.cc:type_name -> activity.Object
	4,  // 23: activity.Object.bcc:type_name -> activity.Object
	4,  // 24: activity.Object.actor:type_name -> activity.Object
	4,  // 25: activity.Object.object:type_name -> activity.Object
	4,  // 26: activity.Object.target:type_name -> activity.Object
	4,  // 27: activity.Object.result:type_name -> activity.Object
	4,  // 28: activity.Object.origin:type_name -> activity.Object
	4,  // 29: activity.Object.instrument:type_name -> activity.Object
	4,  // 30: activity.Object.oneOf:type_name -> activity.Object
	4,  // 31: activity.Object.anyOf:type_name -> activity.Object
	21, // 32: activity.Object.closed:type_name -> google.protobuf.Timestamp
	4,  // 33: activity.Object.subject:type_name -> activity.Object
	4,  // 34: activity.Object.relationship:type_name -> activity.Object
	0,  // 35: activity.Object.formerType:type_name -> activity.ObjectType
	21, // 36: activity.Object.deleted:type_name -> google.protobuf.Timestamp
	4,  // 37: activity.Object.items:type_name -> activity.Object
	4,  // 38: activity.Object.current:type_name -> activity.Object
	4,  // 39: activity.Object.first:type_name -> activity.Object
	4,  // 40: activity.Object.last:type_name -> activity.Object
	4,  // 41: activity.Object.partOf:type_name -> activity.Object
	4,  // 42: activity.Object.next:type_name -> activity.Object
	4,  // 43: activity.Object.prev:type_name -> activity.Object
	3,  // 44: activity.PostActivityRequest.OwnerType:type_name -> activity.OwnerType
	4,  // 45: activity.PostActivityRequest.Activity:type_name -> activity.Object
	3,  // 46: activity.PostActivityEvent.OwnerType:type_name -> activity.OwnerType
	4,  // 47: activity.PostActivityEvent.Activity:type_name -> activity.Object
	1,  // 48: activity.StreamActivitiesRequest.Context:type_name -> activity.StreamContext
	2,  // 49: activity.StreamActivitiesRequest.PointOfView:type_name -> activity.SummaryPointOfView
	4,  // 50: activity.StreamActivitiesResponse.activity:type_name -> activity.Object
	3,  // 51: activity.Subscription.ObjectType:type_name -> activity.OwnerType
	10, // 52: activity.SubscribeRequest.Subscription:type_name -> activity.Subscription
	10, // 53: activity.SubscribeResponse.Subscription:type_name -> activity.Subscription
	3,  // 54: activity.SearchSubscriptionsRequest.ObjectTypes:type_name -> activity.OwnerType
	10, // 55: activity.SearchSubscriptionsResponse.Subscription:type_name -> activity.Subscription
	3,  // 56: activity.PurgeActivitiesRequest.OwnerType:type_name -> activity.OwnerType
	5,  // 57: activity.ActivityService.PostActivity:input_type -> activity.PostActivityRequest
	8,  // 58: activity.ActivityService.StreamActivities:input_type -> activity.StreamActivitiesRequest
	15, // 59: activity.ActivityService.UnreadActivitiesNumber:input_type -> activity.UnreadActivitiesRequest
	19, // 60: activity.ActivityService.PurgeActivities:input_type -> activity.PurgeActivitiesRequest
	17, // 61: activity.ActivityService.SetUserLastActivity:input_type -> activity.UserLastActivityRequest
	11, // 62: activity.ActivityService.Subscribe:input_type -> activity.SubscribeRequest
	13, // 63: activity.ActivityService.SearchSubscriptions:input_type -> activity.SearchSubscriptionsRequest
	6,  // 64: activity.ActivityService.PostActivity:output_type -> activity.PostActivityResponse
	9,  // 65: activity.ActivityService.StreamActivities:output_type -> activity.StreamActivitiesResponse
	16, // 66: activity.ActivityService.UnreadActivitiesNumber:output_type -> activity.UnreadActivitiesResponse
	20, // 67: activity.ActivityService.PurgeActivities:output_type -> activity.PurgeActivitiesResponse
	18, // 68: activity.ActivityService.SetUserLastActivity:output_type -> activity.UserLastActivityResponse
	12, // 69: activity.ActivityService.Subscribe:output_type -> activity.SubscribeResponse
	14, // 70: activity.ActivityService.SearchSubscriptions:output_type -> activity.SearchSubscriptionsResponse
	64, // [64:71] is the sub-list for method output_type
	57, // [57:64] is the sub-list for method input_type
	57, // [57:57] is the sub-list for extension type_name
	57, // [57:57] is the sub-list for extension extendee
	0,  // [0:57] is the sub-list for field type_name
}

func init() { file_cells_activitystream_proto_init() }
func file_cells_activitystream_proto_init() {
	if File_cells_activitystream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_activitystream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Object); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostActivityEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subscription); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchSubscriptionsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnreadActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLastActivityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserLastActivityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeActivitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_activitystream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PurgeActivitiesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_activitystream_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cells_activitystream_proto_goTypes,
		DependencyIndexes: file_cells_activitystream_proto_depIdxs,
		EnumInfos:         file_cells_activitystream_proto_enumTypes,
		MessageInfos:      file_cells_activitystream_proto_msgTypes,
	}.Build()
	File_cells_activitystream_proto = out.File
	file_cells_activitystream_proto_rawDesc = nil
	file_cells_activitystream_proto_goTypes = nil
	file_cells_activitystream_proto_depIdxs = nil
}
