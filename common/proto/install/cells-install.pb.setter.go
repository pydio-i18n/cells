/*
 * Copyright (c) 2024 Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// This file is generated by protoc-gen-go-setter, do not edit manually

package install

import (
	"errors"
	"reflect"

	"google.golang.org/protobuf/proto"
)

type IRule interface {
	proto.Message
	RuleGetter
	RuleSetter
}

func NewIRule(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type RuleGetter interface {
	GetMatcher() string
	GetEffect() RuleEffect
	GetAction() string
	GetValue() string
}

type RuleSetter interface {
	SetMatcher(string)
	SetEffect(RuleEffect)
	SetAction(string)
	SetValue(string)
}

func (x *Rule) SetMatcher(v string) {
	if x == nil {
		x = new(Rule)
	}

	x.Matcher = v
}
func (x *Rule) SetEffect(v RuleEffect) {
	if x == nil {
		x = new(Rule)
	}

	x.Effect = v
}
func (x *Rule) SetAction(v string) {
	if x == nil {
		x = new(Rule)
	}

	x.Action = v
}
func (x *Rule) SetValue(v string) {
	if x == nil {
		x = new(Rule)
	}

	x.Value = v
}

type IProxyConfig interface {
	proto.Message
	ProxyConfigGetter
	ProxyConfigSetter
}

func NewIProxyConfig(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type ProxyConfigGetter interface {
	GetBinds() []string
	GetReverseProxyURL() string
	GetSelfSigned() *TLSSelfSigned
	GetLetsEncrypt() *TLSLetsEncrypt
	GetCertificate() *TLSCertificate
	GetSSLRedirect() bool
	GetMaintenance() bool
	GetMaintenanceConditions() []string
	GetRouting() []*Rule
	GetHeaderMods() []*HeaderMod
	GetComputedHash() string
}

type ProxyConfigSetter interface {
	SetBinds([]string)
	SetReverseProxyURL(string)
	SetSelfSigned(*TLSSelfSigned)
	SetLetsEncrypt(*TLSLetsEncrypt)
	SetCertificate(*TLSCertificate)
	SetSSLRedirect(bool)
	SetMaintenance(bool)
	SetMaintenanceConditions([]string)
	SetRouting([]*Rule)
	SetHeaderMods([]*HeaderMod)
	SetComputedHash(string)
}

func (x *ProxyConfig) SetBinds(v []string) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.Binds = v
}
func (x *ProxyConfig) SetReverseProxyURL(v string) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.ReverseProxyURL = v
}
func (x *ProxyConfig) SetSSLRedirect(v bool) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.SSLRedirect = v
}
func (x *ProxyConfig) SetMaintenance(v bool) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.Maintenance = v
}
func (x *ProxyConfig) SetMaintenanceConditions(v []string) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.MaintenanceConditions = v
}
func (x *ProxyConfig) SetRouting(v []*Rule) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.Routing = v
}
func (x *ProxyConfig) SetHeaderMods(v []*HeaderMod) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.HeaderMods = v
}
func (x *ProxyConfig) SetComputedHash(v string) {
	if x == nil {
		x = new(ProxyConfig)
	}

	x.ComputedHash = v
}
