// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cells-install.proto

package install

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type RuleEffect int32

const (
	RuleEffect_DENY   RuleEffect = 0
	RuleEffect_ACCEPT RuleEffect = 1
)

// Enum value maps for RuleEffect.
var (
	RuleEffect_name = map[int32]string{
		0: "DENY",
		1: "ACCEPT",
	}
	RuleEffect_value = map[string]int32{
		"DENY":   0,
		"ACCEPT": 1,
	}
)

func (x RuleEffect) Enum() *RuleEffect {
	p := new(RuleEffect)
	*p = x
	return p
}

func (x RuleEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RuleEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_install_proto_enumTypes[0].Descriptor()
}

func (RuleEffect) Type() protoreflect.EnumType {
	return &file_cells_install_proto_enumTypes[0]
}

func (x RuleEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RuleEffect.Descriptor instead.
func (RuleEffect) EnumDescriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{0}
}

type HeaderModAction int32

const (
	// This action will append the specified value to the existing values if the header
	// already exists. If the header doesn't exist then this will add the header with
	// specified key and value.
	HeaderModAction_APPEND_IF_EXISTS_OR_ADD HeaderModAction = 0
	// This action will add the header if it doesn't already exist. If the header
	// already exists then this will be a no-op.
	HeaderModAction_ADD_IF_ABSENT HeaderModAction = 1
	// This action will overwrite the specified value by discarding any existing values if
	// the header already exists. If the header doesn't exist then this will add the header
	// with specified key and value.
	HeaderModAction_OVERWRITE_IF_EXISTS_OR_ADD HeaderModAction = 2
	// This action will overwrite the specified value by discarding any existing values if
	// the header already exists. If the header doesn't exist then this will be no-op.
	HeaderModAction_OVERWRITE_IF_EXISTS HeaderModAction = 3
	// This action will purely remove the header if it exists, no-op otherwise
	HeaderModAction_REMOVE HeaderModAction = 4
)

// Enum value maps for HeaderModAction.
var (
	HeaderModAction_name = map[int32]string{
		0: "APPEND_IF_EXISTS_OR_ADD",
		1: "ADD_IF_ABSENT",
		2: "OVERWRITE_IF_EXISTS_OR_ADD",
		3: "OVERWRITE_IF_EXISTS",
		4: "REMOVE",
	}
	HeaderModAction_value = map[string]int32{
		"APPEND_IF_EXISTS_OR_ADD":    0,
		"ADD_IF_ABSENT":              1,
		"OVERWRITE_IF_EXISTS_OR_ADD": 2,
		"OVERWRITE_IF_EXISTS":        3,
		"REMOVE":                     4,
	}
)

func (x HeaderModAction) Enum() *HeaderModAction {
	p := new(HeaderModAction)
	*p = x
	return p
}

func (x HeaderModAction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderModAction) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_install_proto_enumTypes[1].Descriptor()
}

func (HeaderModAction) Type() protoreflect.EnumType {
	return &file_cells_install_proto_enumTypes[1]
}

func (x HeaderModAction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderModAction.Descriptor instead.
func (HeaderModAction) EnumDescriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{1}
}

type HeaderModApplyTo int32

const (
	// Apply header modification to incoming request
	HeaderModApplyTo_REQUEST HeaderModApplyTo = 0
	// Apply header modification to outgoing response
	HeaderModApplyTo_RESPONSE HeaderModApplyTo = 1
)

// Enum value maps for HeaderModApplyTo.
var (
	HeaderModApplyTo_name = map[int32]string{
		0: "REQUEST",
		1: "RESPONSE",
	}
	HeaderModApplyTo_value = map[string]int32{
		"REQUEST":  0,
		"RESPONSE": 1,
	}
)

func (x HeaderModApplyTo) Enum() *HeaderModApplyTo {
	p := new(HeaderModApplyTo)
	*p = x
	return p
}

func (x HeaderModApplyTo) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeaderModApplyTo) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_install_proto_enumTypes[2].Descriptor()
}

func (HeaderModApplyTo) Type() protoreflect.EnumType {
	return &file_cells_install_proto_enumTypes[2]
}

func (x HeaderModApplyTo) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeaderModApplyTo.Descriptor instead.
func (HeaderModApplyTo) EnumDescriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{2}
}

type InstallConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InternalUrl      string `protobuf:"bytes,32,opt,name=internalUrl,proto3" json:"internalUrl,omitempty"`
	DbConnectionType string `protobuf:"bytes,1,opt,name=dbConnectionType,proto3" json:"dbConnectionType,omitempty"`
	DbTCPHostname    string `protobuf:"bytes,2,opt,name=dbTCPHostname,proto3" json:"dbTCPHostname,omitempty"`
	DbTCPPort        string `protobuf:"bytes,3,opt,name=dbTCPPort,proto3" json:"dbTCPPort,omitempty"`
	DbTCPName        string `protobuf:"bytes,4,opt,name=dbTCPName,proto3" json:"dbTCPName,omitempty"`
	DbTCPUser        string `protobuf:"bytes,5,opt,name=dbTCPUser,proto3" json:"dbTCPUser,omitempty"`
	DbTCPPassword    string `protobuf:"bytes,6,opt,name=dbTCPPassword,proto3" json:"dbTCPPassword,omitempty"`
	DbSocketFile     string `protobuf:"bytes,7,opt,name=dbSocketFile,proto3" json:"dbSocketFile,omitempty"`
	DbSocketName     string `protobuf:"bytes,8,opt,name=dbSocketName,proto3" json:"dbSocketName,omitempty"`
	DbSocketUser     string `protobuf:"bytes,9,opt,name=dbSocketUser,proto3" json:"dbSocketUser,omitempty"`
	DbSocketPassword string `protobuf:"bytes,10,opt,name=dbSocketPassword,proto3" json:"dbSocketPassword,omitempty"`
	DbManualDSN      string `protobuf:"bytes,11,opt,name=dbManualDSN,proto3" json:"dbManualDSN,omitempty"`
	DbUseDefaults    bool   `protobuf:"varint,37,opt,name=dbUseDefaults,proto3" json:"dbUseDefaults,omitempty"`
	// Additional Documents DSN data
	DocumentsDSN             string         `protobuf:"bytes,38,opt,name=DocumentsDSN,proto3" json:"DocumentsDSN,omitempty"`
	UseDocumentsDSN          bool           `protobuf:"varint,39,opt,name=UseDocumentsDSN,proto3" json:"UseDocumentsDSN,omitempty"`
	DsName                   string         `protobuf:"bytes,12,opt,name=dsName,proto3" json:"dsName,omitempty"`
	DsPort                   string         `protobuf:"bytes,13,opt,name=dsPort,proto3" json:"dsPort,omitempty"`
	DsType                   string         `protobuf:"bytes,15,opt,name=dsType,proto3" json:"dsType,omitempty"`
	DsS3Custom               string         `protobuf:"bytes,16,opt,name=dsS3Custom,proto3" json:"dsS3Custom,omitempty"`
	DsS3CustomRegion         string         `protobuf:"bytes,17,opt,name=dsS3CustomRegion,proto3" json:"dsS3CustomRegion,omitempty"`
	DsS3ApiKey               string         `protobuf:"bytes,18,opt,name=dsS3ApiKey,proto3" json:"dsS3ApiKey,omitempty"`
	DsS3ApiSecret            string         `protobuf:"bytes,19,opt,name=dsS3ApiSecret,proto3" json:"dsS3ApiSecret,omitempty"`
	DsS3BucketDefault        string         `protobuf:"bytes,20,opt,name=dsS3BucketDefault,proto3" json:"dsS3BucketDefault,omitempty"`
	DsS3BucketPersonal       string         `protobuf:"bytes,21,opt,name=dsS3BucketPersonal,proto3" json:"dsS3BucketPersonal,omitempty"`
	DsS3BucketCells          string         `protobuf:"bytes,22,opt,name=dsS3BucketCells,proto3" json:"dsS3BucketCells,omitempty"`
	DsS3BucketBinaries       string         `protobuf:"bytes,23,opt,name=dsS3BucketBinaries,proto3" json:"dsS3BucketBinaries,omitempty"`
	DsS3BucketThumbs         string         `protobuf:"bytes,35,opt,name=dsS3BucketThumbs,proto3" json:"dsS3BucketThumbs,omitempty"`
	DsS3BucketVersions       string         `protobuf:"bytes,36,opt,name=dsS3BucketVersions,proto3" json:"dsS3BucketVersions,omitempty"`
	DsFolder                 string         `protobuf:"bytes,14,opt,name=dsFolder,proto3" json:"dsFolder,omitempty"`
	FrontendHosts            string         `protobuf:"bytes,24,opt,name=frontendHosts,proto3" json:"frontendHosts,omitempty"`
	FrontendLogin            string         `protobuf:"bytes,25,opt,name=frontendLogin,proto3" json:"frontendLogin,omitempty"`
	FrontendPassword         string         `protobuf:"bytes,26,opt,name=frontendPassword,proto3" json:"frontendPassword,omitempty"`
	FrontendRepeatPassword   string         `protobuf:"bytes,27,opt,name=frontendRepeatPassword,proto3" json:"frontendRepeatPassword,omitempty"`
	FrontendApplicationTitle string         `protobuf:"bytes,28,opt,name=frontendApplicationTitle,proto3" json:"frontendApplicationTitle,omitempty"`
	FrontendDefaultLanguage  string         `protobuf:"bytes,33,opt,name=frontendDefaultLanguage,proto3" json:"frontendDefaultLanguage,omitempty"`
	LicenseRequired          bool           `protobuf:"varint,29,opt,name=licenseRequired,proto3" json:"licenseRequired,omitempty"`
	LicenseString            string         `protobuf:"bytes,30,opt,name=licenseString,proto3" json:"licenseString,omitempty"`
	CheckResults             []*CheckResult `protobuf:"bytes,31,rep,name=CheckResults,proto3" json:"CheckResults,omitempty"`
	// Additional proxy config (optional)
	ProxyConfig   *ProxyConfig      `protobuf:"bytes,34,opt,name=ProxyConfig,proto3" json:"ProxyConfig,omitempty"`
	CustomConfigs map[string]string `protobuf:"bytes,40,rep,name=CustomConfigs,proto3" json:"CustomConfigs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *InstallConfig) Reset() {
	*x = InstallConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallConfig) ProtoMessage() {}

func (x *InstallConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallConfig.ProtoReflect.Descriptor instead.
func (*InstallConfig) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{0}
}

func (x *InstallConfig) GetInternalUrl() string {
	if x != nil {
		return x.InternalUrl
	}
	return ""
}

func (x *InstallConfig) GetDbConnectionType() string {
	if x != nil {
		return x.DbConnectionType
	}
	return ""
}

func (x *InstallConfig) GetDbTCPHostname() string {
	if x != nil {
		return x.DbTCPHostname
	}
	return ""
}

func (x *InstallConfig) GetDbTCPPort() string {
	if x != nil {
		return x.DbTCPPort
	}
	return ""
}

func (x *InstallConfig) GetDbTCPName() string {
	if x != nil {
		return x.DbTCPName
	}
	return ""
}

func (x *InstallConfig) GetDbTCPUser() string {
	if x != nil {
		return x.DbTCPUser
	}
	return ""
}

func (x *InstallConfig) GetDbTCPPassword() string {
	if x != nil {
		return x.DbTCPPassword
	}
	return ""
}

func (x *InstallConfig) GetDbSocketFile() string {
	if x != nil {
		return x.DbSocketFile
	}
	return ""
}

func (x *InstallConfig) GetDbSocketName() string {
	if x != nil {
		return x.DbSocketName
	}
	return ""
}

func (x *InstallConfig) GetDbSocketUser() string {
	if x != nil {
		return x.DbSocketUser
	}
	return ""
}

func (x *InstallConfig) GetDbSocketPassword() string {
	if x != nil {
		return x.DbSocketPassword
	}
	return ""
}

func (x *InstallConfig) GetDbManualDSN() string {
	if x != nil {
		return x.DbManualDSN
	}
	return ""
}

func (x *InstallConfig) GetDbUseDefaults() bool {
	if x != nil {
		return x.DbUseDefaults
	}
	return false
}

func (x *InstallConfig) GetDocumentsDSN() string {
	if x != nil {
		return x.DocumentsDSN
	}
	return ""
}

func (x *InstallConfig) GetUseDocumentsDSN() bool {
	if x != nil {
		return x.UseDocumentsDSN
	}
	return false
}

func (x *InstallConfig) GetDsName() string {
	if x != nil {
		return x.DsName
	}
	return ""
}

func (x *InstallConfig) GetDsPort() string {
	if x != nil {
		return x.DsPort
	}
	return ""
}

func (x *InstallConfig) GetDsType() string {
	if x != nil {
		return x.DsType
	}
	return ""
}

func (x *InstallConfig) GetDsS3Custom() string {
	if x != nil {
		return x.DsS3Custom
	}
	return ""
}

func (x *InstallConfig) GetDsS3CustomRegion() string {
	if x != nil {
		return x.DsS3CustomRegion
	}
	return ""
}

func (x *InstallConfig) GetDsS3ApiKey() string {
	if x != nil {
		return x.DsS3ApiKey
	}
	return ""
}

func (x *InstallConfig) GetDsS3ApiSecret() string {
	if x != nil {
		return x.DsS3ApiSecret
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketDefault() string {
	if x != nil {
		return x.DsS3BucketDefault
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketPersonal() string {
	if x != nil {
		return x.DsS3BucketPersonal
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketCells() string {
	if x != nil {
		return x.DsS3BucketCells
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketBinaries() string {
	if x != nil {
		return x.DsS3BucketBinaries
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketThumbs() string {
	if x != nil {
		return x.DsS3BucketThumbs
	}
	return ""
}

func (x *InstallConfig) GetDsS3BucketVersions() string {
	if x != nil {
		return x.DsS3BucketVersions
	}
	return ""
}

func (x *InstallConfig) GetDsFolder() string {
	if x != nil {
		return x.DsFolder
	}
	return ""
}

func (x *InstallConfig) GetFrontendHosts() string {
	if x != nil {
		return x.FrontendHosts
	}
	return ""
}

func (x *InstallConfig) GetFrontendLogin() string {
	if x != nil {
		return x.FrontendLogin
	}
	return ""
}

func (x *InstallConfig) GetFrontendPassword() string {
	if x != nil {
		return x.FrontendPassword
	}
	return ""
}

func (x *InstallConfig) GetFrontendRepeatPassword() string {
	if x != nil {
		return x.FrontendRepeatPassword
	}
	return ""
}

func (x *InstallConfig) GetFrontendApplicationTitle() string {
	if x != nil {
		return x.FrontendApplicationTitle
	}
	return ""
}

func (x *InstallConfig) GetFrontendDefaultLanguage() string {
	if x != nil {
		return x.FrontendDefaultLanguage
	}
	return ""
}

func (x *InstallConfig) GetLicenseRequired() bool {
	if x != nil {
		return x.LicenseRequired
	}
	return false
}

func (x *InstallConfig) GetLicenseString() string {
	if x != nil {
		return x.LicenseString
	}
	return ""
}

func (x *InstallConfig) GetCheckResults() []*CheckResult {
	if x != nil {
		return x.CheckResults
	}
	return nil
}

func (x *InstallConfig) GetProxyConfig() *ProxyConfig {
	if x != nil {
		return x.ProxyConfig
	}
	return nil
}

func (x *InstallConfig) GetCustomConfigs() map[string]string {
	if x != nil {
		return x.CustomConfigs
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// option (setter.all_fields) = true;
	// Matcher matches one or more routes or *
	Matcher string `protobuf:"bytes,1,opt,name=Matcher,proto3" json:"Matcher,omitempty"`
	// Effect accepts or denies
	Effect RuleEffect `protobuf:"varint,2,opt,name=Effect,proto3,enum=install.RuleEffect" json:"Effect,omitempty"`
	// Action can be Rewrite, Redirect, etc...
	Action string `protobuf:"bytes,3,opt,name=Action,proto3" json:"Action,omitempty"`
	// Value may add additional parameters to the action
	Value string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetMatcher() string {
	if x != nil {
		return x.Matcher
	}
	return ""
}

func (x *Rule) GetEffect() RuleEffect {
	if x != nil {
		return x.Effect
	}
	return RuleEffect_DENY
}

func (x *Rule) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *Rule) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type HeaderMod struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Mod on Request or Response header
	ApplyTo HeaderModApplyTo `protobuf:"varint,1,opt,name=ApplyTo,proto3,enum=install.HeaderModApplyTo" json:"ApplyTo,omitempty"`
	// One of the HeaderModAction
	Action HeaderModAction `protobuf:"varint,2,opt,name=Action,proto3,enum=install.HeaderModAction" json:"Action,omitempty"`
	// Header key
	Key string `protobuf:"bytes,3,opt,name=Key,proto3" json:"Key,omitempty"`
	// Header value - not used if action is REMOVE
	Value string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *HeaderMod) Reset() {
	*x = HeaderMod{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeaderMod) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeaderMod) ProtoMessage() {}

func (x *HeaderMod) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeaderMod.ProtoReflect.Descriptor instead.
func (*HeaderMod) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{2}
}

func (x *HeaderMod) GetApplyTo() HeaderModApplyTo {
	if x != nil {
		return x.ApplyTo
	}
	return HeaderModApplyTo_REQUEST
}

func (x *HeaderMod) GetAction() HeaderModAction {
	if x != nil {
		return x.Action
	}
	return HeaderModAction_APPEND_IF_EXISTS_OR_ADD
}

func (x *HeaderMod) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *HeaderMod) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ProxyConfig gives necessary URL and TLS configurations to start proxy
type ProxyConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A list of [host]:port to bind to
	Binds []string `protobuf:"bytes,1,rep,name=Binds,proto3" json:"Binds,omitempty"`
	// Optional URL of reverse proxy exposing this site
	ReverseProxyURL string `protobuf:"bytes,3,opt,name=ReverseProxyURL,proto3" json:"ReverseProxyURL,omitempty"`
	// TLS configuration used for this site
	//
	// Types that are assignable to TLSConfig:
	//
	//	*ProxyConfig_SelfSigned
	//	*ProxyConfig_LetsEncrypt
	//	*ProxyConfig_Certificate
	TLSConfig isProxyConfig_TLSConfig `protobuf_oneof:"TLSConfig"`
	// If TLS is set, whether to automatically redirect each http://host:port to https://host:port
	SSLRedirect bool `protobuf:"varint,2,opt,name=SSLRedirect,proto3" json:"SSLRedirect,omitempty"`
	// If set, this site will be in maintenance mode
	Maintenance bool `protobuf:"varint,7,opt,name=Maintenance,proto3" json:"Maintenance,omitempty"`
	// Append caddy directive to restrict maintenance mode
	MaintenanceConditions []string `protobuf:"bytes,8,rep,name=MaintenanceConditions,proto3" json:"MaintenanceConditions,omitempty"`
	// Optional matching rules for main routes - special empty case means Match All, but if any routes are defined
	// they are evaluated with a Deny-by-default and ExplicitDeny-wins approach
	Routing []*Rule `protobuf:"bytes,9,rep,name=Routing,proto3" json:"Routing,omitempty"`
	// Optional headers modifications
	HeaderMods []*HeaderMod `protobuf:"bytes,10,rep,name=HeaderMods,proto3" json:"HeaderMods,omitempty"`
	// Hash dynamically computed from Binds and ReverseProxyURL
	ComputedHash string `protobuf:"bytes,11,opt,name=ComputedHash,proto3" json:"ComputedHash,omitempty"`
}

func (x *ProxyConfig) Reset() {
	*x = ProxyConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyConfig) ProtoMessage() {}

func (x *ProxyConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyConfig.ProtoReflect.Descriptor instead.
func (*ProxyConfig) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{3}
}

func (x *ProxyConfig) GetBinds() []string {
	if x != nil {
		return x.Binds
	}
	return nil
}

func (x *ProxyConfig) GetReverseProxyURL() string {
	if x != nil {
		return x.ReverseProxyURL
	}
	return ""
}

func (m *ProxyConfig) GetTLSConfig() isProxyConfig_TLSConfig {
	if m != nil {
		return m.TLSConfig
	}
	return nil
}

func (x *ProxyConfig) GetSelfSigned() *TLSSelfSigned {
	if x, ok := x.GetTLSConfig().(*ProxyConfig_SelfSigned); ok {
		return x.SelfSigned
	}
	return nil
}

func (x *ProxyConfig) GetLetsEncrypt() *TLSLetsEncrypt {
	if x, ok := x.GetTLSConfig().(*ProxyConfig_LetsEncrypt); ok {
		return x.LetsEncrypt
	}
	return nil
}

func (x *ProxyConfig) GetCertificate() *TLSCertificate {
	if x, ok := x.GetTLSConfig().(*ProxyConfig_Certificate); ok {
		return x.Certificate
	}
	return nil
}

func (x *ProxyConfig) GetSSLRedirect() bool {
	if x != nil {
		return x.SSLRedirect
	}
	return false
}

func (x *ProxyConfig) GetMaintenance() bool {
	if x != nil {
		return x.Maintenance
	}
	return false
}

func (x *ProxyConfig) GetMaintenanceConditions() []string {
	if x != nil {
		return x.MaintenanceConditions
	}
	return nil
}

func (x *ProxyConfig) GetRouting() []*Rule {
	if x != nil {
		return x.Routing
	}
	return nil
}

func (x *ProxyConfig) GetHeaderMods() []*HeaderMod {
	if x != nil {
		return x.HeaderMods
	}
	return nil
}

func (x *ProxyConfig) GetComputedHash() string {
	if x != nil {
		return x.ComputedHash
	}
	return ""
}

type isProxyConfig_TLSConfig interface {
	isProxyConfig_TLSConfig()
}

type ProxyConfig_SelfSigned struct {
	SelfSigned *TLSSelfSigned `protobuf:"bytes,4,opt,name=SelfSigned,proto3,oneof"`
}

type ProxyConfig_LetsEncrypt struct {
	LetsEncrypt *TLSLetsEncrypt `protobuf:"bytes,5,opt,name=LetsEncrypt,proto3,oneof"`
}

type ProxyConfig_Certificate struct {
	Certificate *TLSCertificate `protobuf:"bytes,6,opt,name=Certificate,proto3,oneof"`
}

func (*ProxyConfig_SelfSigned) isProxyConfig_TLSConfig() {}

func (*ProxyConfig_LetsEncrypt) isProxyConfig_TLSConfig() {}

func (*ProxyConfig_Certificate) isProxyConfig_TLSConfig() {}

// TLSSelfSigned generates a selfsigned certificate
type TLSSelfSigned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostnames []string `protobuf:"bytes,1,rep,name=Hostnames,proto3" json:"Hostnames,omitempty"`
}

func (x *TLSSelfSigned) Reset() {
	*x = TLSSelfSigned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSSelfSigned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSSelfSigned) ProtoMessage() {}

func (x *TLSSelfSigned) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSSelfSigned.ProtoReflect.Descriptor instead.
func (*TLSSelfSigned) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{4}
}

func (x *TLSSelfSigned) GetHostnames() []string {
	if x != nil {
		return x.Hostnames
	}
	return nil
}

// TLSLetsEncrypt set up proxy to automatically get a valid certificate from let's encrypt servers
type TLSLetsEncrypt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Email      string `protobuf:"bytes,1,opt,name=Email,proto3" json:"Email,omitempty"`
	AcceptEULA bool   `protobuf:"varint,2,opt,name=AcceptEULA,proto3" json:"AcceptEULA,omitempty"`
	StagingCA  bool   `protobuf:"varint,3,opt,name=StagingCA,proto3" json:"StagingCA,omitempty"`
}

func (x *TLSLetsEncrypt) Reset() {
	*x = TLSLetsEncrypt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSLetsEncrypt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSLetsEncrypt) ProtoMessage() {}

func (x *TLSLetsEncrypt) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSLetsEncrypt.ProtoReflect.Descriptor instead.
func (*TLSLetsEncrypt) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{5}
}

func (x *TLSLetsEncrypt) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *TLSLetsEncrypt) GetAcceptEULA() bool {
	if x != nil {
		return x.AcceptEULA
	}
	return false
}

func (x *TLSLetsEncrypt) GetStagingCA() bool {
	if x != nil {
		return x.StagingCA
	}
	return false
}

// TLSCertificate is a TLSConfig where user passes
type TLSCertificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CertFile    string `protobuf:"bytes,1,opt,name=CertFile,proto3" json:"CertFile,omitempty"`
	KeyFile     string `protobuf:"bytes,2,opt,name=KeyFile,proto3" json:"KeyFile,omitempty"`
	CellsRootCA string `protobuf:"bytes,3,opt,name=CellsRootCA,proto3" json:"CellsRootCA,omitempty"`
}

func (x *TLSCertificate) Reset() {
	*x = TLSCertificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSCertificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSCertificate) ProtoMessage() {}

func (x *TLSCertificate) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSCertificate.ProtoReflect.Descriptor instead.
func (*TLSCertificate) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{6}
}

func (x *TLSCertificate) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *TLSCertificate) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *TLSCertificate) GetCellsRootCA() string {
	if x != nil {
		return x.CellsRootCA
	}
	return ""
}

type CheckResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Success    bool   `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	JsonResult string `protobuf:"bytes,3,opt,name=JsonResult,proto3" json:"JsonResult,omitempty"`
}

func (x *CheckResult) Reset() {
	*x = CheckResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CheckResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CheckResult) ProtoMessage() {}

func (x *CheckResult) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CheckResult.ProtoReflect.Descriptor instead.
func (*CheckResult) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{7}
}

func (x *CheckResult) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CheckResult) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CheckResult) GetJsonResult() string {
	if x != nil {
		return x.JsonResult
	}
	return ""
}

type PerformCheckRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string         `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Config *InstallConfig `protobuf:"bytes,2,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *PerformCheckRequest) Reset() {
	*x = PerformCheckRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformCheckRequest) ProtoMessage() {}

func (x *PerformCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformCheckRequest.ProtoReflect.Descriptor instead.
func (*PerformCheckRequest) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{8}
}

func (x *PerformCheckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PerformCheckRequest) GetConfig() *InstallConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type PerformCheckResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Result *CheckResult `protobuf:"bytes,1,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *PerformCheckResponse) Reset() {
	*x = PerformCheckResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PerformCheckResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PerformCheckResponse) ProtoMessage() {}

func (x *PerformCheckResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PerformCheckResponse.ProtoReflect.Descriptor instead.
func (*PerformCheckResponse) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{9}
}

func (x *PerformCheckResponse) GetResult() *CheckResult {
	if x != nil {
		return x.Result
	}
	return nil
}

type GetDefaultsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDefaultsRequest) Reset() {
	*x = GetDefaultsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultsRequest) ProtoMessage() {}

func (x *GetDefaultsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultsRequest.ProtoReflect.Descriptor instead.
func (*GetDefaultsRequest) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{10}
}

type GetDefaultsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *InstallConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *GetDefaultsResponse) Reset() {
	*x = GetDefaultsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDefaultsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDefaultsResponse) ProtoMessage() {}

func (x *GetDefaultsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDefaultsResponse.ProtoReflect.Descriptor instead.
func (*GetDefaultsResponse) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{11}
}

func (x *GetDefaultsResponse) GetConfig() *InstallConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetAgreementRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAgreementRequest) Reset() {
	*x = GetAgreementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgreementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgreementRequest) ProtoMessage() {}

func (x *GetAgreementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgreementRequest.ProtoReflect.Descriptor instead.
func (*GetAgreementRequest) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{12}
}

type GetAgreementResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Text string `protobuf:"bytes,1,opt,name=Text,proto3" json:"Text,omitempty"`
}

func (x *GetAgreementResponse) Reset() {
	*x = GetAgreementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAgreementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgreementResponse) ProtoMessage() {}

func (x *GetAgreementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgreementResponse.ProtoReflect.Descriptor instead.
func (*GetAgreementResponse) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{13}
}

func (x *GetAgreementResponse) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

type InstallRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config *InstallConfig `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *InstallRequest) Reset() {
	*x = InstallRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallRequest) ProtoMessage() {}

func (x *InstallRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallRequest.ProtoReflect.Descriptor instead.
func (*InstallRequest) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{14}
}

func (x *InstallRequest) GetConfig() *InstallConfig {
	if x != nil {
		return x.Config
	}
	return nil
}

type InstallResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *InstallResponse) Reset() {
	*x = InstallResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallResponse) ProtoMessage() {}

func (x *InstallResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallResponse.ProtoReflect.Descriptor instead.
func (*InstallResponse) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{15}
}

func (x *InstallResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type InstallEventsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *InstallEventsRequest) Reset() {
	*x = InstallEventsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallEventsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallEventsRequest) ProtoMessage() {}

func (x *InstallEventsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallEventsRequest.ProtoReflect.Descriptor instead.
func (*InstallEventsRequest) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{16}
}

type InstallEventsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *InstallEventsResponse) Reset() {
	*x = InstallEventsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_install_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InstallEventsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InstallEventsResponse) ProtoMessage() {}

func (x *InstallEventsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_install_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InstallEventsResponse.ProtoReflect.Descriptor instead.
func (*InstallEventsResponse) Descriptor() ([]byte, []int) {
	return file_cells_install_proto_rawDescGZIP(), []int{17}
}

func (x *InstallEventsResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

var File_cells_install_proto protoreflect.FileDescriptor

var file_cells_install_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x22, 0xb6,
	0x0d, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x18,
	0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55,
	0x72, 0x6c, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x62, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x62,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x62, 0x54, 0x43, 0x50, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x54, 0x43, 0x50, 0x48, 0x6f, 0x73, 0x74,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x50, 0x6f, 0x72,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x55, 0x73, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x64, 0x62, 0x54, 0x43, 0x50, 0x55, 0x73, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x62, 0x54, 0x43, 0x50, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x62, 0x54, 0x43, 0x50, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x64, 0x62, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x62, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x64, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c,
	0x64, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x64, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x2a, 0x0a, 0x10, 0x64, 0x62, 0x53, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x62, 0x53, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b,
	0x64, 0x62, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x53, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x64, 0x62, 0x4d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x44, 0x53, 0x4e, 0x12, 0x24,
	0x0a, 0x0d, 0x64, 0x62, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x18,
	0x25, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x64, 0x62, 0x55, 0x73, 0x65, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x44, 0x53, 0x4e, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x44, 0x6f, 0x63, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x53, 0x4e, 0x12, 0x28, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x53, 0x4e, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x44,
	0x53, 0x4e, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73,
	0x50, 0x6f, 0x72, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73,
	0x53, 0x33, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x64, 0x73, 0x53, 0x33, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x73,
	0x53, 0x33, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x64, 0x73, 0x53, 0x33, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x73, 0x53, 0x33, 0x41, 0x70,
	0x69, 0x4b, 0x65, 0x79, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x73, 0x53, 0x33,
	0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x73, 0x53, 0x33, 0x41, 0x70,
	0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64,
	0x73, 0x53, 0x33, 0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x2c, 0x0a, 0x11,
	0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x50, 0x65, 0x72, 0x73, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x64, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x65, 0x6c, 0x6c, 0x73, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x69, 0x65, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x54, 0x68, 0x75, 0x6d, 0x62, 0x73,
	0x12, 0x2e, 0x0a, 0x12, 0x64, 0x73, 0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x64, 0x73,
	0x53, 0x33, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x73, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x73, 0x74, 0x73, 0x18, 0x18, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x48, 0x6f, 0x73,
	0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64,
	0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x52, 0x65,
	0x70, 0x65, 0x61, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3a, 0x0a, 0x18,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x18,
	0x66, 0x72, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x66, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x64, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61,
	0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6c, 0x69, 0x63,
	0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x12, 0x38, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x0c,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x36, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x4f, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x18, 0x28, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x7b, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x12, 0x2b, 0x0a, 0x06, 0x45, 0x66, 0x66,
	0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06,
	0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x9a, 0x01, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x12, 0x33, 0x0a, 0x07, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x65,
	0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x52, 0x07,
	0x41, 0x70, 0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x89, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x14, 0x0a, 0x05, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x42, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0f, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x55, 0x52,
	0x4c, 0x12, 0x38, 0x0a, 0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e,
	0x54, 0x4c, 0x53, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0a, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x4c,
	0x65, 0x74, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x4c, 0x53, 0x4c, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x4c, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x3b, 0x0a, 0x0b, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x53, 0x4c, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x53, 0x4c, 0x52,
	0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x69, 0x6e, 0x74,
	0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4d, 0x61,
	0x69, 0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x69,
	0x6e, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x15, 0x4d, 0x61, 0x69, 0x6e, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x27, 0x0a, 0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x07, 0x52, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x32, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64,
	0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x70, 0x75, 0x74, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x42, 0x0b, 0x0a, 0x09, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2d, 0x0a,
	0x0d, 0x54, 0x4c, 0x53, 0x53, 0x65, 0x6c, 0x66, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x09, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x0e,
	0x54, 0x4c, 0x53, 0x4c, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45,
	0x6d, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x45, 0x55,
	0x4c, 0x41, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74,
	0x45, 0x55, 0x4c, 0x41, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67, 0x43,
	0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x53, 0x74, 0x61, 0x67, 0x69, 0x6e, 0x67,
	0x43, 0x41, 0x22, 0x68, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x65, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x4b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x65,
	0x6c, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x52, 0x6f, 0x6f, 0x74, 0x43, 0x41, 0x22, 0x5b, 0x0a, 0x0b,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x4a, 0x73, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x59, 0x0a, 0x13, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x44, 0x0a, 0x14, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x14, 0x0a, 0x12, 0x47, 0x65,
	0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x45, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x15, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x41, 0x67,
	0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x2a,
	0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x65, 0x78, 0x74, 0x22, 0x40, 0x0a, 0x0e, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x52, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x2b, 0x0a, 0x0f,
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x49, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x22, 0x31, 0x0a, 0x15, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x2a, 0x22, 0x0a, 0x0a, 0x52, 0x75, 0x6c, 0x65, 0x45, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x41, 0x43, 0x43, 0x45, 0x50, 0x54, 0x10, 0x01, 0x2a, 0x86, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x17,
	0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x49, 0x46, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53,
	0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x44, 0x44,
	0x5f, 0x49, 0x46, 0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x10, 0x01, 0x12, 0x1e, 0x0a, 0x1a,
	0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x5f, 0x4f, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13,
	0x4f, 0x56, 0x45, 0x52, 0x57, 0x52, 0x49, 0x54, 0x45, 0x5f, 0x49, 0x46, 0x5f, 0x45, 0x58, 0x49,
	0x53, 0x54, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10,
	0x04, 0x2a, 0x2d, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x41, 0x70,
	0x70, 0x6c, 0x79, 0x54, 0x6f, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54,
	0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53, 0x50, 0x4f, 0x4e, 0x53, 0x45, 0x10, 0x01,
	0x32, 0xde, 0x01, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x12, 0x48, 0x0a, 0x0b,
	0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x69, 0x6e,
	0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61,
	0x6c, 0x6c, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c,
	0x6c, 0x12, 0x17, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x69, 0x6e, 0x73,
	0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0c, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x30, 0x5a, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x70, 0x79, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x76, 0x35, 0x2f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x6e, 0x73, 0x74,
	0x61, 0x6c, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cells_install_proto_rawDescOnce sync.Once
	file_cells_install_proto_rawDescData = file_cells_install_proto_rawDesc
)

func file_cells_install_proto_rawDescGZIP() []byte {
	file_cells_install_proto_rawDescOnce.Do(func() {
		file_cells_install_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_install_proto_rawDescData)
	})
	return file_cells_install_proto_rawDescData
}

var file_cells_install_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cells_install_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cells_install_proto_goTypes = []any{
	(RuleEffect)(0),               // 0: install.RuleEffect
	(HeaderModAction)(0),          // 1: install.HeaderModAction
	(HeaderModApplyTo)(0),         // 2: install.HeaderModApplyTo
	(*InstallConfig)(nil),         // 3: install.InstallConfig
	(*Rule)(nil),                  // 4: install.Rule
	(*HeaderMod)(nil),             // 5: install.HeaderMod
	(*ProxyConfig)(nil),           // 6: install.ProxyConfig
	(*TLSSelfSigned)(nil),         // 7: install.TLSSelfSigned
	(*TLSLetsEncrypt)(nil),        // 8: install.TLSLetsEncrypt
	(*TLSCertificate)(nil),        // 9: install.TLSCertificate
	(*CheckResult)(nil),           // 10: install.CheckResult
	(*PerformCheckRequest)(nil),   // 11: install.PerformCheckRequest
	(*PerformCheckResponse)(nil),  // 12: install.PerformCheckResponse
	(*GetDefaultsRequest)(nil),    // 13: install.GetDefaultsRequest
	(*GetDefaultsResponse)(nil),   // 14: install.GetDefaultsResponse
	(*GetAgreementRequest)(nil),   // 15: install.GetAgreementRequest
	(*GetAgreementResponse)(nil),  // 16: install.GetAgreementResponse
	(*InstallRequest)(nil),        // 17: install.InstallRequest
	(*InstallResponse)(nil),       // 18: install.InstallResponse
	(*InstallEventsRequest)(nil),  // 19: install.InstallEventsRequest
	(*InstallEventsResponse)(nil), // 20: install.InstallEventsResponse
	nil,                           // 21: install.InstallConfig.CustomConfigsEntry
}
var file_cells_install_proto_depIdxs = []int32{
	10, // 0: install.InstallConfig.CheckResults:type_name -> install.CheckResult
	6,  // 1: install.InstallConfig.ProxyConfig:type_name -> install.ProxyConfig
	21, // 2: install.InstallConfig.CustomConfigs:type_name -> install.InstallConfig.CustomConfigsEntry
	0,  // 3: install.Rule.Effect:type_name -> install.RuleEffect
	2,  // 4: install.HeaderMod.ApplyTo:type_name -> install.HeaderModApplyTo
	1,  // 5: install.HeaderMod.Action:type_name -> install.HeaderModAction
	7,  // 6: install.ProxyConfig.SelfSigned:type_name -> install.TLSSelfSigned
	8,  // 7: install.ProxyConfig.LetsEncrypt:type_name -> install.TLSLetsEncrypt
	9,  // 8: install.ProxyConfig.Certificate:type_name -> install.TLSCertificate
	4,  // 9: install.ProxyConfig.Routing:type_name -> install.Rule
	5,  // 10: install.ProxyConfig.HeaderMods:type_name -> install.HeaderMod
	3,  // 11: install.PerformCheckRequest.Config:type_name -> install.InstallConfig
	10, // 12: install.PerformCheckResponse.Result:type_name -> install.CheckResult
	3,  // 13: install.GetDefaultsResponse.config:type_name -> install.InstallConfig
	3,  // 14: install.InstallRequest.config:type_name -> install.InstallConfig
	13, // 15: install.Install.GetDefaults:input_type -> install.GetDefaultsRequest
	17, // 16: install.Install.Install:input_type -> install.InstallRequest
	11, // 17: install.Install.PerformCheck:input_type -> install.PerformCheckRequest
	14, // 18: install.Install.GetDefaults:output_type -> install.GetDefaultsResponse
	18, // 19: install.Install.Install:output_type -> install.InstallResponse
	12, // 20: install.Install.PerformCheck:output_type -> install.PerformCheckResponse
	18, // [18:21] is the sub-list for method output_type
	15, // [15:18] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_cells_install_proto_init() }
func file_cells_install_proto_init() {
	if File_cells_install_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_install_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*InstallConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*HeaderMod); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ProxyConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*TLSSelfSigned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*TLSLetsEncrypt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*TLSCertificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CheckResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*PerformCheckRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*PerformCheckResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetDefaultsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetDefaultsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgreementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*GetAgreementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*InstallRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*InstallResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*InstallEventsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_install_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*InstallEventsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cells_install_proto_msgTypes[3].OneofWrappers = []any{
		(*ProxyConfig_SelfSigned)(nil),
		(*ProxyConfig_LetsEncrypt)(nil),
		(*ProxyConfig_Certificate)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_install_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cells_install_proto_goTypes,
		DependencyIndexes: file_cells_install_proto_depIdxs,
		EnumInfos:         file_cells_install_proto_enumTypes,
		MessageInfos:      file_cells_install_proto_msgTypes,
	}.Build()
	File_cells_install_proto = out.File
	file_cells_install_proto_rawDesc = nil
	file_cells_install_proto_goTypes = nil
	file_cells_install_proto_depIdxs = nil
}
