// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: cells-install.proto

package install

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Install_GetDefaults_FullMethodName  = "/install.Install/GetDefaults"
	Install_Install_FullMethodName      = "/install.Install/Install"
	Install_PerformCheck_FullMethodName = "/install.Install/PerformCheck"
)

// InstallClient is the client API for Install service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type InstallClient interface {
	GetDefaults(ctx context.Context, in *GetDefaultsRequest, opts ...grpc.CallOption) (*GetDefaultsResponse, error)
	Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error)
	PerformCheck(ctx context.Context, in *PerformCheckRequest, opts ...grpc.CallOption) (*PerformCheckResponse, error)
}

type installClient struct {
	cc grpc.ClientConnInterface
}

func NewInstallClient(cc grpc.ClientConnInterface) InstallClient {
	return &installClient{cc}
}

func (c *installClient) GetDefaults(ctx context.Context, in *GetDefaultsRequest, opts ...grpc.CallOption) (*GetDefaultsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetDefaultsResponse)
	err := c.cc.Invoke(ctx, Install_GetDefaults_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installClient) Install(ctx context.Context, in *InstallRequest, opts ...grpc.CallOption) (*InstallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InstallResponse)
	err := c.cc.Invoke(ctx, Install_Install_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *installClient) PerformCheck(ctx context.Context, in *PerformCheckRequest, opts ...grpc.CallOption) (*PerformCheckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PerformCheckResponse)
	err := c.cc.Invoke(ctx, Install_PerformCheck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// InstallServer is the server API for Install service.
// All implementations must embed UnimplementedInstallServer
// for forward compatibility.
type InstallServer interface {
	GetDefaults(context.Context, *GetDefaultsRequest) (*GetDefaultsResponse, error)
	Install(context.Context, *InstallRequest) (*InstallResponse, error)
	PerformCheck(context.Context, *PerformCheckRequest) (*PerformCheckResponse, error)
	mustEmbedUnimplementedInstallServer()
}

// UnimplementedInstallServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedInstallServer struct{}

func (UnimplementedInstallServer) GetDefaults(context.Context, *GetDefaultsRequest) (*GetDefaultsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDefaults not implemented")
}
func (UnimplementedInstallServer) Install(context.Context, *InstallRequest) (*InstallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Install not implemented")
}
func (UnimplementedInstallServer) PerformCheck(context.Context, *PerformCheckRequest) (*PerformCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformCheck not implemented")
}
func (UnimplementedInstallServer) mustEmbedUnimplementedInstallServer() {}
func (UnimplementedInstallServer) testEmbeddedByValue()                 {}

// UnsafeInstallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to InstallServer will
// result in compilation errors.
type UnsafeInstallServer interface {
	mustEmbedUnimplementedInstallServer()
}

func RegisterInstallServer(s grpc.ServiceRegistrar, srv InstallServer) {
	// If the following call pancis, it indicates UnimplementedInstallServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Install_ServiceDesc, srv)
}

func _Install_GetDefaults_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDefaultsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallServer).GetDefaults(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Install_GetDefaults_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallServer).GetDefaults(ctx, req.(*GetDefaultsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Install_Install_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallServer).Install(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Install_Install_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallServer).Install(ctx, req.(*InstallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Install_PerformCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(InstallServer).PerformCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Install_PerformCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(InstallServer).PerformCheck(ctx, req.(*PerformCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Install_ServiceDesc is the grpc.ServiceDesc for Install service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Install_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "install.Install",
	HandlerType: (*InstallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDefaults",
			Handler:    _Install_GetDefaults_Handler,
		},
		{
			MethodName: "Install",
			Handler:    _Install_Install_Handler,
		},
		{
			MethodName: "PerformCheck",
			Handler:    _Install_PerformCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-install.proto",
}
