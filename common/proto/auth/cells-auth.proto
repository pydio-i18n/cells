syntax = "proto3";

package auth;

option go_package="github.com/pydio/cells/v5/common/proto/auth";

message Token {
    string AccessToken = 1;
    string IDToken = 2;
    string RefreshToken = 3;
    string ExpiresAt = 4;
}

// AuthTokenRevoker
service AuthTokenRevoker {
    // Revoker invalidates the current token and specifies if the invalidation is due to a refresh or a revokation
    rpc Revoke (RevokeTokenRequest) returns (RevokeTokenResponse) {};
}

service AuthTokenPruner {
    // PruneTokens clear revoked tokens
    rpc PruneTokens (PruneTokensRequest) returns (PruneTokensResponse) {};
}

message RevokeTokenRequest {
    Token Token = 1;
}

message RevokeTokenResponse {
    bool Success = 1;
}

message PruneTokensRequest {

}

message PruneTokensResponse {
    repeated string tokens = 1;
    int32 Count = 2;
}

service LoginProvider {
    rpc GetLogin    (GetLoginRequest) returns (GetLoginResponse) {};
    rpc CreateLogin (CreateLoginRequest) returns (CreateLoginResponse) {};
    rpc AcceptLogin (AcceptLoginRequest) returns (AcceptLoginResponse) {};
}

message ID {
    string Challenge = 1;
    string Verifier = 2;
    string CSRF = 3;
}

message GetLoginRequest {
    string Challenge = 1;
}

message GetLoginResponse {
    string Challenge = 1;
    string Subject = 2;
    string SessionID = 3;
    string RequestURL = 4;
    repeated string RequestedScope = 5;
    repeated string RequestedAudience = 6;
    string ClientID = 7;
}

message CreateLoginRequest {
    string ClientID = 1;
    repeated string Scopes = 2;
    repeated string Audiences = 3;
}

message CreateLoginResponse {
    ID Login = 1;
}

message AcceptLoginRequest {
    string Challenge = 1;
    string Verifier = 2;
    string Subject = 3;
}

message AcceptLoginResponse {
    string Challenge = 1;
}

service ConsentProvider {
    rpc GetConsent    (GetConsentRequest) returns (GetConsentResponse) {};
    rpc CreateConsent (CreateConsentRequest) returns (CreateConsentResponse) {};
    rpc AcceptConsent (AcceptConsentRequest) returns (AcceptConsentResponse) {};
}

message GetConsentRequest {
    string Challenge = 1;
}

message GetConsentResponse {
    string Challenge = 1;
    string LoginSessionID = 2;
    string SubjectIdentifier = 3;
    string Subject = 4;
    string ClientID = 5;
}

message CreateConsentRequest {
    string LoginChallenge = 1;
}

message CreateConsentResponse {
    ID Consent = 1;
}

message AcceptConsentRequest {
    string Challenge = 1;
    repeated string Scopes = 2;
    repeated string Audiences = 3;
    map<string,string> AccessToken = 4;
    map<string,string> IDToken = 5;
    string Verifier = 6;
}

message AcceptConsentResponse {
    string Challenge = 1;
}

service LogoutProvider {
    rpc CreateLogout (CreateLogoutRequest) returns (CreateLogoutResponse) {};
    rpc AcceptLogout (AcceptLogoutRequest) returns (AcceptLogoutResponse) {};
}

message CreateLogoutRequest {
    string RequestURL = 1;
    string Subject = 2;
    string SessionID = 3;
}

message CreateLogoutResponse {
    ID Logout = 1;
}

message AcceptLogoutRequest {
    string Challenge = 1;
    string AccessToken = 2;
    string RefreshToken = 3;
}

message AcceptLogoutResponse {
}

service AuthCodeProvider {
    rpc CreateAuthCode (CreateAuthCodeRequest) returns (CreateAuthCodeResponse) {};
}

message CreateAuthCodeRequest {
    ID Consent = 1;
    string ClientID = 2;
    string RedirectURI = 3;
    string CodeChallenge = 4;
    string CodeChallengeMethod = 5;
}

message CreateAuthCodeResponse {
    string Code = 1;
}

// AuthTokenVerifier
service AuthTokenVerifier {
    // Verifies a token and returns claims
    rpc Verify (VerifyTokenRequest) returns (VerifyTokenResponse) {};
}

message VerifyTokenRequest {
    string Token = 1;
}

message VerifyTokenResponse {
    bool Success = 1;
    bytes Data = 2;
}

service AuthCodeExchanger {
    rpc Exchange(ExchangeRequest) returns (ExchangeResponse) {};
}

message ExchangeRequest {
    string Code = 1 [json_name="code"];
    string CodeVerifier = 2 [json_name="code_verifier"];
}

message ExchangeResponse {
    string AccessToken = 1 [json_name="access_token"];
    string IDToken = 2 [json_name="id_token"];
    string RefreshToken = 3 [json_name="refresh_token"];
    int64 Expiry = 4 [json_name="expiry"];
}

service PasswordCredentialsCode {
    rpc PasswordCredentialsCode(PasswordCredentialsCodeRequest) returns(PasswordCredentialsCodeResponse) {};
}

message PasswordCredentialsCodeRequest {
    string Username = 1 [json_name="username"];
    string Password = 2 [json_name="password"];
    string Challenge = 3 [json_name="challenge"];
}

message PasswordCredentialsCodeResponse {
    string Code = 1 [json_name="code"];
}

service PasswordCredentialsToken {
    rpc PasswordCredentialsToken(PasswordCredentialsTokenRequest) returns (PasswordCredentialsTokenResponse) {};
}

message PasswordCredentialsTokenRequest {
    string Username = 1 [json_name="username"];
    string Password = 2 [json_name="password"];
}

message PasswordCredentialsTokenResponse {
    string AccessToken = 1 [json_name="access_token"];
    string IDToken = 2 [json_name="id_token"];
    string RefreshToken = 3 [json_name="refresh_token"];
    int64 Expiry = 4 [json_name="expiry"];
}

service LoginChallengeCode {
    rpc LoginChallengeCode(LoginChallengeCodeRequest) returns (LoginChallengeCodeResponse) {};
}

message LoginChallengeCodeRequest {
    string Challenge = 1 ;
    map<string,string> Claims = 2 ;
    CreateLoginRequest DefaultCreateLogin = 3;
}

message LoginChallengeCodeResponse {
    string Code = 1;
    GetLoginResponse LoginResponse = 2;
}

service AuthTokenRefresher {
    rpc Refresh(RefreshTokenRequest) returns (RefreshTokenResponse) {};
}

message RefreshTokenRequest {
    string RefreshToken = 1;
}

message RefreshTokenResponse {
    string AccessToken = 1 [json_name="access_token"];
    string IDToken = 2 [json_name="id_token"];
    string RefreshToken = 3 [json_name="refresh_token"];
    int64 Expiry = 4 [json_name="expiry"];
}

enum PatType {
    ANY = 0;
    PERSONAL = 1;
    DOCUMENT = 2;
}

service PersonalAccessTokenService {
    rpc Generate(PatGenerateRequest) returns (PatGenerateResponse) {}
    rpc Revoke(PatRevokeRequest) returns (PatRevokeResponse){}
    rpc List(PatListRequest) returns (PatListResponse){}
}
message PersonalAccessToken {
    string Uuid = 1;
    PatType Type = 2;
    string Label = 3;
    string UserUuid = 4;
    string UserLogin = 5;
    repeated string Scopes = 6;
    int32 AutoRefreshWindow = 7;
    int64 ExpiresAt = 8;
    string CreatedBy = 9;
    int64 CreatedAt = 10;
    int64 UpdatedAt = 11;

    string CacheKey = 12;
    string RevocationKey = 13;
    string SecretPair = 14;
}

message PatGenerateRequest{
    PatType Type = 1;
    string UserUuid = 2;
    string UserLogin = 3;
    string Label = 4;
    int32 AutoRefreshWindow = 5;
    int64 ExpiresAt = 6;
    string Issuer = 7;
    repeated string Scopes = 8;

    string CacheKey = 9;
    string RevocationKey = 10;
    bool GenerateSecretPair = 11;
}
message PatGenerateResponse{
    string AccessToken = 1;
    string TokenUuid = 2;
    string SecretPair = 3;
}

message PatListRequest{
    PatType Type = 1;
    string ByUserLogin = 2;
}
message PatListResponse{
    repeated PersonalAccessToken Tokens = 1;
}

message PatRevokeRequest{
    string Uuid = 1;
    string ByRevocationKey = 2;
}
message PatRevokeResponse{
    bool Success = 1;
}