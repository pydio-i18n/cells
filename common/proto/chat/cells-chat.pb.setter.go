/*
 * Copyright (c) 2024 Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// This file is generated by protoc-gen-go-setter, do not edit manually

package chat

import (
	"errors"
	"reflect"

	"github.com/pydio/cells/v4/common/proto/activity"
	"google.golang.org/protobuf/proto"
)

type IChatRoom interface {
	proto.Message
	ChatRoomGetter
	ChatRoomSetter
}

func NewIChatRoom(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type ChatRoomGetter interface {
	GetUuid() string
	GetType() RoomType
	GetRoomTypeObject() string
	GetRoomLabel() string
	GetUsers() []string
	GetLastUpdated() int32
}

type ChatRoomSetter interface {
	SetUuid(string)
	SetType(RoomType)
	SetRoomTypeObject(string)
	SetRoomLabel(string)
	SetUsers([]string)
	SetLastUpdated(int32)
}

func (x *ChatRoom) SetUuid(v string) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.Uuid = v
}
func (x *ChatRoom) SetType(v RoomType) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.Type = v
}
func (x *ChatRoom) SetRoomTypeObject(v string) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.RoomTypeObject = v
}
func (x *ChatRoom) SetRoomLabel(v string) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.RoomLabel = v
}
func (x *ChatRoom) SetUsers(v []string) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.Users = v
}
func (x *ChatRoom) SetLastUpdated(v int32) {
	if x == nil {
		x = new(ChatRoom)
	}

	x.LastUpdated = v
}

type IChatMessage interface {
	proto.Message
	ChatMessageGetter
	ChatMessageSetter
}

func NewIChatMessage(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type ChatMessageGetter interface {
	GetUuid() string
	GetRoomUuid() string
	GetMessage() string
	GetAuthor() string
	GetTimestamp() int64
	GetActivity() *activity.Object
	GetInfo() map[string]string
}

type ChatMessageSetter interface {
	SetUuid(string)
	SetRoomUuid(string)
	SetMessage(string)
	SetAuthor(string)
	SetTimestamp(int64)
	SetActivity(*activity.Object)
	SetInfo(map[string]string)
}

func (x *ChatMessage) SetUuid(v string) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Uuid = v
}
func (x *ChatMessage) SetRoomUuid(v string) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.RoomUuid = v
}
func (x *ChatMessage) SetMessage(v string) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Message = v
}
func (x *ChatMessage) SetAuthor(v string) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Author = v
}
func (x *ChatMessage) SetTimestamp(v int64) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Timestamp = v
}
func (x *ChatMessage) SetActivity(v *activity.Object) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Activity = v
}
func (x *ChatMessage) SetInfo(v map[string]string) {
	if x == nil {
		x = new(ChatMessage)
	}

	x.Info = v
}

type IChatEvent interface {
	proto.Message
	ChatEventGetter
	ChatEventSetter
}

func NewIChatEvent(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type ChatEventGetter interface {
	GetMessage() *ChatMessage
	GetRoom() *ChatRoom
	GetDetails() string
}

type ChatEventSetter interface {
	SetMessage(*ChatMessage)
	SetRoom(*ChatRoom)
	SetDetails(string)
}

func (x *ChatEvent) SetMessage(v *ChatMessage) {
	if x == nil {
		x = new(ChatEvent)
	}

	x.Message = v
}
func (x *ChatEvent) SetRoom(v *ChatRoom) {
	if x == nil {
		x = new(ChatEvent)
	}

	x.Room = v
}
func (x *ChatEvent) SetDetails(v string) {
	if x == nil {
		x = new(ChatEvent)
	}

	x.Details = v
}

type IWebSocketMessage interface {
	proto.Message
	WebSocketMessageGetter
	WebSocketMessageSetter
}

func NewIWebSocketMessage(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type WebSocketMessageGetter interface {
	GetType() WsMessageType
	GetRoom() *ChatRoom
	GetMessage() *ChatMessage
}

type WebSocketMessageSetter interface {
	SetType(WsMessageType)
	SetRoom(*ChatRoom)
	SetMessage(*ChatMessage)
}

func (x *WebSocketMessage) SetType(v WsMessageType) {
	if x == nil {
		x = new(WebSocketMessage)
	}

	x.Type = v
}
func (x *WebSocketMessage) SetRoom(v *ChatRoom) {
	if x == nil {
		x = new(WebSocketMessage)
	}

	x.Room = v
}
func (x *WebSocketMessage) SetMessage(v *ChatMessage) {
	if x == nil {
		x = new(WebSocketMessage)
	}

	x.Message = v
}
