// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: cells-jobs.proto

package jobs

import (
	activity "github.com/pydio/cells/v4/common/proto/activity"
	idm "github.com/pydio/cells/v4/common/proto/idm"
	object "github.com/pydio/cells/v4/common/proto/object"
	service "github.com/pydio/cells/v4/common/proto/service"
	tree "github.com/pydio/cells/v4/common/proto/tree"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Possible values for IdmSelector.Type
type IdmSelectorType int32

const (
	IdmSelectorType_User      IdmSelectorType = 0
	IdmSelectorType_Role      IdmSelectorType = 1
	IdmSelectorType_Workspace IdmSelectorType = 2
	IdmSelectorType_Acl       IdmSelectorType = 3
)

// Enum value maps for IdmSelectorType.
var (
	IdmSelectorType_name = map[int32]string{
		0: "User",
		1: "Role",
		2: "Workspace",
		3: "Acl",
	}
	IdmSelectorType_value = map[string]int32{
		"User":      0,
		"Role":      1,
		"Workspace": 2,
		"Acl":       3,
	}
)

func (x IdmSelectorType) Enum() *IdmSelectorType {
	p := new(IdmSelectorType)
	*p = x
	return p
}

func (x IdmSelectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (IdmSelectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_jobs_proto_enumTypes[0].Descriptor()
}

func (IdmSelectorType) Type() protoreflect.EnumType {
	return &file_cells_jobs_proto_enumTypes[0]
}

func (x IdmSelectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use IdmSelectorType.Descriptor instead.
func (IdmSelectorType) EnumDescriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{0}
}

type DataSourceSelectorType int32

const (
	DataSourceSelectorType_DataSource DataSourceSelectorType = 0
	DataSourceSelectorType_Object     DataSourceSelectorType = 1
)

// Enum value maps for DataSourceSelectorType.
var (
	DataSourceSelectorType_name = map[int32]string{
		0: "DataSource",
		1: "Object",
	}
	DataSourceSelectorType_value = map[string]int32{
		"DataSource": 0,
		"Object":     1,
	}
)

func (x DataSourceSelectorType) Enum() *DataSourceSelectorType {
	p := new(DataSourceSelectorType)
	*p = x
	return p
}

func (x DataSourceSelectorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceSelectorType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_jobs_proto_enumTypes[1].Descriptor()
}

func (DataSourceSelectorType) Type() protoreflect.EnumType {
	return &file_cells_jobs_proto_enumTypes[1]
}

func (x DataSourceSelectorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceSelectorType.Descriptor instead.
func (DataSourceSelectorType) EnumDescriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{1}
}

type ContextMetaFilterType int32

const (
	ContextMetaFilterType_RequestMeta ContextMetaFilterType = 0
	ContextMetaFilterType_ContextUser ContextMetaFilterType = 1
)

// Enum value maps for ContextMetaFilterType.
var (
	ContextMetaFilterType_name = map[int32]string{
		0: "RequestMeta",
		1: "ContextUser",
	}
	ContextMetaFilterType_value = map[string]int32{
		"RequestMeta": 0,
		"ContextUser": 1,
	}
)

func (x ContextMetaFilterType) Enum() *ContextMetaFilterType {
	p := new(ContextMetaFilterType)
	*p = x
	return p
}

func (x ContextMetaFilterType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContextMetaFilterType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_jobs_proto_enumTypes[2].Descriptor()
}

func (ContextMetaFilterType) Type() protoreflect.EnumType {
	return &file_cells_jobs_proto_enumTypes[2]
}

func (x ContextMetaFilterType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContextMetaFilterType.Descriptor instead.
func (ContextMetaFilterType) EnumDescriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{2}
}

// /////////////////
// TASK SERVICE  //
// /////////////////
type TaskStatus int32

const (
	TaskStatus_Unknown     TaskStatus = 0
	TaskStatus_Idle        TaskStatus = 1
	TaskStatus_Running     TaskStatus = 2
	TaskStatus_Finished    TaskStatus = 3
	TaskStatus_Interrupted TaskStatus = 4
	TaskStatus_Paused      TaskStatus = 5
	TaskStatus_Any         TaskStatus = 6
	TaskStatus_Error       TaskStatus = 7
	TaskStatus_Queued      TaskStatus = 8
)

// Enum value maps for TaskStatus.
var (
	TaskStatus_name = map[int32]string{
		0: "Unknown",
		1: "Idle",
		2: "Running",
		3: "Finished",
		4: "Interrupted",
		5: "Paused",
		6: "Any",
		7: "Error",
		8: "Queued",
	}
	TaskStatus_value = map[string]int32{
		"Unknown":     0,
		"Idle":        1,
		"Running":     2,
		"Finished":    3,
		"Interrupted": 4,
		"Paused":      5,
		"Any":         6,
		"Error":       7,
		"Queued":      8,
	}
)

func (x TaskStatus) Enum() *TaskStatus {
	p := new(TaskStatus)
	*p = x
	return p
}

func (x TaskStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TaskStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_jobs_proto_enumTypes[3].Descriptor()
}

func (TaskStatus) Type() protoreflect.EnumType {
	return &file_cells_jobs_proto_enumTypes[3]
}

func (x TaskStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TaskStatus.Descriptor instead.
func (TaskStatus) EnumDescriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{3}
}

type Command int32

const (
	Command_None     Command = 0
	Command_Pause    Command = 1
	Command_Resume   Command = 2
	Command_Stop     Command = 3
	Command_Delete   Command = 4
	Command_RunOnce  Command = 5
	Command_Inactive Command = 6
	Command_Active   Command = 7
)

// Enum value maps for Command.
var (
	Command_name = map[int32]string{
		0: "None",
		1: "Pause",
		2: "Resume",
		3: "Stop",
		4: "Delete",
		5: "RunOnce",
		6: "Inactive",
		7: "Active",
	}
	Command_value = map[string]int32{
		"None":     0,
		"Pause":    1,
		"Resume":   2,
		"Stop":     3,
		"Delete":   4,
		"RunOnce":  5,
		"Inactive": 6,
		"Active":   7,
	}
)

func (x Command) Enum() *Command {
	p := new(Command)
	*p = x
	return p
}

func (x Command) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Command) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_jobs_proto_enumTypes[4].Descriptor()
}

func (Command) Type() protoreflect.EnumType {
	return &file_cells_jobs_proto_enumTypes[4]
}

func (x Command) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Command.Descriptor instead.
func (Command) EnumDescriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{4}
}

// /////////////////
// JOB  SERVICE  //
// /////////////////
type NodesSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select all files - ignore any other condition
	All bool `protobuf:"varint,1,opt,name=All,proto3" json:"All,omitempty"`
	// Preset list of node pathes
	Pathes []string `protobuf:"bytes,2,rep,name=Pathes,proto3" json:"Pathes,omitempty"`
	// Query to apply to select users (or filter a given node passed by event)
	Query *service.Query `protobuf:"bytes,4,opt,name=Query,proto3" json:"Query,omitempty"`
	// Whether to trigger one action per node or one action
	// with all nodes as selection
	Collect bool `protobuf:"varint,5,opt,name=Collect,proto3" json:"Collect,omitempty"`
	// Ignore query and just fan out input.Nodes
	FanOutInput bool `protobuf:"varint,9,opt,name=FanOutInput,proto3" json:"FanOutInput,omitempty"`
	// Selector custom label
	Label string `protobuf:"bytes,6,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	// Optional Timeout for this selector
	Timeout string `protobuf:"bytes,8,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Clear previous selection
	ClearInput bool `protobuf:"varint,10,opt,name=ClearInput,proto3" json:"ClearInput,omitempty"`
}

func (x *NodesSelector) Reset() {
	*x = NodesSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodesSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesSelector) ProtoMessage() {}

func (x *NodesSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesSelector.ProtoReflect.Descriptor instead.
func (*NodesSelector) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{0}
}

func (x *NodesSelector) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *NodesSelector) GetPathes() []string {
	if x != nil {
		return x.Pathes
	}
	return nil
}

func (x *NodesSelector) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *NodesSelector) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *NodesSelector) GetFanOutInput() bool {
	if x != nil {
		return x.FanOutInput
	}
	return false
}

func (x *NodesSelector) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *NodesSelector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *NodesSelector) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *NodesSelector) GetClearInput() bool {
	if x != nil {
		return x.ClearInput
	}
	return false
}

// Generic container for select/filter idm objects
type IdmSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of objects to look for
	Type IdmSelectorType `protobuf:"varint,1,opt,name=Type,proto3,enum=jobs.IdmSelectorType" json:"Type,omitempty"`
	// Load all objects
	All bool `protobuf:"varint,2,opt,name=All,proto3" json:"All,omitempty"`
	// Serialized search query
	Query *service.Query `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`
	// Pass a slice of objects to one action, or trigger all actions in parallel
	Collect bool `protobuf:"varint,4,opt,name=Collect,proto3" json:"Collect,omitempty"`
	// Ignore query and just fan out input.[Type]
	FanOutInput bool `protobuf:"varint,8,opt,name=FanOutInput,proto3" json:"FanOutInput,omitempty"`
	// Selector custom label
	Label string `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,6,opt,name=Description,proto3" json:"Description,omitempty"`
	// Optional Timeout for this selector
	Timeout string `protobuf:"bytes,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Clear previous selection
	ClearInput bool `protobuf:"varint,9,opt,name=ClearInput,proto3" json:"ClearInput,omitempty"`
}

func (x *IdmSelector) Reset() {
	*x = IdmSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdmSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdmSelector) ProtoMessage() {}

func (x *IdmSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdmSelector.ProtoReflect.Descriptor instead.
func (*IdmSelector) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{1}
}

func (x *IdmSelector) GetType() IdmSelectorType {
	if x != nil {
		return x.Type
	}
	return IdmSelectorType_User
}

func (x *IdmSelector) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *IdmSelector) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *IdmSelector) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *IdmSelector) GetFanOutInput() bool {
	if x != nil {
		return x.FanOutInput
	}
	return false
}

func (x *IdmSelector) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *IdmSelector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *IdmSelector) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *IdmSelector) GetClearInput() bool {
	if x != nil {
		return x.ClearInput
	}
	return false
}

// Select or filter users - should be replaced by more generic IdmSelector
type UsersSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Select all users
	All bool `protobuf:"varint,1,opt,name=All,proto3" json:"All,omitempty"`
	// Preset set of Users
	Users []*idm.User `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`
	// Filter users using this query
	Query *service.Query `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`
	// Wether to trigger one action per user or one action
	// with all user as a selection
	Collect bool `protobuf:"varint,5,opt,name=Collect,proto3" json:"Collect,omitempty"`
	// Selector custom label
	Label string `protobuf:"bytes,6,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	// Optional Timeout for this selector
	Timeout string `protobuf:"bytes,8,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Clear previous selection
	ClearInput bool `protobuf:"varint,9,opt,name=ClearInput,proto3" json:"ClearInput,omitempty"`
}

func (x *UsersSelector) Reset() {
	*x = UsersSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UsersSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UsersSelector) ProtoMessage() {}

func (x *UsersSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UsersSelector.ProtoReflect.Descriptor instead.
func (*UsersSelector) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{2}
}

func (x *UsersSelector) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *UsersSelector) GetUsers() []*idm.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *UsersSelector) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *UsersSelector) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *UsersSelector) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UsersSelector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *UsersSelector) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *UsersSelector) GetClearInput() bool {
	if x != nil {
		return x.ClearInput
	}
	return false
}

// Selector/Filter for DataSource objects
type DataSourceSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selector custom label
	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Selector type, either DataSource or Object service
	Type DataSourceSelectorType `protobuf:"varint,3,opt,name=Type,proto3,enum=jobs.DataSourceSelectorType" json:"Type,omitempty"`
	// Select all
	All bool `protobuf:"varint,4,opt,name=All,proto3" json:"All,omitempty"`
	// Collect results
	Collect bool `protobuf:"varint,5,opt,name=Collect,proto3" json:"Collect,omitempty"`
	// Ignore query and just fan out input.DataSources
	FanOutInput bool `protobuf:"varint,8,opt,name=FanOutInput,proto3" json:"FanOutInput,omitempty"`
	// Composition of DataSourceSingleQueries
	Query *service.Query `protobuf:"bytes,6,opt,name=Query,proto3" json:"Query,omitempty"`
	// Optional Timeout for this selector
	Timeout string `protobuf:"bytes,7,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Clear previous selection
	ClearInput bool `protobuf:"varint,9,opt,name=ClearInput,proto3" json:"ClearInput,omitempty"`
}

func (x *DataSourceSelector) Reset() {
	*x = DataSourceSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSelector) ProtoMessage() {}

func (x *DataSourceSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSelector.ProtoReflect.Descriptor instead.
func (*DataSourceSelector) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{3}
}

func (x *DataSourceSelector) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataSourceSelector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataSourceSelector) GetType() DataSourceSelectorType {
	if x != nil {
		return x.Type
	}
	return DataSourceSelectorType_DataSource
}

func (x *DataSourceSelector) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *DataSourceSelector) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *DataSourceSelector) GetFanOutInput() bool {
	if x != nil {
		return x.FanOutInput
	}
	return false
}

func (x *DataSourceSelector) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DataSourceSelector) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *DataSourceSelector) GetClearInput() bool {
	if x != nil {
		return x.ClearInput
	}
	return false
}

// Atomic query for TriggerFilter
type TriggerFilterQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Event was triggered by a programed schedule
	IsSchedule bool `protobuf:"varint,1,opt,name=IsSchedule,proto3" json:"IsSchedule,omitempty"`
	// Event was triggered manually in the CellsFlows/Scheduler console
	IsManual bool `protobuf:"varint,2,opt,name=IsManual,proto3" json:"IsManual,omitempty"`
	// Event was triggered by a WebHook (can be in the user space)
	IsApiHook bool `protobuf:"varint,4,opt,name=IsApiHook,proto3" json:"IsApiHook,omitempty"`
	// Event was triggered by a specific WebHook (by its unique slug)
	ApiHookSlug string `protobuf:"bytes,5,opt,name=ApiHookSlug,proto3" json:"ApiHookSlug,omitempty"`
	// Filter by a name/value on a runtime defined parameter
	RunParameterName string `protobuf:"bytes,6,opt,name=RunParameterName,proto3" json:"RunParameterName,omitempty"`
	// Combined with RunParameterName, value used for comparison
	RunParameterValue string `protobuf:"bytes,7,opt,name=RunParameterValue,proto3" json:"RunParameterValue,omitempty"`
	// Event was trigger by one of these Events
	EventNames []string `protobuf:"bytes,3,rep,name=EventNames,proto3" json:"EventNames,omitempty"`
}

func (x *TriggerFilterQuery) Reset() {
	*x = TriggerFilterQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerFilterQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerFilterQuery) ProtoMessage() {}

func (x *TriggerFilterQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerFilterQuery.ProtoReflect.Descriptor instead.
func (*TriggerFilterQuery) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{4}
}

func (x *TriggerFilterQuery) GetIsSchedule() bool {
	if x != nil {
		return x.IsSchedule
	}
	return false
}

func (x *TriggerFilterQuery) GetIsManual() bool {
	if x != nil {
		return x.IsManual
	}
	return false
}

func (x *TriggerFilterQuery) GetIsApiHook() bool {
	if x != nil {
		return x.IsApiHook
	}
	return false
}

func (x *TriggerFilterQuery) GetApiHookSlug() string {
	if x != nil {
		return x.ApiHookSlug
	}
	return ""
}

func (x *TriggerFilterQuery) GetRunParameterName() string {
	if x != nil {
		return x.RunParameterName
	}
	return ""
}

func (x *TriggerFilterQuery) GetRunParameterValue() string {
	if x != nil {
		return x.RunParameterValue
	}
	return ""
}

func (x *TriggerFilterQuery) GetEventNames() []string {
	if x != nil {
		return x.EventNames
	}
	return nil
}

// Filter for events, can be applied on action branches
type TriggerFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter custom label
	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	// Filter additional description
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Filter type
	Query *service.Query `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *TriggerFilter) Reset() {
	*x = TriggerFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TriggerFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TriggerFilter) ProtoMessage() {}

func (x *TriggerFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TriggerFilter.ProtoReflect.Descriptor instead.
func (*TriggerFilter) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{5}
}

func (x *TriggerFilter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *TriggerFilter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *TriggerFilter) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

// ActionOutputFilter can be used to filter last message output
type ActionOutputFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Query built from ActionOutputSingleQuery
	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	// Selector custom label
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *ActionOutputFilter) Reset() {
	*x = ActionOutputFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionOutputFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOutputFilter) ProtoMessage() {}

func (x *ActionOutputFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOutputFilter.ProtoReflect.Descriptor instead.
func (*ActionOutputFilter) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{6}
}

func (x *ActionOutputFilter) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ActionOutputFilter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ActionOutputFilter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// PolicyContextFilter can be used to filter request metadata
type ContextMetaFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of context filter
	Type ContextMetaFilterType `protobuf:"varint,1,opt,name=Type,proto3,enum=jobs.ContextMetaFilterType" json:"Type,omitempty"`
	// Can be built with ContextMetaSingleQuery
	Query *service.Query `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	// Selector custom label
	Label string `protobuf:"bytes,3,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,4,opt,name=Description,proto3" json:"Description,omitempty"`
}

func (x *ContextMetaFilter) Reset() {
	*x = ContextMetaFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextMetaFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextMetaFilter) ProtoMessage() {}

func (x *ContextMetaFilter) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextMetaFilter.ProtoReflect.Descriptor instead.
func (*ContextMetaFilter) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{7}
}

func (x *ContextMetaFilter) GetType() ContextMetaFilterType {
	if x != nil {
		return x.Type
	}
	return ContextMetaFilterType_RequestMeta
}

func (x *ContextMetaFilter) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ContextMetaFilter) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ContextMetaFilter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// ContextMetaSingleQuery uses idm.PolicyCondition
type ContextMetaSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field on which the Condition test will be applied
	FieldName string `protobuf:"bytes,1,opt,name=FieldName,proto3" json:"FieldName,omitempty"`
	// One of the available conditions as defined for Security Policies
	Condition *idm.PolicyCondition `protobuf:"bytes,2,opt,name=Condition,proto3" json:"Condition,omitempty"`
}

func (x *ContextMetaSingleQuery) Reset() {
	*x = ContextMetaSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextMetaSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextMetaSingleQuery) ProtoMessage() {}

func (x *ContextMetaSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextMetaSingleQuery.ProtoReflect.Descriptor instead.
func (*ContextMetaSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{8}
}

func (x *ContextMetaSingleQuery) GetFieldName() string {
	if x != nil {
		return x.FieldName
	}
	return ""
}

func (x *ContextMetaSingleQuery) GetCondition() *idm.PolicyCondition {
	if x != nil {
		return x.Condition
	}
	return nil
}

type DataSelector struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selector custom label
	Label string `protobuf:"bytes,1,opt,name=Label,proto3" json:"Label,omitempty"`
	// Selector additional description
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Query used to compute output object or list of objects
	Query *service.Query `protobuf:"bytes,3,opt,name=Query,proto3" json:"Query,omitempty"`
	// Collect results
	Collect bool `protobuf:"varint,4,opt,name=Collect,proto3" json:"Collect,omitempty"`
	// Ignore query and just fan out input.LastOutput.JsonBody
	FanOutInput bool `protobuf:"varint,5,opt,name=FanOutInput,proto3" json:"FanOutInput,omitempty"`
	// Optional Timeout for this selector
	Timeout string `protobuf:"bytes,6,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Clear previous selection
	ClearInput bool `protobuf:"varint,7,opt,name=ClearInput,proto3" json:"ClearInput,omitempty"`
}

func (x *DataSelector) Reset() {
	*x = DataSelector{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSelector) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSelector) ProtoMessage() {}

func (x *DataSelector) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSelector.ProtoReflect.Descriptor instead.
func (*DataSelector) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{9}
}

func (x *DataSelector) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *DataSelector) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DataSelector) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DataSelector) GetCollect() bool {
	if x != nil {
		return x.Collect
	}
	return false
}

func (x *DataSelector) GetFanOutInput() bool {
	if x != nil {
		return x.FanOutInput
	}
	return false
}

func (x *DataSelector) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *DataSelector) GetClearInput() bool {
	if x != nil {
		return x.ClearInput
	}
	return false
}

type DataSelectorSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Perform a JsonPath query on the LastOutput.JsonBody
	JsonPath string `protobuf:"bytes,1,opt,name=JsonPath,proto3" json:"JsonPath,omitempty"`
}

func (x *DataSelectorSingleQuery) Reset() {
	*x = DataSelectorSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSelectorSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSelectorSingleQuery) ProtoMessage() {}

func (x *DataSelectorSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSelectorSingleQuery.ProtoReflect.Descriptor instead.
func (*DataSelectorSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{10}
}

func (x *DataSelectorSingleQuery) GetJsonPath() string {
	if x != nil {
		return x.JsonPath
	}
	return ""
}

type Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ISO 8601 Description of the scheduling for instance "R2/2015-06-04T19:25:16.828696-07:00/PT4S"
	// where first part is the number of repetitions (if 0, infinite repetition),
	// second part the starting date and last part, the duration between 2 occurrences.
	Iso8601Schedule string `protobuf:"bytes,1,opt,name=Iso8601Schedule,proto3" json:"Iso8601Schedule,omitempty"`
	// Minimum time between two runs
	Iso8601MinDelta string `protobuf:"bytes,3,opt,name=Iso8601MinDelta,proto3" json:"Iso8601MinDelta,omitempty"`
}

func (x *Schedule) Reset() {
	*x = Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Schedule) ProtoMessage() {}

func (x *Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Schedule.ProtoReflect.Descriptor instead.
func (*Schedule) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{11}
}

func (x *Schedule) GetIso8601Schedule() string {
	if x != nil {
		return x.Iso8601Schedule
	}
	return ""
}

func (x *Schedule) GetIso8601MinDelta() string {
	if x != nil {
		return x.Iso8601MinDelta
	}
	return ""
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// String Identifier for specific action
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// User-defined label for this action
	Label string `protobuf:"bytes,13,opt,name=Label,proto3" json:"Label,omitempty"`
	// User-defined comment for this action
	Description string `protobuf:"bytes,14,opt,name=Description,proto3" json:"Description,omitempty"`
	// Bypass this action (forward input to output and do nothing)
	Bypass bool `protobuf:"varint,15,opt,name=Bypass,proto3" json:"Bypass,omitempty"`
	// Stop full chain now : do not carry on executing next actions
	BreakAfter bool `protobuf:"varint,16,opt,name=BreakAfter,proto3" json:"BreakAfter,omitempty"`
	// Optional timeout for this action
	Timeout string `protobuf:"bytes,20,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Nodes Selector
	NodesSelector *NodesSelector `protobuf:"bytes,2,opt,name=NodesSelector,proto3" json:"NodesSelector,omitempty"`
	// Node Filter
	NodesFilter *NodesSelector `protobuf:"bytes,4,opt,name=NodesFilter,proto3" json:"NodesFilter,omitempty"`
	// Users Selector (deprecated in favor of IdmSelector)
	UsersSelector *UsersSelector `protobuf:"bytes,3,opt,name=UsersSelector,proto3" json:"UsersSelector,omitempty"`
	// User Filter (deprecated in favor of IdmSelector)
	UsersFilter *UsersSelector `protobuf:"bytes,5,opt,name=UsersFilter,proto3" json:"UsersFilter,omitempty"`
	// Idm objects collector
	IdmSelector *IdmSelector `protobuf:"bytes,9,opt,name=IdmSelector,proto3" json:"IdmSelector,omitempty"`
	// Idm objects filter
	IdmFilter *IdmSelector `protobuf:"bytes,10,opt,name=IdmFilter,proto3" json:"IdmFilter,omitempty"`
	// DataSource objects collector
	DataSourceSelector *DataSourceSelector `protobuf:"bytes,17,opt,name=DataSourceSelector,proto3" json:"DataSourceSelector,omitempty"`
	// DataSource objects filter
	DataSourceFilter *DataSourceSelector `protobuf:"bytes,18,opt,name=DataSourceFilter,proto3" json:"DataSourceFilter,omitempty"`
	// Previous action output filter
	ActionOutputFilter *ActionOutputFilter `protobuf:"bytes,6,opt,name=ActionOutputFilter,proto3" json:"ActionOutputFilter,omitempty"`
	// Metadata policy-based filter
	ContextMetaFilter *ContextMetaFilter `protobuf:"bytes,11,opt,name=ContextMetaFilter,proto3" json:"ContextMetaFilter,omitempty"`
	// Filter on specific triggers
	TriggerFilter *TriggerFilter `protobuf:"bytes,19,opt,name=TriggerFilter,proto3" json:"TriggerFilter,omitempty"`
	// Collect/select values from JsonBody
	DataSelector *DataSelector `protobuf:"bytes,22,opt,name=DataSelector,proto3" json:"DataSelector,omitempty"`
	// Filter values from JsonBody
	DataFilter *DataSelector `protobuf:"bytes,23,opt,name=DataFilter,proto3" json:"DataFilter,omitempty"`
	// Defined parameters for this action
	Parameters map[string]string `protobuf:"bytes,7,rep,name=Parameters,proto3" json:"Parameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Other actions to perform after this one is finished,
	// using the Output of this action as Input for the next.
	// If there are many, it is considered they can be triggered
	// in parallel
	ChainedActions []*Action `protobuf:"bytes,8,rep,name=ChainedActions,proto3" json:"ChainedActions,omitempty"`
	// If any Filter is used, next actions can be triggered on Failure
	// This adds ability to create conditional Yes/No branches
	FailedFilterActions []*Action `protobuf:"bytes,12,rep,name=FailedFilterActions,proto3" json:"FailedFilterActions,omitempty"`
	// CollectAction adds starts another chain after the whole ChainedAction/FailedFilterActions have been performed
	MergeAction *Action `protobuf:"bytes,21,opt,name=MergeAction,proto3" json:"MergeAction,omitempty"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{12}
}

func (x *Action) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Action) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Action) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Action) GetBypass() bool {
	if x != nil {
		return x.Bypass
	}
	return false
}

func (x *Action) GetBreakAfter() bool {
	if x != nil {
		return x.BreakAfter
	}
	return false
}

func (x *Action) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *Action) GetNodesSelector() *NodesSelector {
	if x != nil {
		return x.NodesSelector
	}
	return nil
}

func (x *Action) GetNodesFilter() *NodesSelector {
	if x != nil {
		return x.NodesFilter
	}
	return nil
}

func (x *Action) GetUsersSelector() *UsersSelector {
	if x != nil {
		return x.UsersSelector
	}
	return nil
}

func (x *Action) GetUsersFilter() *UsersSelector {
	if x != nil {
		return x.UsersFilter
	}
	return nil
}

func (x *Action) GetIdmSelector() *IdmSelector {
	if x != nil {
		return x.IdmSelector
	}
	return nil
}

func (x *Action) GetIdmFilter() *IdmSelector {
	if x != nil {
		return x.IdmFilter
	}
	return nil
}

func (x *Action) GetDataSourceSelector() *DataSourceSelector {
	if x != nil {
		return x.DataSourceSelector
	}
	return nil
}

func (x *Action) GetDataSourceFilter() *DataSourceSelector {
	if x != nil {
		return x.DataSourceFilter
	}
	return nil
}

func (x *Action) GetActionOutputFilter() *ActionOutputFilter {
	if x != nil {
		return x.ActionOutputFilter
	}
	return nil
}

func (x *Action) GetContextMetaFilter() *ContextMetaFilter {
	if x != nil {
		return x.ContextMetaFilter
	}
	return nil
}

func (x *Action) GetTriggerFilter() *TriggerFilter {
	if x != nil {
		return x.TriggerFilter
	}
	return nil
}

func (x *Action) GetDataSelector() *DataSelector {
	if x != nil {
		return x.DataSelector
	}
	return nil
}

func (x *Action) GetDataFilter() *DataSelector {
	if x != nil {
		return x.DataFilter
	}
	return nil
}

func (x *Action) GetParameters() map[string]string {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Action) GetChainedActions() []*Action {
	if x != nil {
		return x.ChainedActions
	}
	return nil
}

func (x *Action) GetFailedFilterActions() []*Action {
	if x != nil {
		return x.FailedFilterActions
	}
	return nil
}

func (x *Action) GetMergeAction() *Action {
	if x != nil {
		return x.MergeAction
	}
	return nil
}

type Job struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID for this Job
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Human-readable Label
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Who created this Job
	Owner string `protobuf:"bytes,3,opt,name=Owner,proto3" json:"Owner,omitempty"`
	// Additional user-defined metadata, can be used for icon, documentation, pre-requisites, etc.
	Metadata map[string]string `protobuf:"bytes,30,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp for creation time
	CreatedAt int32 `protobuf:"varint,25,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	// Timestamp for modification time
	ModifiedAt int32 `protobuf:"varint,26,opt,name=ModifiedAt,proto3" json:"ModifiedAt,omitempty"`
	// Admin can temporarily disable this job
	Inactive bool `protobuf:"varint,4,opt,name=Inactive,proto3" json:"Inactive,omitempty"`
	// Job created by application or by administrator
	Custom bool `protobuf:"varint,20,opt,name=Custom,proto3" json:"Custom,omitempty"`
	// Optional list of languages detected in the context at launch time
	Languages []string `protobuf:"bytes,10,rep,name=Languages,proto3" json:"Languages,omitempty"`
	// How the job will be triggered.
	// One of these must be set (not exclusive)
	// Listen to a given set of events
	EventNames []string `protobuf:"bytes,5,rep,name=EventNames,proto3" json:"EventNames,omitempty"`
	// Schedule a periodic repetition
	Schedule *Schedule `protobuf:"bytes,6,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	// Start task as soon as job is inserted
	AutoStart bool `protobuf:"varint,7,opt,name=AutoStart,proto3" json:"AutoStart,omitempty"`
	// Start task as soon as server is started
	AutoRestart bool `protobuf:"varint,29,opt,name=AutoRestart,proto3" json:"AutoRestart,omitempty"`
	// Remove job automatically once it is finished (success only)
	AutoClean bool `protobuf:"varint,11,opt,name=AutoClean,proto3" json:"AutoClean,omitempty"`
	// Chain of actions to perform
	Actions []*Action `protobuf:"bytes,8,rep,name=Actions,proto3" json:"Actions,omitempty"`
	// Collect chain of actions into a merged output
	MergeAction *Action `protobuf:"bytes,24,opt,name=MergeAction,proto3" json:"MergeAction,omitempty"`
	// Task properties
	MaxConcurrency int32 `protobuf:"varint,9,opt,name=MaxConcurrency,proto3" json:"MaxConcurrency,omitempty"`
	// Do not send notification on task update
	TasksSilentUpdate bool `protobuf:"varint,12,opt,name=TasksSilentUpdate,proto3" json:"TasksSilentUpdate,omitempty"`
	// Filled with currently running tasks
	Tasks []*Task `protobuf:"bytes,14,rep,name=Tasks,proto3" json:"Tasks,omitempty"`
	// Filter out specific events
	NodeEventFilter *NodesSelector `protobuf:"bytes,15,opt,name=NodeEventFilter,proto3" json:"NodeEventFilter,omitempty"`
	// Deprecated in favor of more generic IdmSelector
	UserEventFilter *UsersSelector `protobuf:"bytes,16,opt,name=UserEventFilter,proto3" json:"UserEventFilter,omitempty"`
	// Idm objects filter
	IdmFilter *IdmSelector `protobuf:"bytes,17,opt,name=IdmFilter,proto3" json:"IdmFilter,omitempty"`
	// Event Context Filter
	ContextMetaFilter *ContextMetaFilter `protobuf:"bytes,18,opt,name=ContextMetaFilter,proto3" json:"ContextMetaFilter,omitempty"`
	// DataSource objects filter
	DataSourceFilter *DataSourceSelector `protobuf:"bytes,21,opt,name=DataSourceFilter,proto3" json:"DataSourceFilter,omitempty"`
	// Job-level parameters that can be passed to underlying actions
	Parameters []*JobParameter `protobuf:"bytes,19,rep,name=Parameters,proto3" json:"Parameters,omitempty"`
	// Additional dependencies that may be required when running the job
	ResourcesDependencies []*anypb.Any `protobuf:"bytes,22,rep,name=ResourcesDependencies,proto3" json:"ResourcesDependencies,omitempty"`
	// Optional Timeout any running job
	Timeout string `protobuf:"bytes,23,opt,name=Timeout,proto3" json:"Timeout,omitempty"`
	// Additional Versioning Metadata
	VersionMeta map[string]string `protobuf:"bytes,27,rep,name=VersionMeta,proto3" json:"VersionMeta,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Expose this job through one or more-userspace APIs
	Hooks []*JobHook `protobuf:"bytes,28,rep,name=Hooks,proto3" json:"Hooks,omitempty"`
}

func (x *Job) Reset() {
	*x = Job{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Job) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Job) ProtoMessage() {}

func (x *Job) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Job.ProtoReflect.Descriptor instead.
func (*Job) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{13}
}

func (x *Job) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Job) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Job) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Job) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Job) GetCreatedAt() int32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *Job) GetModifiedAt() int32 {
	if x != nil {
		return x.ModifiedAt
	}
	return 0
}

func (x *Job) GetInactive() bool {
	if x != nil {
		return x.Inactive
	}
	return false
}

func (x *Job) GetCustom() bool {
	if x != nil {
		return x.Custom
	}
	return false
}

func (x *Job) GetLanguages() []string {
	if x != nil {
		return x.Languages
	}
	return nil
}

func (x *Job) GetEventNames() []string {
	if x != nil {
		return x.EventNames
	}
	return nil
}

func (x *Job) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *Job) GetAutoStart() bool {
	if x != nil {
		return x.AutoStart
	}
	return false
}

func (x *Job) GetAutoRestart() bool {
	if x != nil {
		return x.AutoRestart
	}
	return false
}

func (x *Job) GetAutoClean() bool {
	if x != nil {
		return x.AutoClean
	}
	return false
}

func (x *Job) GetActions() []*Action {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Job) GetMergeAction() *Action {
	if x != nil {
		return x.MergeAction
	}
	return nil
}

func (x *Job) GetMaxConcurrency() int32 {
	if x != nil {
		return x.MaxConcurrency
	}
	return 0
}

func (x *Job) GetTasksSilentUpdate() bool {
	if x != nil {
		return x.TasksSilentUpdate
	}
	return false
}

func (x *Job) GetTasks() []*Task {
	if x != nil {
		return x.Tasks
	}
	return nil
}

func (x *Job) GetNodeEventFilter() *NodesSelector {
	if x != nil {
		return x.NodeEventFilter
	}
	return nil
}

func (x *Job) GetUserEventFilter() *UsersSelector {
	if x != nil {
		return x.UserEventFilter
	}
	return nil
}

func (x *Job) GetIdmFilter() *IdmSelector {
	if x != nil {
		return x.IdmFilter
	}
	return nil
}

func (x *Job) GetContextMetaFilter() *ContextMetaFilter {
	if x != nil {
		return x.ContextMetaFilter
	}
	return nil
}

func (x *Job) GetDataSourceFilter() *DataSourceSelector {
	if x != nil {
		return x.DataSourceFilter
	}
	return nil
}

func (x *Job) GetParameters() []*JobParameter {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *Job) GetResourcesDependencies() []*anypb.Any {
	if x != nil {
		return x.ResourcesDependencies
	}
	return nil
}

func (x *Job) GetTimeout() string {
	if x != nil {
		return x.Timeout
	}
	return ""
}

func (x *Job) GetVersionMeta() map[string]string {
	if x != nil {
		return x.VersionMeta
	}
	return nil
}

func (x *Job) GetHooks() []*JobHook {
	if x != nil {
		return x.Hooks
	}
	return nil
}

// Dynamically expose a job trigger via API
type JobHook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom ApiSlug, otherwise use the job UUID
	ApiSlug string `protobuf:"bytes,1,opt,name=ApiSlug,proto3" json:"ApiSlug,omitempty"`
	// Preset parameters values when calling this endpoint. May be overriden by a map[string]string in the body
	PresetParameters map[string]string `protobuf:"bytes,2,rep,name=PresetParameters,proto3" json:"PresetParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Allow trigger parameters to override default presets
	AllowOverridePresets bool `protobuf:"varint,3,opt,name=AllowOverridePresets,proto3" json:"AllowOverridePresets,omitempty"`
	// Additional arbitrary metadata attached to this hook
	Metadata map[string]string `protobuf:"bytes,4,rep,name=Metadata,proto3" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Set permissions for accessing this endpoint
	Policies []*service.ResourcePolicy `protobuf:"bytes,5,rep,name=Policies,proto3" json:"Policies,omitempty"`
}

func (x *JobHook) Reset() {
	*x = JobHook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobHook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobHook) ProtoMessage() {}

func (x *JobHook) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobHook.ProtoReflect.Descriptor instead.
func (*JobHook) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{14}
}

func (x *JobHook) GetApiSlug() string {
	if x != nil {
		return x.ApiSlug
	}
	return ""
}

func (x *JobHook) GetPresetParameters() map[string]string {
	if x != nil {
		return x.PresetParameters
	}
	return nil
}

func (x *JobHook) GetAllowOverridePresets() bool {
	if x != nil {
		return x.AllowOverridePresets
	}
	return false
}

func (x *JobHook) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *JobHook) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type JobParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Parameter name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Additional description
	Description string `protobuf:"bytes,2,opt,name=Description,proto3" json:"Description,omitempty"`
	// Value saved for this parameter
	Value string `protobuf:"bytes,4,opt,name=Value,proto3" json:"Value,omitempty"`
	// If mandatory, job cannot start without a value
	Mandatory bool `protobuf:"varint,3,opt,name=Mandatory,proto3" json:"Mandatory,omitempty"`
	// Parameter type used in GUI forms
	Type string `protobuf:"bytes,5,opt,name=Type,proto3" json:"Type,omitempty"`
	// Additional data used by GUI elements
	JsonChoices string `protobuf:"bytes,6,opt,name=JsonChoices,proto3" json:"JsonChoices,omitempty"`
}

func (x *JobParameter) Reset() {
	*x = JobParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobParameter) ProtoMessage() {}

func (x *JobParameter) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobParameter.ProtoReflect.Descriptor instead.
func (*JobParameter) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{15}
}

func (x *JobParameter) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *JobParameter) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *JobParameter) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *JobParameter) GetMandatory() bool {
	if x != nil {
		return x.Mandatory
	}
	return false
}

func (x *JobParameter) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *JobParameter) GetJsonChoices() string {
	if x != nil {
		return x.JsonChoices
	}
	return ""
}

// Events sent by the JobService when CRUD'ing a Job configuration
type JobChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobUpdated *Job   `protobuf:"bytes,1,opt,name=JobUpdated,proto3" json:"JobUpdated,omitempty"`
	JobRemoved string `protobuf:"bytes,2,opt,name=JobRemoved,proto3" json:"JobRemoved,omitempty"`
}

func (x *JobChangeEvent) Reset() {
	*x = JobChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobChangeEvent) ProtoMessage() {}

func (x *JobChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobChangeEvent.ProtoReflect.Descriptor instead.
func (*JobChangeEvent) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{16}
}

func (x *JobChangeEvent) GetJobUpdated() *Job {
	if x != nil {
		return x.JobUpdated
	}
	return nil
}

func (x *JobChangeEvent) GetJobRemoved() string {
	if x != nil {
		return x.JobRemoved
	}
	return ""
}

type TaskChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TaskUpdated *Task `protobuf:"bytes,1,opt,name=TaskUpdated,proto3" json:"TaskUpdated,omitempty"`
	Job         *Job  `protobuf:"bytes,2,opt,name=Job,proto3" json:"Job,omitempty"`
}

func (x *TaskChangeEvent) Reset() {
	*x = TaskChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskChangeEvent) ProtoMessage() {}

func (x *TaskChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskChangeEvent.ProtoReflect.Descriptor instead.
func (*TaskChangeEvent) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{17}
}

func (x *TaskChangeEvent) GetTaskUpdated() *Task {
	if x != nil {
		return x.TaskUpdated
	}
	return nil
}

func (x *TaskChangeEvent) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type PutJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=Job,proto3" json:"Job,omitempty"`
}

func (x *PutJobRequest) Reset() {
	*x = PutJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutJobRequest) ProtoMessage() {}

func (x *PutJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutJobRequest.ProtoReflect.Descriptor instead.
func (*PutJobRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{18}
}

func (x *PutJobRequest) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type PutJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=Job,proto3" json:"Job,omitempty"`
}

func (x *PutJobResponse) Reset() {
	*x = PutJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutJobResponse) ProtoMessage() {}

func (x *PutJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutJobResponse.ProtoReflect.Descriptor instead.
func (*PutJobResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{19}
}

func (x *PutJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type GetJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID     string     `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	LoadTasks TaskStatus `protobuf:"varint,2,opt,name=LoadTasks,proto3,enum=jobs.TaskStatus" json:"LoadTasks,omitempty"`
}

func (x *GetJobRequest) Reset() {
	*x = GetJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobRequest) ProtoMessage() {}

func (x *GetJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobRequest.ProtoReflect.Descriptor instead.
func (*GetJobRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{20}
}

func (x *GetJobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *GetJobRequest) GetLoadTasks() TaskStatus {
	if x != nil {
		return x.LoadTasks
	}
	return TaskStatus_Unknown
}

type GetJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=Job,proto3" json:"Job,omitempty"`
}

func (x *GetJobResponse) Reset() {
	*x = GetJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetJobResponse) ProtoMessage() {}

func (x *GetJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetJobResponse.ProtoReflect.Descriptor instead.
func (*GetJobResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{21}
}

func (x *GetJobResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type DeleteJobRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JobID         string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	CleanableJobs bool   `protobuf:"varint,2,opt,name=CleanableJobs,proto3" json:"CleanableJobs,omitempty"`
}

func (x *DeleteJobRequest) Reset() {
	*x = DeleteJobRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobRequest) ProtoMessage() {}

func (x *DeleteJobRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobRequest.ProtoReflect.Descriptor instead.
func (*DeleteJobRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteJobRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *DeleteJobRequest) GetCleanableJobs() bool {
	if x != nil {
		return x.CleanableJobs
	}
	return false
}

type DeleteJobResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success     bool  `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	DeleteCount int32 `protobuf:"varint,2,opt,name=DeleteCount,proto3" json:"DeleteCount,omitempty"`
}

func (x *DeleteJobResponse) Reset() {
	*x = DeleteJobResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteJobResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteJobResponse) ProtoMessage() {}

func (x *DeleteJobResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteJobResponse.ProtoReflect.Descriptor instead.
func (*DeleteJobResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteJobResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *DeleteJobResponse) GetDeleteCount() int32 {
	if x != nil {
		return x.DeleteCount
	}
	return 0
}

type ListJobsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Restrict to a specific owner (current user by default)
	Owner string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	// Filter with only event-based jobs
	EventsOnly bool `protobuf:"varint,2,opt,name=EventsOnly,proto3" json:"EventsOnly,omitempty"`
	// Filter with only timer-based jobs
	TimersOnly bool `protobuf:"varint,3,opt,name=TimersOnly,proto3" json:"TimersOnly,omitempty"`
	// Load tasks that correspond to the given TaskStatus
	LoadTasks TaskStatus `protobuf:"varint,4,opt,name=LoadTasks,proto3,enum=jobs.TaskStatus" json:"LoadTasks,omitempty"`
	// Load jobs by their ID
	JobIDs []string `protobuf:"bytes,5,rep,name=JobIDs,proto3" json:"JobIDs,omitempty"`
	// Start listing at a given position
	TasksOffset int32 `protobuf:"varint,6,opt,name=TasksOffset,proto3" json:"TasksOffset,omitempty"`
	// Lmit the number of results
	TasksLimit int32 `protobuf:"varint,7,opt,name=TasksLimit,proto3" json:"TasksLimit,omitempty"`
}

func (x *ListJobsRequest) Reset() {
	*x = ListJobsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsRequest) ProtoMessage() {}

func (x *ListJobsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsRequest.ProtoReflect.Descriptor instead.
func (*ListJobsRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{24}
}

func (x *ListJobsRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *ListJobsRequest) GetEventsOnly() bool {
	if x != nil {
		return x.EventsOnly
	}
	return false
}

func (x *ListJobsRequest) GetTimersOnly() bool {
	if x != nil {
		return x.TimersOnly
	}
	return false
}

func (x *ListJobsRequest) GetLoadTasks() TaskStatus {
	if x != nil {
		return x.LoadTasks
	}
	return TaskStatus_Unknown
}

func (x *ListJobsRequest) GetJobIDs() []string {
	if x != nil {
		return x.JobIDs
	}
	return nil
}

func (x *ListJobsRequest) GetTasksOffset() int32 {
	if x != nil {
		return x.TasksOffset
	}
	return 0
}

func (x *ListJobsRequest) GetTasksLimit() int32 {
	if x != nil {
		return x.TasksLimit
	}
	return 0
}

type ListJobsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *Job `protobuf:"bytes,1,opt,name=Job,proto3" json:"Job,omitempty"`
}

func (x *ListJobsResponse) Reset() {
	*x = ListJobsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListJobsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListJobsResponse) ProtoMessage() {}

func (x *ListJobsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListJobsResponse.ProtoReflect.Descriptor instead.
func (*ListJobsResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{25}
}

func (x *ListJobsResponse) GetJob() *Job {
	if x != nil {
		return x.Job
	}
	return nil
}

type ListTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List tasks for the job with this Id
	JobID string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	// List only tasks with this Status
	Status TaskStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=jobs.TaskStatus" json:"Status,omitempty"`
}

func (x *ListTasksRequest) Reset() {
	*x = ListTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksRequest) ProtoMessage() {}

func (x *ListTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksRequest.ProtoReflect.Descriptor instead.
func (*ListTasksRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{26}
}

func (x *ListTasksRequest) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *ListTasksRequest) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Unknown
}

type ListTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *ListTasksResponse) Reset() {
	*x = ListTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTasksResponse) ProtoMessage() {}

func (x *ListTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTasksResponse.ProtoReflect.Descriptor instead.
func (*ListTasksResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{27}
}

func (x *ListTasksResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type PutTaskRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *PutTaskRequest) Reset() {
	*x = PutTaskRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskRequest) ProtoMessage() {}

func (x *PutTaskRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskRequest.ProtoReflect.Descriptor instead.
func (*PutTaskRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{28}
}

func (x *PutTaskRequest) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type PutTaskResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Task *Task `protobuf:"bytes,1,opt,name=Task,proto3" json:"Task,omitempty"`
}

func (x *PutTaskResponse) Reset() {
	*x = PutTaskResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutTaskResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutTaskResponse) ProtoMessage() {}

func (x *PutTaskResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutTaskResponse.ProtoReflect.Descriptor instead.
func (*PutTaskResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{29}
}

func (x *PutTaskResponse) GetTask() *Task {
	if x != nil {
		return x.Task
	}
	return nil
}

type DeleteTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the job
	JobId string `protobuf:"bytes,1,opt,name=JobId,proto3" json:"JobId,omitempty"`
	// Ids of tasks to delete
	TaskID []string `protobuf:"bytes,2,rep,name=TaskID,proto3" json:"TaskID,omitempty"`
	// If no TaskID and/or no JobID are passed, delete tasks by status
	Status []TaskStatus `protobuf:"varint,3,rep,packed,name=Status,proto3,enum=jobs.TaskStatus" json:"Status,omitempty"`
	// If deleting by status, optionally keep only a number of tasks
	PruneLimit int32 `protobuf:"varint,4,opt,name=PruneLimit,proto3" json:"PruneLimit,omitempty"`
}

func (x *DeleteTasksRequest) Reset() {
	*x = DeleteTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTasksRequest) ProtoMessage() {}

func (x *DeleteTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTasksRequest.ProtoReflect.Descriptor instead.
func (*DeleteTasksRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{30}
}

func (x *DeleteTasksRequest) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *DeleteTasksRequest) GetTaskID() []string {
	if x != nil {
		return x.TaskID
	}
	return nil
}

func (x *DeleteTasksRequest) GetStatus() []TaskStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *DeleteTasksRequest) GetPruneLimit() int32 {
	if x != nil {
		return x.PruneLimit
	}
	return 0
}

type DeleteTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Deleted []string `protobuf:"bytes,1,rep,name=Deleted,proto3" json:"Deleted,omitempty"`
}

func (x *DeleteTasksResponse) Reset() {
	*x = DeleteTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTasksResponse) ProtoMessage() {}

func (x *DeleteTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTasksResponse.ProtoReflect.Descriptor instead.
func (*DeleteTasksResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteTasksResponse) GetDeleted() []string {
	if x != nil {
		return x.Deleted
	}
	return nil
}

type DetectStuckTasksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Since int32 `protobuf:"varint,1,opt,name=Since,proto3" json:"Since,omitempty"`
}

func (x *DetectStuckTasksRequest) Reset() {
	*x = DetectStuckTasksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectStuckTasksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectStuckTasksRequest) ProtoMessage() {}

func (x *DetectStuckTasksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectStuckTasksRequest.ProtoReflect.Descriptor instead.
func (*DetectStuckTasksRequest) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{32}
}

func (x *DetectStuckTasksRequest) GetSince() int32 {
	if x != nil {
		return x.Since
	}
	return 0
}

type DetectStuckTasksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FixedTaskIds []string `protobuf:"bytes,1,rep,name=FixedTaskIds,proto3" json:"FixedTaskIds,omitempty"`
}

func (x *DetectStuckTasksResponse) Reset() {
	*x = DetectStuckTasksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DetectStuckTasksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DetectStuckTasksResponse) ProtoMessage() {}

func (x *DetectStuckTasksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DetectStuckTasksResponse.ProtoReflect.Descriptor instead.
func (*DetectStuckTasksResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{33}
}

func (x *DetectStuckTasksResponse) GetFixedTaskIds() []string {
	if x != nil {
		return x.FixedTaskIds
	}
	return nil
}

type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            string     `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	JobID         string     `protobuf:"bytes,2,opt,name=JobID,proto3" json:"JobID,omitempty"`
	Status        TaskStatus `protobuf:"varint,3,opt,name=Status,proto3,enum=jobs.TaskStatus" json:"Status,omitempty"`
	StatusMessage string     `protobuf:"bytes,4,opt,name=StatusMessage,proto3" json:"StatusMessage,omitempty"`
	TriggerOwner  string     `protobuf:"bytes,5,opt,name=TriggerOwner,proto3" json:"TriggerOwner,omitempty"`
	StartTime     int32      `protobuf:"varint,6,opt,name=StartTime,proto3" json:"StartTime,omitempty"`
	EndTime       int32      `protobuf:"varint,7,opt,name=EndTime,proto3" json:"EndTime,omitempty"`
	// Can be interrupted
	CanStop bool `protobuf:"varint,8,opt,name=CanStop,proto3" json:"CanStop,omitempty"`
	// Can be paused/resumed
	CanPause bool `protobuf:"varint,9,opt,name=CanPause,proto3" json:"CanPause,omitempty"`
	// Tasks publish a progress
	HasProgress bool `protobuf:"varint,10,opt,name=HasProgress,proto3" json:"HasProgress,omitempty"`
	// Float value of the progress between 0 and 1
	Progress float32 `protobuf:"fixed32,11,opt,name=Progress,proto3" json:"Progress,omitempty"`
	// Logs of all the actions performed
	ActionsLogs []*ActionLog `protobuf:"bytes,12,rep,name=ActionsLogs,proto3" json:"ActionsLogs,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{34}
}

func (x *Task) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Task) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *Task) GetStatus() TaskStatus {
	if x != nil {
		return x.Status
	}
	return TaskStatus_Unknown
}

func (x *Task) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *Task) GetTriggerOwner() string {
	if x != nil {
		return x.TriggerOwner
	}
	return ""
}

func (x *Task) GetStartTime() int32 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Task) GetEndTime() int32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *Task) GetCanStop() bool {
	if x != nil {
		return x.CanStop
	}
	return false
}

func (x *Task) GetCanPause() bool {
	if x != nil {
		return x.CanPause
	}
	return false
}

func (x *Task) GetHasProgress() bool {
	if x != nil {
		return x.HasProgress
	}
	return false
}

func (x *Task) GetProgress() float32 {
	if x != nil {
		return x.Progress
	}
	return 0
}

func (x *Task) GetActionsLogs() []*ActionLog {
	if x != nil {
		return x.ActionsLogs
	}
	return nil
}

// Command sent to control a job or a task
type CtrlCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of command to send (None, Pause, Resume, Stop, Delete, RunOnce, Inactive, Active)
	Cmd Command `protobuf:"varint,1,opt,name=Cmd,proto3,enum=jobs.Command" json:"Cmd,omitempty"`
	// Id of the job
	JobId string `protobuf:"bytes,2,opt,name=JobId,proto3" json:"JobId,omitempty"`
	// Id of the associated task
	TaskId string `protobuf:"bytes,3,opt,name=TaskId,proto3" json:"TaskId,omitempty"`
	// Owner of the job
	OwnerId string `protobuf:"bytes,4,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	// Parameters used for RunOnce command
	RunParameters map[string]string `protobuf:"bytes,5,rep,name=RunParameters,proto3" json:"RunParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *CtrlCommand) Reset() {
	*x = CtrlCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrlCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrlCommand) ProtoMessage() {}

func (x *CtrlCommand) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrlCommand.ProtoReflect.Descriptor instead.
func (*CtrlCommand) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{35}
}

func (x *CtrlCommand) GetCmd() Command {
	if x != nil {
		return x.Cmd
	}
	return Command_None
}

func (x *CtrlCommand) GetJobId() string {
	if x != nil {
		return x.JobId
	}
	return ""
}

func (x *CtrlCommand) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *CtrlCommand) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *CtrlCommand) GetRunParameters() map[string]string {
	if x != nil {
		return x.RunParameters
	}
	return nil
}

// Response to the CtrlCommand
type CtrlCommandResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Msg string `protobuf:"bytes,1,opt,name=Msg,proto3" json:"Msg,omitempty"`
}

func (x *CtrlCommandResponse) Reset() {
	*x = CtrlCommandResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CtrlCommandResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CtrlCommandResponse) ProtoMessage() {}

func (x *CtrlCommandResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CtrlCommandResponse.ProtoReflect.Descriptor instead.
func (*CtrlCommandResponse) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{36}
}

func (x *CtrlCommandResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type ActionLog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action        *Action        `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	InputMessage  *ActionMessage `protobuf:"bytes,2,opt,name=InputMessage,proto3" json:"InputMessage,omitempty"`
	OutputMessage *ActionMessage `protobuf:"bytes,3,opt,name=OutputMessage,proto3" json:"OutputMessage,omitempty"`
}

func (x *ActionLog) Reset() {
	*x = ActionLog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionLog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionLog) ProtoMessage() {}

func (x *ActionLog) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionLog.ProtoReflect.Descriptor instead.
func (*ActionLog) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{37}
}

func (x *ActionLog) GetAction() *Action {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ActionLog) GetInputMessage() *ActionMessage {
	if x != nil {
		return x.InputMessage
	}
	return nil
}

func (x *ActionLog) GetOutputMessage() *ActionMessage {
	if x != nil {
		return x.OutputMessage
	}
	return nil
}

// Simple Event sent by the timer service to trigger a JobID at a given time
// or to trigger a run now, with optional parameters
type JobTriggerEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the Job
	JobID string `protobuf:"bytes,1,opt,name=JobID,proto3" json:"JobID,omitempty"`
	// Schedule
	Schedule *Schedule `protobuf:"bytes,2,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
	// Start job now
	RunNow bool `protobuf:"varint,3,opt,name=RunNow,proto3" json:"RunNow,omitempty"`
	// Impose the task unique ID for this run
	RunTaskId string `protobuf:"bytes,4,opt,name=RunTaskId,proto3" json:"RunTaskId,omitempty"`
	// Use specific parameters values for this run
	RunParameters map[string]string `protobuf:"bytes,5,rep,name=RunParameters,proto3" json:"RunParameters,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// This was triggered by the hooks API
	HookSlug string `protobuf:"bytes,6,opt,name=HookSlug,proto3" json:"HookSlug,omitempty"`
	// Predefined custom message
	TriggerMessage *ActionMessage `protobuf:"bytes,7,opt,name=TriggerMessage,proto3" json:"TriggerMessage,omitempty"`
}

func (x *JobTriggerEvent) Reset() {
	*x = JobTriggerEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JobTriggerEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JobTriggerEvent) ProtoMessage() {}

func (x *JobTriggerEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JobTriggerEvent.ProtoReflect.Descriptor instead.
func (*JobTriggerEvent) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{38}
}

func (x *JobTriggerEvent) GetJobID() string {
	if x != nil {
		return x.JobID
	}
	return ""
}

func (x *JobTriggerEvent) GetSchedule() *Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *JobTriggerEvent) GetRunNow() bool {
	if x != nil {
		return x.RunNow
	}
	return false
}

func (x *JobTriggerEvent) GetRunTaskId() string {
	if x != nil {
		return x.RunTaskId
	}
	return ""
}

func (x *JobTriggerEvent) GetRunParameters() map[string]string {
	if x != nil {
		return x.RunParameters
	}
	return nil
}

func (x *JobTriggerEvent) GetHookSlug() string {
	if x != nil {
		return x.HookSlug
	}
	return ""
}

func (x *JobTriggerEvent) GetTriggerMessage() *ActionMessage {
	if x != nil {
		return x.TriggerMessage
	}
	return nil
}

// Standard output of an action. Success value is required
// other are optional
type ActionOutput struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// True if action succeeded
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	// Arbitrary bytes sequence
	RawBody []byte `protobuf:"bytes,2,opt,name=RawBody,proto3" json:"RawBody,omitempty"`
	// Arbitrary string
	StringBody string `protobuf:"bytes,3,opt,name=StringBody,proto3" json:"StringBody,omitempty"`
	// Arbitrary JSON-encoded bytes
	JsonBody []byte `protobuf:"bytes,4,opt,name=JsonBody,proto3" json:"JsonBody,omitempty"`
	// Error
	ErrorString string `protobuf:"bytes,5,opt,name=ErrorString,proto3" json:"ErrorString,omitempty"`
	// If action was returned WithIgnore()
	Ignored bool `protobuf:"varint,6,opt,name=Ignored,proto3" json:"Ignored,omitempty"`
	// Time taken to run the action
	Time int32 `protobuf:"varint,7,opt,name=Time,proto3" json:"Time,omitempty"`
	// Vars container, values are json-encoded.
	Vars map[string]string `protobuf:"bytes,8,rep,name=Vars,proto3" json:"Vars,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ActionOutput) Reset() {
	*x = ActionOutput{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionOutput) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOutput) ProtoMessage() {}

func (x *ActionOutput) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOutput.ProtoReflect.Descriptor instead.
func (*ActionOutput) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{39}
}

func (x *ActionOutput) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionOutput) GetRawBody() []byte {
	if x != nil {
		return x.RawBody
	}
	return nil
}

func (x *ActionOutput) GetStringBody() string {
	if x != nil {
		return x.StringBody
	}
	return ""
}

func (x *ActionOutput) GetJsonBody() []byte {
	if x != nil {
		return x.JsonBody
	}
	return nil
}

func (x *ActionOutput) GetErrorString() string {
	if x != nil {
		return x.ErrorString
	}
	return ""
}

func (x *ActionOutput) GetIgnored() bool {
	if x != nil {
		return x.Ignored
	}
	return false
}

func (x *ActionOutput) GetTime() int32 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *ActionOutput) GetVars() map[string]string {
	if x != nil {
		return x.Vars
	}
	return nil
}

// ActionOutputSingleQuery provides a unitary query to filter ActionOutput messages
type ActionOutputSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Check if ActionOutput has success
	IsSuccess bool `protobuf:"varint,1,opt,name=IsSuccess,proto3" json:"IsSuccess,omitempty"`
	// Occurrence of string in StringBody or JsonBody (as string)
	StringBodyRegexp string `protobuf:"bytes,2,opt,name=StringBodyRegexp,proto3" json:"StringBodyRegexp,omitempty"`
	// StringBody or JsonBody size bigger than
	StringBodySizeGreaterThan int32 `protobuf:"varint,3,opt,name=StringBodySizeGreaterThan,proto3" json:"StringBodySizeGreaterThan,omitempty"`
	// StringBody or JsonBody size smaller than
	StringBodySizeSmallerThan int32 `protobuf:"varint,4,opt,name=StringBodySizeSmallerThan,proto3" json:"StringBodySizeSmallerThan,omitempty"`
	// Exact match of StringBody or JsonBody (as string)
	JsonBodyRegexp string `protobuf:"bytes,5,opt,name=JsonBodyRegexp,proto3" json:"JsonBodyRegexp,omitempty"`
	// Check existence of key in json body
	JsonBodyHasKey string `protobuf:"bytes,6,opt,name=JsonBodyHasKey,proto3" json:"JsonBodyHasKey,omitempty"`
	// StringBody or JsonBody size bigger than
	JsonBodySizeGreaterThan int32 `protobuf:"varint,7,opt,name=JsonBodySizeGreaterThan,proto3" json:"JsonBodySizeGreaterThan,omitempty"`
	// StringBody or JsonBody size smaller than
	JsonBodySizeSmallerThan int32 `protobuf:"varint,8,opt,name=JsonBodySizeSmallerThan,proto3" json:"JsonBodySizeSmallerThan,omitempty"`
	// Time taken greater than
	TaskTimeGt int32 `protobuf:"varint,9,opt,name=TaskTimeGt,proto3" json:"TaskTimeGt,omitempty"`
	// Time taken shorter than
	TaskTimeLt int32 `protobuf:"varint,10,opt,name=TaskTimeLt,proto3" json:"TaskTimeLt,omitempty"`
	// Check occurrence on error string
	ErrorStringRegexp string `protobuf:"bytes,11,opt,name=ErrorStringRegexp,proto3" json:"ErrorStringRegexp,omitempty"`
	// FreeCondition can be built using templates or gval
	FreeCondition string `protobuf:"bytes,13,opt,name=FreeCondition,proto3" json:"FreeCondition,omitempty"`
	// Invert condition
	Not bool `protobuf:"varint,12,opt,name=Not,proto3" json:"Not,omitempty"`
}

func (x *ActionOutputSingleQuery) Reset() {
	*x = ActionOutputSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionOutputSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionOutputSingleQuery) ProtoMessage() {}

func (x *ActionOutputSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionOutputSingleQuery.ProtoReflect.Descriptor instead.
func (*ActionOutputSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{40}
}

func (x *ActionOutputSingleQuery) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *ActionOutputSingleQuery) GetStringBodyRegexp() string {
	if x != nil {
		return x.StringBodyRegexp
	}
	return ""
}

func (x *ActionOutputSingleQuery) GetStringBodySizeGreaterThan() int32 {
	if x != nil {
		return x.StringBodySizeGreaterThan
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetStringBodySizeSmallerThan() int32 {
	if x != nil {
		return x.StringBodySizeSmallerThan
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetJsonBodyRegexp() string {
	if x != nil {
		return x.JsonBodyRegexp
	}
	return ""
}

func (x *ActionOutputSingleQuery) GetJsonBodyHasKey() string {
	if x != nil {
		return x.JsonBodyHasKey
	}
	return ""
}

func (x *ActionOutputSingleQuery) GetJsonBodySizeGreaterThan() int32 {
	if x != nil {
		return x.JsonBodySizeGreaterThan
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetJsonBodySizeSmallerThan() int32 {
	if x != nil {
		return x.JsonBodySizeSmallerThan
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetTaskTimeGt() int32 {
	if x != nil {
		return x.TaskTimeGt
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetTaskTimeLt() int32 {
	if x != nil {
		return x.TaskTimeLt
	}
	return 0
}

func (x *ActionOutputSingleQuery) GetErrorStringRegexp() string {
	if x != nil {
		return x.ErrorStringRegexp
	}
	return ""
}

func (x *ActionOutputSingleQuery) GetFreeCondition() string {
	if x != nil {
		return x.FreeCondition
	}
	return ""
}

func (x *ActionOutputSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// Message passed along from one action to another, main properties
// are modified by the various actions.
// OutputChain is being stacked up when passing through actions
type ActionMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Initial event that triggered the Job
	Event *anypb.Any `protobuf:"bytes,1,opt,name=Event,proto3" json:"Event,omitempty"`
	// One or more Node
	Nodes []*tree.Node `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	// One or more User
	Users []*idm.User `protobuf:"bytes,3,rep,name=Users,proto3" json:"Users,omitempty"`
	// One or more Role
	Roles []*idm.Role `protobuf:"bytes,6,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// One or more Workspace
	Workspaces []*idm.Workspace `protobuf:"bytes,7,rep,name=Workspaces,proto3" json:"Workspaces,omitempty"`
	// One or more ACL
	Acls []*idm.ACL `protobuf:"bytes,8,rep,name=Acls,proto3" json:"Acls,omitempty"`
	// One or more Activity
	Activities []*activity.Object `protobuf:"bytes,4,rep,name=Activities,proto3" json:"Activities,omitempty"`
	// One or more DataSource
	DataSources []*object.DataSource `protobuf:"bytes,9,rep,name=DataSources,proto3" json:"DataSources,omitempty"`
	// Stack of ActionOutput messages appended by all previous actions
	OutputChain []*ActionOutput `protobuf:"bytes,5,rep,name=OutputChain,proto3" json:"OutputChain,omitempty"`
}

func (x *ActionMessage) Reset() {
	*x = ActionMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_jobs_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionMessage) ProtoMessage() {}

func (x *ActionMessage) ProtoReflect() protoreflect.Message {
	mi := &file_cells_jobs_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionMessage.ProtoReflect.Descriptor instead.
func (*ActionMessage) Descriptor() ([]byte, []int) {
	return file_cells_jobs_proto_rawDescGZIP(), []int{41}
}

func (x *ActionMessage) GetEvent() *anypb.Any {
	if x != nil {
		return x.Event
	}
	return nil
}

func (x *ActionMessage) GetNodes() []*tree.Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ActionMessage) GetUsers() []*idm.User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *ActionMessage) GetRoles() []*idm.Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ActionMessage) GetWorkspaces() []*idm.Workspace {
	if x != nil {
		return x.Workspaces
	}
	return nil
}

func (x *ActionMessage) GetAcls() []*idm.ACL {
	if x != nil {
		return x.Acls
	}
	return nil
}

func (x *ActionMessage) GetActivities() []*activity.Object {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *ActionMessage) GetDataSources() []*object.DataSource {
	if x != nil {
		return x.DataSources
	}
	return nil
}

func (x *ActionMessage) GetOutputChain() []*ActionOutput {
	if x != nil {
		return x.OutputChain
	}
	return nil
}

var File_cells_jobs_proto protoreflect.FileDescriptor

var file_cells_jobs_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x6a, 0x6f, 0x62, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x2d, 0x69, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8d, 0x02, 0x0a, 0x0d,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10, 0x0a,
	0x03, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x50, 0x61, 0x74, 0x68, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x50, 0x61, 0x74, 0x68, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x4f, 0x75,
	0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x61,
	0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43,
	0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x9e, 0x02, 0x0a, 0x0b,
	0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x29, 0x0a, 0x04, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x4f,
	0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46,
	0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0xf4, 0x01, 0x0a,
	0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c,
	0x12, 0x1f, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x22, 0xac, 0x02, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x22, 0x8a, 0x02, 0x0a, 0x12, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49,
	0x73, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4d,
	0x61, 0x6e, 0x75, 0x61, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x41, 0x70, 0x69, 0x48, 0x6f,
	0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x41, 0x70, 0x69, 0x48,
	0x6f, 0x6f, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x6f, 0x6b, 0x53, 0x6c,
	0x75, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x70, 0x69, 0x48, 0x6f, 0x6f,
	0x6b, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x2a, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x10, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x52, 0x75,
	0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x22,
	0x6d, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x72,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x6a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x46, 0x61, 0x6e, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c, 0x65, 0x61,
	0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x43, 0x6c,
	0x65, 0x61, 0x72, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x22, 0x35, 0x0a, 0x17, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x5e, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49,
	0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x49, 0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x49, 0x73, 0x6f, 0x38, 0x36, 0x30, 0x31,
	0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f,
	0x49, 0x73, 0x6f, 0x38, 0x36, 0x30, 0x31, 0x4d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x74, 0x61, 0x22,
	0xd7, 0x09, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x42, 0x79, 0x70, 0x61, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72,
	0x65, 0x61, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x42, 0x72, 0x65, 0x61, 0x6b, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x39, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x35, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x39, 0x0a, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x52, 0x0d, 0x55, 0x73, 0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x12, 0x35, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0b, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x33, 0x0a, 0x0b, 0x49, 0x64, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x0b, 0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2f, 0x0a,
	0x09, 0x49, 0x64, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x6f, 0x72, 0x52, 0x09, 0x49, 0x64, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x48,
	0x0a, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x12, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12,
	0x39, 0x0a, 0x0d, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x72,
	0x69, 0x67, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0d, 0x54, 0x72, 0x69,
	0x67, 0x67, 0x65, 0x72, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x36, 0x0a, 0x0c, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x52, 0x0c, 0x44, 0x61, 0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x65, 0x64, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3e, 0x0a, 0x13, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x4d, 0x65,
	0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x4d,
	0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x0f, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb6, 0x0a, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x33, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x41, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x43, 0x75,
	0x73, 0x74, 0x6f, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b,
	0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x41, 0x75, 0x74, 0x6f, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x12, 0x26, 0x0a, 0x07,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2e, 0x0a, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x4d, 0x61,
	0x78, 0x43, 0x6f, 0x6e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x2c, 0x0a, 0x11,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x69, 0x6c, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x53, 0x69,
	0x6c, 0x65, 0x6e, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x05, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x3d, 0x0a, 0x0f,
	0x4e, 0x6f, 0x64, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x4e, 0x6f, 0x64, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0f, 0x55,
	0x73, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2f, 0x0a, 0x09, 0x49, 0x64,
	0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x49, 0x64, 0x6d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x52, 0x09, 0x49, 0x64, 0x6d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x45, 0x0a, 0x11, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x12, 0x44, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x10, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x32, 0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x52, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x4a, 0x0a, 0x15,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x15, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x12, 0x3c, 0x0a, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x18, 0x1b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a,
	0x6f, 0x62, 0x2e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0b, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x23, 0x0a, 0x05, 0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x18, 0x1c, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x52, 0x05,
	0x48, 0x6f, 0x6f, 0x6b, 0x73, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x1a, 0x3e, 0x0a, 0x10, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x98, 0x03, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x12, 0x18,
	0x0a, 0x07, 0x41, 0x70, 0x69, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x41, 0x70, 0x69, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x4f, 0x0a, 0x10, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f,
	0x6b, 0x2e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x10, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x50, 0x72, 0x65, 0x73, 0x65, 0x74, 0x73, 0x12, 0x37, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x48, 0x6f, 0x6f, 0x6b, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x43, 0x0a, 0x15, 0x50,
	0x72, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xae, 0x01,
	0x0a, 0x0c, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x61,
	0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4d,
	0x61, 0x6e, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x22, 0x5b,
	0x0a, 0x0e, 0x4a, 0x6f, 0x62, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x29, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52,
	0x0a, 0x4a, 0x6f, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x4a,
	0x6f, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x22, 0x5c, 0x0a, 0x0f, 0x54,
	0x61, 0x73, 0x6b, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x2c,
	0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52,
	0x0b, 0x54, 0x61, 0x73, 0x6b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x03,
	0x4a, 0x6f, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x2c, 0x0a, 0x0d, 0x50, 0x75, 0x74,
	0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x03, 0x4a, 0x6f,
	0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a,
	0x6f, 0x62, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x2d, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x4a, 0x6f, 0x62,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f,
	0x62, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x55, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x2e, 0x0a,
	0x09, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x22, 0x2d, 0x0a,
	0x0e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x4a, 0x6f, 0x62, 0x22, 0x4e, 0x0a, 0x10,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x43,
	0x6c, 0x65, 0x61, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4a, 0x6f, 0x62, 0x73, 0x22, 0x4f, 0x0a, 0x11,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf1, 0x01,
	0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x69, 0x6d, 0x65, 0x72,
	0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x54, 0x69, 0x6d,
	0x65, 0x72, 0x73, 0x4f, 0x6e, 0x6c, 0x79, 0x12, 0x2e, 0x0a, 0x09, 0x4c, 0x6f, 0x61, 0x64, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6a, 0x6f, 0x62,
	0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x09, 0x4c, 0x6f,
	0x61, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x73, 0x12,
	0x20, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x22, 0x2f, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x03, 0x4a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x4a,
	0x6f, 0x62, 0x22, 0x52, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x33, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x30, 0x0a, 0x0e, 0x50,
	0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1e, 0x0a,
	0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x22, 0x31, 0x0a,
	0x0f, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x04, 0x54, 0x61, 0x73, 0x6b,
	0x22, 0x8c, 0x01, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x10, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73,
	0x6b, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x50, 0x72, 0x75, 0x6e, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x22,
	0x2f, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64,
	0x22, 0x2f, 0x0a, 0x17, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x75, 0x63, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x53,
	0x69, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x22, 0x3e, 0x0a, 0x18, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x75, 0x63, 0x6b,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0c, 0x46, 0x69, 0x78, 0x65, 0x64, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x73, 0x22, 0xff, 0x02, 0x0a, 0x04, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f,
	0x62, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44,
	0x12, 0x28, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x10, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4f,
	0x77, 0x6e, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x43, 0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x43,
	0x61, 0x6e, 0x53, 0x74, 0x6f, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x43, 0x61, 0x6e, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x48, 0x61, 0x73, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x31, 0x0a, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x6f, 0x67, 0x73, 0x18,
	0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x67, 0x52, 0x0b, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c,
	0x6f, 0x67, 0x73, 0x22, 0x84, 0x02, 0x0a, 0x0b, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x12, 0x1f, 0x0a, 0x03, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52,
	0x03, 0x43, 0x6d, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x61,
	0x73, 0x6b, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x4a, 0x0a, 0x0d,
	0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65,
	0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x40, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x27, 0x0a, 0x13, 0x43, 0x74,
	0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x4d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x4d, 0x73, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x09, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f,
	0x67, 0x12, 0x24, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0c, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x37, 0x0a, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x0c, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x39, 0x0a, 0x0d, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0xf4, 0x02, 0x0a, 0x0f,
	0x4a, 0x6f, 0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4a, 0x6f, 0x62, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x4a, 0x6f, 0x62, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x53,
	0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x75, 0x6e, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x52, 0x75, 0x6e, 0x4e, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x75, 0x6e,
	0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x52, 0x75,
	0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x4e, 0x0a, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x53,
	0x6c, 0x75, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x6f, 0x6b, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x3b, 0x0a, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x0e, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x1a, 0x40, 0x0a, 0x12, 0x52, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb9, 0x02, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x52, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07,
	0x52, 0x61, 0x77, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x42, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x42,
	0x6f, 0x64, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x56, 0x61, 0x72, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x04, 0x56, 0x61, 0x72, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x56, 0x61, 0x72, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xc9,
	0x04, 0x0a, 0x17, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49,
	0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f,
	0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42,
	0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68,
	0x61, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64, 0x79,
	0x53, 0x69, 0x7a, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x19, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x42, 0x6f, 0x64,
	0x79, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f,
	0x64, 0x79, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x12, 0x26, 0x0a, 0x0e, 0x4a, 0x73, 0x6f, 0x6e,
	0x42, 0x6f, 0x64, 0x79, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x48, 0x61, 0x73, 0x4b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x17, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65,
	0x47, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x17, 0x4a, 0x73, 0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x47,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x12, 0x38, 0x0a, 0x17, 0x4a, 0x73,
	0x6f, 0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65,
	0x72, 0x54, 0x68, 0x61, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x4a, 0x73, 0x6f,
	0x6e, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x69, 0x7a, 0x65, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x65, 0x72,
	0x54, 0x68, 0x61, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x47, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x47, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x54, 0x61, 0x73, 0x6b, 0x54, 0x69,
	0x6d, 0x65, 0x4c, 0x74, 0x12, 0x2c, 0x0a, 0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x46, 0x72, 0x65, 0x65, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x6f, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4e, 0x6f, 0x74, 0x22, 0x8b, 0x03, 0x0a, 0x0d, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x0a,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x0a, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x04,
	0x41, 0x63, 0x6c, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x64, 0x6d,
	0x2e, 0x41, 0x43, 0x4c, 0x52, 0x04, 0x41, 0x63, 0x6c, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x52, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x34, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x0b, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x2a, 0x3d, 0x0a, 0x0f, 0x49, 0x64, 0x6d, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x10, 0x02, 0x12, 0x07,
	0x0a, 0x03, 0x41, 0x63, 0x6c, 0x10, 0x03, 0x2a, 0x34, 0x0a, 0x16, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x01, 0x2a, 0x39, 0x0a,
	0x15, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x74, 0x61, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x55, 0x73, 0x65, 0x72, 0x10, 0x01, 0x2a, 0x7b, 0x0a, 0x0a, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x49, 0x64, 0x6c, 0x65, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x72, 0x75, 0x70, 0x74, 0x65, 0x64, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x6e, 0x79, 0x10, 0x06, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x51, 0x75, 0x65,
	0x75, 0x65, 0x64, 0x10, 0x08, 0x2a, 0x67, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x6f, 0x6e, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x52, 0x75, 0x6e, 0x4f, 0x6e,
	0x63, 0x65, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x6e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x07, 0x32, 0xd2,
	0x04, 0x0a, 0x0a, 0x4a, 0x6f, 0x62, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x35, 0x0a,
	0x06, 0x50, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x13, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x50,
	0x75, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6a,
	0x6f, 0x62, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x35, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x12, 0x13,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x12, 0x16, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x17, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x6f,
	0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x08, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x12, 0x15, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4a, 0x6f, 0x62, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x38, 0x0a, 0x07, 0x50, 0x75,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x42, 0x0a, 0x0d, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x12, 0x14, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x50, 0x75, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x50, 0x75, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x40, 0x0a, 0x09, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x16, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x44, 0x0a, 0x0b, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x12, 0x18, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x51, 0x0a, 0x10, 0x44, 0x65, 0x74, 0x65, 0x63, 0x74, 0x53, 0x74, 0x75, 0x63, 0x6b, 0x54,
	0x61, 0x73, 0x6b, 0x73, 0x12, 0x1d, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x75, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x44, 0x65, 0x74, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x75, 0x63, 0x6b, 0x54, 0x61, 0x73, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x32, 0x48, 0x0a, 0x0b, 0x54, 0x61, 0x73, 0x6b, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x12, 0x39, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x12, 0x11, 0x2e,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x1a, 0x19, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x2a, 0x5a,
	0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69,
	0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6a, 0x6f, 0x62, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_cells_jobs_proto_rawDescOnce sync.Once
	file_cells_jobs_proto_rawDescData = file_cells_jobs_proto_rawDesc
)

func file_cells_jobs_proto_rawDescGZIP() []byte {
	file_cells_jobs_proto_rawDescOnce.Do(func() {
		file_cells_jobs_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_jobs_proto_rawDescData)
	})
	return file_cells_jobs_proto_rawDescData
}

var file_cells_jobs_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_cells_jobs_proto_msgTypes = make([]protoimpl.MessageInfo, 50)
var file_cells_jobs_proto_goTypes = []interface{}{
	(IdmSelectorType)(0),             // 0: jobs.IdmSelectorType
	(DataSourceSelectorType)(0),      // 1: jobs.DataSourceSelectorType
	(ContextMetaFilterType)(0),       // 2: jobs.ContextMetaFilterType
	(TaskStatus)(0),                  // 3: jobs.TaskStatus
	(Command)(0),                     // 4: jobs.Command
	(*NodesSelector)(nil),            // 5: jobs.NodesSelector
	(*IdmSelector)(nil),              // 6: jobs.IdmSelector
	(*UsersSelector)(nil),            // 7: jobs.UsersSelector
	(*DataSourceSelector)(nil),       // 8: jobs.DataSourceSelector
	(*TriggerFilterQuery)(nil),       // 9: jobs.TriggerFilterQuery
	(*TriggerFilter)(nil),            // 10: jobs.TriggerFilter
	(*ActionOutputFilter)(nil),       // 11: jobs.ActionOutputFilter
	(*ContextMetaFilter)(nil),        // 12: jobs.ContextMetaFilter
	(*ContextMetaSingleQuery)(nil),   // 13: jobs.ContextMetaSingleQuery
	(*DataSelector)(nil),             // 14: jobs.DataSelector
	(*DataSelectorSingleQuery)(nil),  // 15: jobs.DataSelectorSingleQuery
	(*Schedule)(nil),                 // 16: jobs.Schedule
	(*Action)(nil),                   // 17: jobs.Action
	(*Job)(nil),                      // 18: jobs.Job
	(*JobHook)(nil),                  // 19: jobs.JobHook
	(*JobParameter)(nil),             // 20: jobs.JobParameter
	(*JobChangeEvent)(nil),           // 21: jobs.JobChangeEvent
	(*TaskChangeEvent)(nil),          // 22: jobs.TaskChangeEvent
	(*PutJobRequest)(nil),            // 23: jobs.PutJobRequest
	(*PutJobResponse)(nil),           // 24: jobs.PutJobResponse
	(*GetJobRequest)(nil),            // 25: jobs.GetJobRequest
	(*GetJobResponse)(nil),           // 26: jobs.GetJobResponse
	(*DeleteJobRequest)(nil),         // 27: jobs.DeleteJobRequest
	(*DeleteJobResponse)(nil),        // 28: jobs.DeleteJobResponse
	(*ListJobsRequest)(nil),          // 29: jobs.ListJobsRequest
	(*ListJobsResponse)(nil),         // 30: jobs.ListJobsResponse
	(*ListTasksRequest)(nil),         // 31: jobs.ListTasksRequest
	(*ListTasksResponse)(nil),        // 32: jobs.ListTasksResponse
	(*PutTaskRequest)(nil),           // 33: jobs.PutTaskRequest
	(*PutTaskResponse)(nil),          // 34: jobs.PutTaskResponse
	(*DeleteTasksRequest)(nil),       // 35: jobs.DeleteTasksRequest
	(*DeleteTasksResponse)(nil),      // 36: jobs.DeleteTasksResponse
	(*DetectStuckTasksRequest)(nil),  // 37: jobs.DetectStuckTasksRequest
	(*DetectStuckTasksResponse)(nil), // 38: jobs.DetectStuckTasksResponse
	(*Task)(nil),                     // 39: jobs.Task
	(*CtrlCommand)(nil),              // 40: jobs.CtrlCommand
	(*CtrlCommandResponse)(nil),      // 41: jobs.CtrlCommandResponse
	(*ActionLog)(nil),                // 42: jobs.ActionLog
	(*JobTriggerEvent)(nil),          // 43: jobs.JobTriggerEvent
	(*ActionOutput)(nil),             // 44: jobs.ActionOutput
	(*ActionOutputSingleQuery)(nil),  // 45: jobs.ActionOutputSingleQuery
	(*ActionMessage)(nil),            // 46: jobs.ActionMessage
	nil,                              // 47: jobs.Action.ParametersEntry
	nil,                              // 48: jobs.Job.MetadataEntry
	nil,                              // 49: jobs.Job.VersionMetaEntry
	nil,                              // 50: jobs.JobHook.PresetParametersEntry
	nil,                              // 51: jobs.JobHook.MetadataEntry
	nil,                              // 52: jobs.CtrlCommand.RunParametersEntry
	nil,                              // 53: jobs.JobTriggerEvent.RunParametersEntry
	nil,                              // 54: jobs.ActionOutput.VarsEntry
	(*service.Query)(nil),            // 55: service.Query
	(*idm.User)(nil),                 // 56: idm.User
	(*idm.PolicyCondition)(nil),      // 57: idm.PolicyCondition
	(*anypb.Any)(nil),                // 58: google.protobuf.Any
	(*service.ResourcePolicy)(nil),   // 59: service.ResourcePolicy
	(*tree.Node)(nil),                // 60: tree.Node
	(*idm.Role)(nil),                 // 61: idm.Role
	(*idm.Workspace)(nil),            // 62: idm.Workspace
	(*idm.ACL)(nil),                  // 63: idm.ACL
	(*activity.Object)(nil),          // 64: activity.Object
	(*object.DataSource)(nil),        // 65: object.DataSource
}
var file_cells_jobs_proto_depIdxs = []int32{
	55, // 0: jobs.NodesSelector.Query:type_name -> service.Query
	0,  // 1: jobs.IdmSelector.Type:type_name -> jobs.IdmSelectorType
	55, // 2: jobs.IdmSelector.Query:type_name -> service.Query
	56, // 3: jobs.UsersSelector.Users:type_name -> idm.User
	55, // 4: jobs.UsersSelector.Query:type_name -> service.Query
	1,  // 5: jobs.DataSourceSelector.Type:type_name -> jobs.DataSourceSelectorType
	55, // 6: jobs.DataSourceSelector.Query:type_name -> service.Query
	55, // 7: jobs.TriggerFilter.Query:type_name -> service.Query
	55, // 8: jobs.ActionOutputFilter.Query:type_name -> service.Query
	2,  // 9: jobs.ContextMetaFilter.Type:type_name -> jobs.ContextMetaFilterType
	55, // 10: jobs.ContextMetaFilter.Query:type_name -> service.Query
	57, // 11: jobs.ContextMetaSingleQuery.Condition:type_name -> idm.PolicyCondition
	55, // 12: jobs.DataSelector.Query:type_name -> service.Query
	5,  // 13: jobs.Action.NodesSelector:type_name -> jobs.NodesSelector
	5,  // 14: jobs.Action.NodesFilter:type_name -> jobs.NodesSelector
	7,  // 15: jobs.Action.UsersSelector:type_name -> jobs.UsersSelector
	7,  // 16: jobs.Action.UsersFilter:type_name -> jobs.UsersSelector
	6,  // 17: jobs.Action.IdmSelector:type_name -> jobs.IdmSelector
	6,  // 18: jobs.Action.IdmFilter:type_name -> jobs.IdmSelector
	8,  // 19: jobs.Action.DataSourceSelector:type_name -> jobs.DataSourceSelector
	8,  // 20: jobs.Action.DataSourceFilter:type_name -> jobs.DataSourceSelector
	11, // 21: jobs.Action.ActionOutputFilter:type_name -> jobs.ActionOutputFilter
	12, // 22: jobs.Action.ContextMetaFilter:type_name -> jobs.ContextMetaFilter
	10, // 23: jobs.Action.TriggerFilter:type_name -> jobs.TriggerFilter
	14, // 24: jobs.Action.DataSelector:type_name -> jobs.DataSelector
	14, // 25: jobs.Action.DataFilter:type_name -> jobs.DataSelector
	47, // 26: jobs.Action.Parameters:type_name -> jobs.Action.ParametersEntry
	17, // 27: jobs.Action.ChainedActions:type_name -> jobs.Action
	17, // 28: jobs.Action.FailedFilterActions:type_name -> jobs.Action
	17, // 29: jobs.Action.MergeAction:type_name -> jobs.Action
	48, // 30: jobs.Job.Metadata:type_name -> jobs.Job.MetadataEntry
	16, // 31: jobs.Job.Schedule:type_name -> jobs.Schedule
	17, // 32: jobs.Job.Actions:type_name -> jobs.Action
	17, // 33: jobs.Job.MergeAction:type_name -> jobs.Action
	39, // 34: jobs.Job.Tasks:type_name -> jobs.Task
	5,  // 35: jobs.Job.NodeEventFilter:type_name -> jobs.NodesSelector
	7,  // 36: jobs.Job.UserEventFilter:type_name -> jobs.UsersSelector
	6,  // 37: jobs.Job.IdmFilter:type_name -> jobs.IdmSelector
	12, // 38: jobs.Job.ContextMetaFilter:type_name -> jobs.ContextMetaFilter
	8,  // 39: jobs.Job.DataSourceFilter:type_name -> jobs.DataSourceSelector
	20, // 40: jobs.Job.Parameters:type_name -> jobs.JobParameter
	58, // 41: jobs.Job.ResourcesDependencies:type_name -> google.protobuf.Any
	49, // 42: jobs.Job.VersionMeta:type_name -> jobs.Job.VersionMetaEntry
	19, // 43: jobs.Job.Hooks:type_name -> jobs.JobHook
	50, // 44: jobs.JobHook.PresetParameters:type_name -> jobs.JobHook.PresetParametersEntry
	51, // 45: jobs.JobHook.Metadata:type_name -> jobs.JobHook.MetadataEntry
	59, // 46: jobs.JobHook.Policies:type_name -> service.ResourcePolicy
	18, // 47: jobs.JobChangeEvent.JobUpdated:type_name -> jobs.Job
	39, // 48: jobs.TaskChangeEvent.TaskUpdated:type_name -> jobs.Task
	18, // 49: jobs.TaskChangeEvent.Job:type_name -> jobs.Job
	18, // 50: jobs.PutJobRequest.Job:type_name -> jobs.Job
	18, // 51: jobs.PutJobResponse.Job:type_name -> jobs.Job
	3,  // 52: jobs.GetJobRequest.LoadTasks:type_name -> jobs.TaskStatus
	18, // 53: jobs.GetJobResponse.Job:type_name -> jobs.Job
	3,  // 54: jobs.ListJobsRequest.LoadTasks:type_name -> jobs.TaskStatus
	18, // 55: jobs.ListJobsResponse.Job:type_name -> jobs.Job
	3,  // 56: jobs.ListTasksRequest.Status:type_name -> jobs.TaskStatus
	39, // 57: jobs.ListTasksResponse.Task:type_name -> jobs.Task
	39, // 58: jobs.PutTaskRequest.Task:type_name -> jobs.Task
	39, // 59: jobs.PutTaskResponse.Task:type_name -> jobs.Task
	3,  // 60: jobs.DeleteTasksRequest.Status:type_name -> jobs.TaskStatus
	3,  // 61: jobs.Task.Status:type_name -> jobs.TaskStatus
	42, // 62: jobs.Task.ActionsLogs:type_name -> jobs.ActionLog
	4,  // 63: jobs.CtrlCommand.Cmd:type_name -> jobs.Command
	52, // 64: jobs.CtrlCommand.RunParameters:type_name -> jobs.CtrlCommand.RunParametersEntry
	17, // 65: jobs.ActionLog.Action:type_name -> jobs.Action
	46, // 66: jobs.ActionLog.InputMessage:type_name -> jobs.ActionMessage
	46, // 67: jobs.ActionLog.OutputMessage:type_name -> jobs.ActionMessage
	16, // 68: jobs.JobTriggerEvent.Schedule:type_name -> jobs.Schedule
	53, // 69: jobs.JobTriggerEvent.RunParameters:type_name -> jobs.JobTriggerEvent.RunParametersEntry
	46, // 70: jobs.JobTriggerEvent.TriggerMessage:type_name -> jobs.ActionMessage
	54, // 71: jobs.ActionOutput.Vars:type_name -> jobs.ActionOutput.VarsEntry
	58, // 72: jobs.ActionMessage.Event:type_name -> google.protobuf.Any
	60, // 73: jobs.ActionMessage.Nodes:type_name -> tree.Node
	56, // 74: jobs.ActionMessage.Users:type_name -> idm.User
	61, // 75: jobs.ActionMessage.Roles:type_name -> idm.Role
	62, // 76: jobs.ActionMessage.Workspaces:type_name -> idm.Workspace
	63, // 77: jobs.ActionMessage.Acls:type_name -> idm.ACL
	64, // 78: jobs.ActionMessage.Activities:type_name -> activity.Object
	65, // 79: jobs.ActionMessage.DataSources:type_name -> object.DataSource
	44, // 80: jobs.ActionMessage.OutputChain:type_name -> jobs.ActionOutput
	23, // 81: jobs.JobService.PutJob:input_type -> jobs.PutJobRequest
	25, // 82: jobs.JobService.GetJob:input_type -> jobs.GetJobRequest
	27, // 83: jobs.JobService.DeleteJob:input_type -> jobs.DeleteJobRequest
	29, // 84: jobs.JobService.ListJobs:input_type -> jobs.ListJobsRequest
	33, // 85: jobs.JobService.PutTask:input_type -> jobs.PutTaskRequest
	33, // 86: jobs.JobService.PutTaskStream:input_type -> jobs.PutTaskRequest
	31, // 87: jobs.JobService.ListTasks:input_type -> jobs.ListTasksRequest
	35, // 88: jobs.JobService.DeleteTasks:input_type -> jobs.DeleteTasksRequest
	37, // 89: jobs.JobService.DetectStuckTasks:input_type -> jobs.DetectStuckTasksRequest
	40, // 90: jobs.TaskService.Control:input_type -> jobs.CtrlCommand
	24, // 91: jobs.JobService.PutJob:output_type -> jobs.PutJobResponse
	26, // 92: jobs.JobService.GetJob:output_type -> jobs.GetJobResponse
	28, // 93: jobs.JobService.DeleteJob:output_type -> jobs.DeleteJobResponse
	30, // 94: jobs.JobService.ListJobs:output_type -> jobs.ListJobsResponse
	34, // 95: jobs.JobService.PutTask:output_type -> jobs.PutTaskResponse
	34, // 96: jobs.JobService.PutTaskStream:output_type -> jobs.PutTaskResponse
	32, // 97: jobs.JobService.ListTasks:output_type -> jobs.ListTasksResponse
	36, // 98: jobs.JobService.DeleteTasks:output_type -> jobs.DeleteTasksResponse
	38, // 99: jobs.JobService.DetectStuckTasks:output_type -> jobs.DetectStuckTasksResponse
	41, // 100: jobs.TaskService.Control:output_type -> jobs.CtrlCommandResponse
	91, // [91:101] is the sub-list for method output_type
	81, // [81:91] is the sub-list for method input_type
	81, // [81:81] is the sub-list for extension type_name
	81, // [81:81] is the sub-list for extension extendee
	0,  // [0:81] is the sub-list for field type_name
}

func init() { file_cells_jobs_proto_init() }
func file_cells_jobs_proto_init() {
	if File_cells_jobs_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_jobs_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodesSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdmSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UsersSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSourceSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerFilterQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TriggerFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionOutputFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextMetaFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContextMetaSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSelector); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataSelectorSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Job); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobHook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteJobResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListJobsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutTaskResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectStuckTasksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DetectStuckTasksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrlCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CtrlCommandResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionLog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JobTriggerEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionOutput); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionOutputSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_jobs_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_jobs_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   50,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cells_jobs_proto_goTypes,
		DependencyIndexes: file_cells_jobs_proto_depIdxs,
		EnumInfos:         file_cells_jobs_proto_enumTypes,
		MessageInfos:      file_cells_jobs_proto_msgTypes,
	}.Build()
	File_cells_jobs_proto = out.File
	file_cells_jobs_proto_rawDesc = nil
	file_cells_jobs_proto_goTypes = nil
	file_cells_jobs_proto_depIdxs = nil
}
