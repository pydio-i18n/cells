/*
 * Copyright (c) 2024 Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// This file is generated by protoc-gen-go-setter, do not edit manually

package jobs

import (
	"errors"
	"reflect"

	"github.com/pydio/cells/v5/common/proto/service"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/anypb"
)

type IAction interface {
	proto.Message
	ActionGetter
	ActionSetter
}

func NewIAction(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type ActionGetter interface {
	GetID() string
	GetLabel() string
	GetDescription() string
	GetBypass() bool
	GetBreakAfter() bool
	GetTimeout() string
	GetNodesSelector() *NodesSelector
	GetNodesFilter() *NodesSelector
	GetUsersSelector() *UsersSelector
	GetUsersFilter() *UsersSelector
	GetIdmSelector() *IdmSelector
	GetIdmFilter() *IdmSelector
	GetDataSourceSelector() *DataSourceSelector
	GetDataSourceFilter() *DataSourceSelector
	GetActionOutputFilter() *ActionOutputFilter
	GetContextMetaFilter() *ContextMetaFilter
	GetTriggerFilter() *TriggerFilter
	GetDataSelector() *DataSelector
	GetDataFilter() *DataSelector
	GetParameters() map[string]string
	GetChainedActions() []*Action
	GetFailedFilterActions() []*Action
	GetMergeAction() *Action
}

type ActionSetter interface {
	SetID(string)
	SetLabel(string)
	SetDescription(string)
	SetBypass(bool)
	SetBreakAfter(bool)
	SetTimeout(string)
	SetNodesSelector(*NodesSelector)
	SetNodesFilter(*NodesSelector)
	SetUsersSelector(*UsersSelector)
	SetUsersFilter(*UsersSelector)
	SetIdmSelector(*IdmSelector)
	SetIdmFilter(*IdmSelector)
	SetDataSourceSelector(*DataSourceSelector)
	SetDataSourceFilter(*DataSourceSelector)
	SetActionOutputFilter(*ActionOutputFilter)
	SetContextMetaFilter(*ContextMetaFilter)
	SetTriggerFilter(*TriggerFilter)
	SetDataSelector(*DataSelector)
	SetDataFilter(*DataSelector)
	SetParameters(map[string]string)
	SetChainedActions([]*Action)
	SetFailedFilterActions([]*Action)
	SetMergeAction(*Action)
}

func (x *Action) SetID(v string) {
	if x == nil {
		x = new(Action)
	}

	x.ID = v
}
func (x *Action) SetLabel(v string) {
	if x == nil {
		x = new(Action)
	}

	x.Label = v
}
func (x *Action) SetDescription(v string) {
	if x == nil {
		x = new(Action)
	}

	x.Description = v
}
func (x *Action) SetBypass(v bool) {
	if x == nil {
		x = new(Action)
	}

	x.Bypass = v
}
func (x *Action) SetBreakAfter(v bool) {
	if x == nil {
		x = new(Action)
	}

	x.BreakAfter = v
}
func (x *Action) SetTimeout(v string) {
	if x == nil {
		x = new(Action)
	}

	x.Timeout = v
}
func (x *Action) SetNodesSelector(v *NodesSelector) {
	if x == nil {
		x = new(Action)
	}

	x.NodesSelector = v
}
func (x *Action) SetNodesFilter(v *NodesSelector) {
	if x == nil {
		x = new(Action)
	}

	x.NodesFilter = v
}
func (x *Action) SetUsersSelector(v *UsersSelector) {
	if x == nil {
		x = new(Action)
	}

	x.UsersSelector = v
}
func (x *Action) SetUsersFilter(v *UsersSelector) {
	if x == nil {
		x = new(Action)
	}

	x.UsersFilter = v
}
func (x *Action) SetIdmSelector(v *IdmSelector) {
	if x == nil {
		x = new(Action)
	}

	x.IdmSelector = v
}
func (x *Action) SetIdmFilter(v *IdmSelector) {
	if x == nil {
		x = new(Action)
	}

	x.IdmFilter = v
}
func (x *Action) SetDataSourceSelector(v *DataSourceSelector) {
	if x == nil {
		x = new(Action)
	}

	x.DataSourceSelector = v
}
func (x *Action) SetDataSourceFilter(v *DataSourceSelector) {
	if x == nil {
		x = new(Action)
	}

	x.DataSourceFilter = v
}
func (x *Action) SetActionOutputFilter(v *ActionOutputFilter) {
	if x == nil {
		x = new(Action)
	}

	x.ActionOutputFilter = v
}
func (x *Action) SetContextMetaFilter(v *ContextMetaFilter) {
	if x == nil {
		x = new(Action)
	}

	x.ContextMetaFilter = v
}
func (x *Action) SetTriggerFilter(v *TriggerFilter) {
	if x == nil {
		x = new(Action)
	}

	x.TriggerFilter = v
}
func (x *Action) SetDataSelector(v *DataSelector) {
	if x == nil {
		x = new(Action)
	}

	x.DataSelector = v
}
func (x *Action) SetDataFilter(v *DataSelector) {
	if x == nil {
		x = new(Action)
	}

	x.DataFilter = v
}
func (x *Action) SetParameters(v map[string]string) {
	if x == nil {
		x = new(Action)
	}

	x.Parameters = v
}
func (x *Action) SetChainedActions(v []*Action) {
	if x == nil {
		x = new(Action)
	}

	x.ChainedActions = v
}
func (x *Action) SetFailedFilterActions(v []*Action) {
	if x == nil {
		x = new(Action)
	}

	x.FailedFilterActions = v
}
func (x *Action) SetMergeAction(v *Action) {
	if x == nil {
		x = new(Action)
	}

	x.MergeAction = v
}

type IJob interface {
	proto.Message
	JobGetter
	JobSetter
}

func NewIJob(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type JobGetter interface {
	GetID() string
	GetLabel() string
	GetOwner() string
	GetMetadata() map[string]string
	GetCreatedAt() int32
	GetModifiedAt() int32
	GetInactive() bool
	GetCustom() bool
	GetLanguages() []string
	GetEventNames() []string
	GetSchedule() *Schedule
	GetAutoStart() bool
	GetAutoRestart() bool
	GetAutoClean() bool
	GetActions() []*Action
	GetMergeAction() *Action
	GetMaxConcurrency() int32
	GetTasksSilentUpdate() bool
	GetTasks() []*Task
	GetNodeEventFilter() *NodesSelector
	GetUserEventFilter() *UsersSelector
	GetIdmFilter() *IdmSelector
	GetContextMetaFilter() *ContextMetaFilter
	GetDataSourceFilter() *DataSourceSelector
	GetParameters() []*JobParameter
	GetResourcesDependencies() []*anypb.Any
	GetTimeout() string
	GetVersionMeta() map[string]string
	GetHooks() []*JobHook
}

type JobSetter interface {
	SetID(string)
	SetLabel(string)
	SetOwner(string)
	SetMetadata(map[string]string)
	SetCreatedAt(int32)
	SetModifiedAt(int32)
	SetInactive(bool)
	SetCustom(bool)
	SetLanguages([]string)
	SetEventNames([]string)
	SetSchedule(*Schedule)
	SetAutoStart(bool)
	SetAutoRestart(bool)
	SetAutoClean(bool)
	SetActions([]*Action)
	SetMergeAction(*Action)
	SetMaxConcurrency(int32)
	SetTasksSilentUpdate(bool)
	SetTasks([]*Task)
	SetNodeEventFilter(*NodesSelector)
	SetUserEventFilter(*UsersSelector)
	SetIdmFilter(*IdmSelector)
	SetContextMetaFilter(*ContextMetaFilter)
	SetDataSourceFilter(*DataSourceSelector)
	SetParameters([]*JobParameter)
	SetResourcesDependencies([]*anypb.Any)
	SetTimeout(string)
	SetVersionMeta(map[string]string)
	SetHooks([]*JobHook)
}

func (x *Job) SetID(v string) {
	if x == nil {
		x = new(Job)
	}

	x.ID = v
}
func (x *Job) SetLabel(v string) {
	if x == nil {
		x = new(Job)
	}

	x.Label = v
}
func (x *Job) SetOwner(v string) {
	if x == nil {
		x = new(Job)
	}

	x.Owner = v
}
func (x *Job) SetMetadata(v map[string]string) {
	if x == nil {
		x = new(Job)
	}

	x.Metadata = v
}
func (x *Job) SetCreatedAt(v int32) {
	if x == nil {
		x = new(Job)
	}

	x.CreatedAt = v
}
func (x *Job) SetModifiedAt(v int32) {
	if x == nil {
		x = new(Job)
	}

	x.ModifiedAt = v
}
func (x *Job) SetInactive(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.Inactive = v
}
func (x *Job) SetCustom(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.Custom = v
}
func (x *Job) SetLanguages(v []string) {
	if x == nil {
		x = new(Job)
	}

	x.Languages = v
}
func (x *Job) SetEventNames(v []string) {
	if x == nil {
		x = new(Job)
	}

	x.EventNames = v
}
func (x *Job) SetSchedule(v *Schedule) {
	if x == nil {
		x = new(Job)
	}

	x.Schedule = v
}
func (x *Job) SetAutoStart(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.AutoStart = v
}
func (x *Job) SetAutoRestart(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.AutoRestart = v
}
func (x *Job) SetAutoClean(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.AutoClean = v
}
func (x *Job) SetActions(v []*Action) {
	if x == nil {
		x = new(Job)
	}

	x.Actions = v
}
func (x *Job) SetMergeAction(v *Action) {
	if x == nil {
		x = new(Job)
	}

	x.MergeAction = v
}
func (x *Job) SetMaxConcurrency(v int32) {
	if x == nil {
		x = new(Job)
	}

	x.MaxConcurrency = v
}
func (x *Job) SetTasksSilentUpdate(v bool) {
	if x == nil {
		x = new(Job)
	}

	x.TasksSilentUpdate = v
}
func (x *Job) SetTasks(v []*Task) {
	if x == nil {
		x = new(Job)
	}

	x.Tasks = v
}
func (x *Job) SetNodeEventFilter(v *NodesSelector) {
	if x == nil {
		x = new(Job)
	}

	x.NodeEventFilter = v
}
func (x *Job) SetUserEventFilter(v *UsersSelector) {
	if x == nil {
		x = new(Job)
	}

	x.UserEventFilter = v
}
func (x *Job) SetIdmFilter(v *IdmSelector) {
	if x == nil {
		x = new(Job)
	}

	x.IdmFilter = v
}
func (x *Job) SetContextMetaFilter(v *ContextMetaFilter) {
	if x == nil {
		x = new(Job)
	}

	x.ContextMetaFilter = v
}
func (x *Job) SetDataSourceFilter(v *DataSourceSelector) {
	if x == nil {
		x = new(Job)
	}

	x.DataSourceFilter = v
}
func (x *Job) SetParameters(v []*JobParameter) {
	if x == nil {
		x = new(Job)
	}

	x.Parameters = v
}
func (x *Job) SetResourcesDependencies(v []*anypb.Any) {
	if x == nil {
		x = new(Job)
	}

	x.ResourcesDependencies = v
}
func (x *Job) SetTimeout(v string) {
	if x == nil {
		x = new(Job)
	}

	x.Timeout = v
}
func (x *Job) SetVersionMeta(v map[string]string) {
	if x == nil {
		x = new(Job)
	}

	x.VersionMeta = v
}
func (x *Job) SetHooks(v []*JobHook) {
	if x == nil {
		x = new(Job)
	}

	x.Hooks = v
}

type IJobHook interface {
	proto.Message
	JobHookGetter
	JobHookSetter
}

func NewIJobHook(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type JobHookGetter interface {
	GetApiSlug() string
	GetPresetParameters() map[string]string
	GetAllowOverridePresets() bool
	GetMetadata() map[string]string
	GetPolicies() []*service.ResourcePolicy
}

type JobHookSetter interface {
	SetApiSlug(string)
	SetPresetParameters(map[string]string)
	SetAllowOverridePresets(bool)
	SetMetadata(map[string]string)
	SetPolicies([]*service.ResourcePolicy)
}

func (x *JobHook) SetApiSlug(v string) {
	if x == nil {
		x = new(JobHook)
	}

	x.ApiSlug = v
}
func (x *JobHook) SetPresetParameters(v map[string]string) {
	if x == nil {
		x = new(JobHook)
	}

	x.PresetParameters = v
}
func (x *JobHook) SetAllowOverridePresets(v bool) {
	if x == nil {
		x = new(JobHook)
	}

	x.AllowOverridePresets = v
}
func (x *JobHook) SetMetadata(v map[string]string) {
	if x == nil {
		x = new(JobHook)
	}

	x.Metadata = v
}
func (x *JobHook) SetPolicies(v []*service.ResourcePolicy) {
	if x == nil {
		x = new(JobHook)
	}

	x.Policies = v
}

type IJobParameter interface {
	proto.Message
	JobParameterGetter
	JobParameterSetter
}

func NewIJobParameter(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type JobParameterGetter interface {
	GetName() string
	GetDescription() string
	GetValue() string
	GetMandatory() bool
	GetType() string
	GetJsonChoices() string
}

type JobParameterSetter interface {
	SetName(string)
	SetDescription(string)
	SetValue(string)
	SetMandatory(bool)
	SetType(string)
	SetJsonChoices(string)
}

func (x *JobParameter) SetName(v string) {
	if x == nil {
		x = new(JobParameter)
	}

	x.Name = v
}
func (x *JobParameter) SetDescription(v string) {
	if x == nil {
		x = new(JobParameter)
	}

	x.Description = v
}
func (x *JobParameter) SetValue(v string) {
	if x == nil {
		x = new(JobParameter)
	}

	x.Value = v
}
func (x *JobParameter) SetMandatory(v bool) {
	if x == nil {
		x = new(JobParameter)
	}

	x.Mandatory = v
}
func (x *JobParameter) SetType(v string) {
	if x == nil {
		x = new(JobParameter)
	}

	x.Type = v
}
func (x *JobParameter) SetJsonChoices(v string) {
	if x == nil {
		x = new(JobParameter)
	}

	x.JsonChoices = v
}
