// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cells-idm.proto

package idm

import (
	fmt "fmt"
	math "math"
	proto "google.golang.org/protobuf/proto"
	_ "github.com/pydio/cells/v4/common/proto/service"
	_ "github.com/pydio/cells/v4/common/proto/tree"
	_ "github.com/mwitkow/go-proto-validators"
	github_com_mwitkow_go_proto_validators "github.com/mwitkow/go-proto-validators"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

func (this *CreateRoleRequest) Validate() error {
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *CreateRoleResponse) Validate() error {
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *DeleteRoleRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *DeleteRoleResponse) Validate() error {
	return nil
}
func (this *SearchRoleRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *SearchRoleResponse) Validate() error {
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	return nil
}
func (this *CountRoleResponse) Validate() error {
	return nil
}
func (this *Role) Validate() error {
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	return nil
}
func (this *RoleSingleQuery) Validate() error {
	return nil
}
func (this *CreateUserRequest) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *CreateUserResponse) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *BindUserRequest) Validate() error {
	return nil
}
func (this *BindUserResponse) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *DeleteUserRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *DeleteUserResponse) Validate() error {
	return nil
}
func (this *SearchUserRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *SearchUserResponse) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	return nil
}
func (this *CountUserResponse) Validate() error {
	return nil
}
func (this *User) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	for _, item := range this.Roles {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Roles", err)
			}
		}
	}
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	return nil
}
func (this *UserSingleQuery) Validate() error {
	return nil
}
func (this *CreateWorkspaceRequest) Validate() error {
	if this.Workspace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Workspace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Workspace", err)
		}
	}
	return nil
}
func (this *CreateWorkspaceResponse) Validate() error {
	if this.Workspace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Workspace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Workspace", err)
		}
	}
	return nil
}
func (this *DeleteWorkspaceRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *DeleteWorkspaceResponse) Validate() error {
	return nil
}
func (this *SearchWorkspaceRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *SearchWorkspaceResponse) Validate() error {
	if this.Workspace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Workspace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Workspace", err)
		}
	}
	return nil
}
func (this *Workspace) Validate() error {
	if !(len(this.Label) < 500) {
		return github_com_mwitkow_go_proto_validators.FieldError("Label", fmt.Errorf(`value '%v' must have a length smaller than '500'`, this.Label))
	}
	if !(len(this.Description) < 1000) {
		return github_com_mwitkow_go_proto_validators.FieldError("Description", fmt.Errorf(`value '%v' must have a length smaller than '1000'`, this.Description))
	}
	if !(len(this.Slug) < 500) {
		return github_com_mwitkow_go_proto_validators.FieldError("Slug", fmt.Errorf(`value '%v' must have a length smaller than '500'`, this.Slug))
	}
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *WorkspaceSingleQuery) Validate() error {
	return nil
}
func (this *CreateACLRequest) Validate() error {
	if this.ACL != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ACL); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ACL", err)
		}
	}
	return nil
}
func (this *CreateACLResponse) Validate() error {
	if this.ACL != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ACL); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ACL", err)
		}
	}
	return nil
}
func (this *ExpireACLRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *ExpireACLResponse) Validate() error {
	return nil
}
func (this *DeleteACLRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *DeleteACLResponse) Validate() error {
	return nil
}
func (this *SearchACLRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *SearchACLResponse) Validate() error {
	if this.ACL != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ACL); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ACL", err)
		}
	}
	return nil
}
func (this *RestoreACLRequest) Validate() error {
	if this.Query != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Query); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Query", err)
		}
	}
	return nil
}
func (this *RestoreACLResponse) Validate() error {
	return nil
}
func (this *ACLAction) Validate() error {
	return nil
}
func (this *ACL) Validate() error {
	if this.Action != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Action); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Action", err)
		}
	}
	return nil
}
func (this *ACLSingleQuery) Validate() error {
	for _, item := range this.Actions {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Actions", err)
			}
		}
	}
	return nil
}
func (this *UserMeta) Validate() error {
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	if this.ResolvedNode != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ResolvedNode); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ResolvedNode", err)
		}
	}
	return nil
}
func (this *UserMetaNamespace) Validate() error {
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	return nil
}
func (this *UpdateUserMetaRequest) Validate() error {
	for _, item := range this.MetaDatas {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("MetaDatas", err)
			}
		}
	}
	return nil
}
func (this *UpdateUserMetaResponse) Validate() error {
	for _, item := range this.MetaDatas {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("MetaDatas", err)
			}
		}
	}
	return nil
}
func (this *SearchUserMetaRequest) Validate() error {
	if this.ResourceQuery != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.ResourceQuery); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("ResourceQuery", err)
		}
	}
	return nil
}
func (this *SearchUserMetaResponse) Validate() error {
	if this.UserMeta != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UserMeta); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UserMeta", err)
		}
	}
	return nil
}
func (this *UpdateUserMetaNamespaceRequest) Validate() error {
	for _, item := range this.Namespaces {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Namespaces", err)
			}
		}
	}
	return nil
}
func (this *UpdateUserMetaNamespaceResponse) Validate() error {
	for _, item := range this.Namespaces {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Namespaces", err)
			}
		}
	}
	return nil
}
func (this *ListUserMetaNamespaceRequest) Validate() error {
	return nil
}
func (this *ListUserMetaNamespaceResponse) Validate() error {
	if this.UserMetaNamespace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.UserMetaNamespace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("UserMetaNamespace", err)
		}
	}
	return nil
}
func (this *ChangeEvent) Validate() error {
	if this.User != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.User); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("User", err)
		}
	}
	if this.Role != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Role); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Role", err)
		}
	}
	if this.Workspace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Workspace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Workspace", err)
		}
	}
	if this.Acl != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.Acl); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("Acl", err)
		}
	}
	if this.MetaNamespace != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.MetaNamespace); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("MetaNamespace", err)
		}
	}
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *PolicyEngineRequest) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *PolicyEngineResponse) Validate() error {
	return nil
}
func (this *PolicyCondition) Validate() error {
	return nil
}
func (this *Policy) Validate() error {
	// Validation of proto3 map<> fields is unsupported.
	return nil
}
func (this *PolicyGroup) Validate() error {
	for _, item := range this.Policies {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("Policies", err)
			}
		}
	}
	return nil
}
func (this *StorePolicyGroupRequest) Validate() error {
	if this.PolicyGroup != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PolicyGroup); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PolicyGroup", err)
		}
	}
	return nil
}
func (this *StorePolicyGroupResponse) Validate() error {
	if this.PolicyGroup != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PolicyGroup); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PolicyGroup", err)
		}
	}
	return nil
}
func (this *DeletePolicyGroupRequest) Validate() error {
	if this.PolicyGroup != nil {
		if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(this.PolicyGroup); err != nil {
			return github_com_mwitkow_go_proto_validators.FieldError("PolicyGroup", err)
		}
	}
	return nil
}
func (this *DeletePolicyGroupResponse) Validate() error {
	return nil
}
func (this *ListPolicyGroupsRequest) Validate() error {
	return nil
}
func (this *ListPolicyGroupsResponse) Validate() error {
	for _, item := range this.PolicyGroups {
		if item != nil {
			if err := github_com_mwitkow_go_proto_validators.CallValidatorIfExists(item); err != nil {
				return github_com_mwitkow_go_proto_validators.FieldError("PolicyGroups", err)
			}
		}
	}
	return nil
}
