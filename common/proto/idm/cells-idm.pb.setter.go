/*
 * Copyright (c) 2024 Abstrium SAS <team (at) pydio.com>
 * This file is part of Pydio Cells.
 *
 * Pydio Cells is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Pydio Cells is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Pydio Cells.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <https://pydio.com>.
 */

// This file is generated by protoc-gen-go-setter, do not edit manually

package idm

import (
	"errors"
	"reflect"

	"google.golang.org/protobuf/proto"
)

type IPolicySubject interface {
	proto.Message
	PolicySubjectGetter
	PolicySubjectSetter
}

func NewIPolicySubject(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type PolicySubjectGetter interface {
	GetID() string
	GetHasRegex() bool
	GetCompiled() string
	GetTemplate() string
}

type PolicySubjectSetter interface {
	SetID(string)
	SetHasRegex(bool)
	SetCompiled(string)
	SetTemplate(string)
}

func (x *PolicySubject) SetID(v string) {
	if x == nil {
		x = new(PolicySubject)
	}

	x.ID = v
}
func (x *PolicySubject) SetHasRegex(v bool) {
	if x == nil {
		x = new(PolicySubject)
	}

	x.HasRegex = v
}
func (x *PolicySubject) SetCompiled(v string) {
	if x == nil {
		x = new(PolicySubject)
	}

	x.Compiled = v
}
func (x *PolicySubject) SetTemplate(v string) {
	if x == nil {
		x = new(PolicySubject)
	}

	x.Template = v
}

type IPolicyResource interface {
	proto.Message
	PolicyResourceGetter
	PolicyResourceSetter
}

func NewIPolicyResource(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type PolicyResourceGetter interface {
	GetID() string
	GetHasRegex() bool
	GetCompiled() string
	GetTemplate() string
}

type PolicyResourceSetter interface {
	SetID(string)
	SetHasRegex(bool)
	SetCompiled(string)
	SetTemplate(string)
}

func (x *PolicyResource) SetID(v string) {
	if x == nil {
		x = new(PolicyResource)
	}

	x.ID = v
}
func (x *PolicyResource) SetHasRegex(v bool) {
	if x == nil {
		x = new(PolicyResource)
	}

	x.HasRegex = v
}
func (x *PolicyResource) SetCompiled(v string) {
	if x == nil {
		x = new(PolicyResource)
	}

	x.Compiled = v
}
func (x *PolicyResource) SetTemplate(v string) {
	if x == nil {
		x = new(PolicyResource)
	}

	x.Template = v
}

type IPolicyAction interface {
	proto.Message
	PolicyActionGetter
	PolicyActionSetter
}

func NewIPolicyAction(x any) error {
	v := reflect.ValueOf(x)
	for v.Kind() == reflect.Ptr {
		if v.IsNil() && v.CanAddr() {
			v.Set(reflect.New(v.Type().Elem()))
		}

		v = v.Elem()
	}
	if !v.IsValid() {
		return errors.New("not initialized")
	}
	return nil
}

type PolicyActionGetter interface {
	GetID() string
	GetHasRegex() bool
	GetCompiled() string
	GetTemplate() string
}

type PolicyActionSetter interface {
	SetID(string)
	SetHasRegex(bool)
	SetCompiled(string)
	SetTemplate(string)
}

func (x *PolicyAction) SetID(v string) {
	if x == nil {
		x = new(PolicyAction)
	}

	x.ID = v
}
func (x *PolicyAction) SetHasRegex(v bool) {
	if x == nil {
		x = new(PolicyAction)
	}

	x.HasRegex = v
}
func (x *PolicyAction) SetCompiled(v string) {
	if x == nil {
		x = new(PolicyAction)
	}

	x.Compiled = v
}
func (x *PolicyAction) SetTemplate(v string) {
	if x == nil {
		x = new(PolicyAction)
	}

	x.Template = v
}
