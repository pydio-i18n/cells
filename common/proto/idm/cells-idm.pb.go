// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: cells-idm.proto

package idm

import (
	_ "github.com/mwitkow/go-proto-validators"
	service "github.com/pydio/cells/v4/common/proto/service"
	tree "github.com/pydio/cells/v4/common/proto/tree"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NodeType int32

const (
	NodeType_UNKNOWN NodeType = 0
	NodeType_USER    NodeType = 1
	NodeType_GROUP   NodeType = 2
)

// Enum value maps for NodeType.
var (
	NodeType_name = map[int32]string{
		0: "UNKNOWN",
		1: "USER",
		2: "GROUP",
	}
	NodeType_value = map[string]int32{
		"UNKNOWN": 0,
		"USER":    1,
		"GROUP":   2,
	}
)

func (x NodeType) Enum() *NodeType {
	p := new(NodeType)
	*p = x
	return p
}

func (x NodeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[0].Descriptor()
}

func (NodeType) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[0]
}

func (x NodeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeType.Descriptor instead.
func (NodeType) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{0}
}

type WorkspaceScope int32

const (
	WorkspaceScope_ANY   WorkspaceScope = 0
	WorkspaceScope_ADMIN WorkspaceScope = 1
	WorkspaceScope_ROOM  WorkspaceScope = 2
	WorkspaceScope_LINK  WorkspaceScope = 3
)

// Enum value maps for WorkspaceScope.
var (
	WorkspaceScope_name = map[int32]string{
		0: "ANY",
		1: "ADMIN",
		2: "ROOM",
		3: "LINK",
	}
	WorkspaceScope_value = map[string]int32{
		"ANY":   0,
		"ADMIN": 1,
		"ROOM":  2,
		"LINK":  3,
	}
)

func (x WorkspaceScope) Enum() *WorkspaceScope {
	p := new(WorkspaceScope)
	*p = x
	return p
}

func (x WorkspaceScope) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (WorkspaceScope) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[1].Descriptor()
}

func (WorkspaceScope) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[1]
}

func (x WorkspaceScope) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use WorkspaceScope.Descriptor instead.
func (WorkspaceScope) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{1}
}

// Message Types for ChangeEvent
type ChangeEventType int32

const (
	ChangeEventType_CREATE ChangeEventType = 0
	ChangeEventType_READ   ChangeEventType = 1
	ChangeEventType_UPDATE ChangeEventType = 2
	ChangeEventType_DELETE ChangeEventType = 3
	ChangeEventType_LOGIN  ChangeEventType = 4
	ChangeEventType_LOGOUT ChangeEventType = 5
)

// Enum value maps for ChangeEventType.
var (
	ChangeEventType_name = map[int32]string{
		0: "CREATE",
		1: "READ",
		2: "UPDATE",
		3: "DELETE",
		4: "LOGIN",
		5: "LOGOUT",
	}
	ChangeEventType_value = map[string]int32{
		"CREATE": 0,
		"READ":   1,
		"UPDATE": 2,
		"DELETE": 3,
		"LOGIN":  4,
		"LOGOUT": 5,
	}
)

func (x ChangeEventType) Enum() *ChangeEventType {
	p := new(ChangeEventType)
	*p = x
	return p
}

func (x ChangeEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChangeEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[2].Descriptor()
}

func (ChangeEventType) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[2]
}

func (x ChangeEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChangeEventType.Descriptor instead.
func (ChangeEventType) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{2}
}

type PolicyEffect int32

const (
	PolicyEffect_unknown PolicyEffect = 0
	PolicyEffect_deny    PolicyEffect = 1
	PolicyEffect_allow   PolicyEffect = 2
)

// Enum value maps for PolicyEffect.
var (
	PolicyEffect_name = map[int32]string{
		0: "unknown",
		1: "deny",
		2: "allow",
	}
	PolicyEffect_value = map[string]int32{
		"unknown": 0,
		"deny":    1,
		"allow":   2,
	}
)

func (x PolicyEffect) Enum() *PolicyEffect {
	p := new(PolicyEffect)
	*p = x
	return p
}

func (x PolicyEffect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyEffect) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[3].Descriptor()
}

func (PolicyEffect) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[3]
}

func (x PolicyEffect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyEffect.Descriptor instead.
func (PolicyEffect) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{3}
}

type PolicyResourceGroup int32

const (
	PolicyResourceGroup_rest PolicyResourceGroup = 0
	PolicyResourceGroup_acl  PolicyResourceGroup = 1
	PolicyResourceGroup_oidc PolicyResourceGroup = 2
)

// Enum value maps for PolicyResourceGroup.
var (
	PolicyResourceGroup_name = map[int32]string{
		0: "rest",
		1: "acl",
		2: "oidc",
	}
	PolicyResourceGroup_value = map[string]int32{
		"rest": 0,
		"acl":  1,
		"oidc": 2,
	}
)

func (x PolicyResourceGroup) Enum() *PolicyResourceGroup {
	p := new(PolicyResourceGroup)
	*p = x
	return p
}

func (x PolicyResourceGroup) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PolicyResourceGroup) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[4].Descriptor()
}

func (PolicyResourceGroup) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[4]
}

func (x PolicyResourceGroup) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PolicyResourceGroup.Descriptor instead.
func (PolicyResourceGroup) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{4}
}

type UpdateUserMetaRequest_UserMetaOp int32

const (
	UpdateUserMetaRequest_PUT    UpdateUserMetaRequest_UserMetaOp = 0
	UpdateUserMetaRequest_DELETE UpdateUserMetaRequest_UserMetaOp = 1
)

// Enum value maps for UpdateUserMetaRequest_UserMetaOp.
var (
	UpdateUserMetaRequest_UserMetaOp_name = map[int32]string{
		0: "PUT",
		1: "DELETE",
	}
	UpdateUserMetaRequest_UserMetaOp_value = map[string]int32{
		"PUT":    0,
		"DELETE": 1,
	}
)

func (x UpdateUserMetaRequest_UserMetaOp) Enum() *UpdateUserMetaRequest_UserMetaOp {
	p := new(UpdateUserMetaRequest_UserMetaOp)
	*p = x
	return p
}

func (x UpdateUserMetaRequest_UserMetaOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateUserMetaRequest_UserMetaOp) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[5].Descriptor()
}

func (UpdateUserMetaRequest_UserMetaOp) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[5]
}

func (x UpdateUserMetaRequest_UserMetaOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateUserMetaRequest_UserMetaOp.Descriptor instead.
func (UpdateUserMetaRequest_UserMetaOp) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{43, 0}
}

type UpdateUserMetaNamespaceRequest_UserMetaNsOp int32

const (
	UpdateUserMetaNamespaceRequest_PUT    UpdateUserMetaNamespaceRequest_UserMetaNsOp = 0
	UpdateUserMetaNamespaceRequest_DELETE UpdateUserMetaNamespaceRequest_UserMetaNsOp = 1
)

// Enum value maps for UpdateUserMetaNamespaceRequest_UserMetaNsOp.
var (
	UpdateUserMetaNamespaceRequest_UserMetaNsOp_name = map[int32]string{
		0: "PUT",
		1: "DELETE",
	}
	UpdateUserMetaNamespaceRequest_UserMetaNsOp_value = map[string]int32{
		"PUT":    0,
		"DELETE": 1,
	}
)

func (x UpdateUserMetaNamespaceRequest_UserMetaNsOp) Enum() *UpdateUserMetaNamespaceRequest_UserMetaNsOp {
	p := new(UpdateUserMetaNamespaceRequest_UserMetaNsOp)
	*p = x
	return p
}

func (x UpdateUserMetaNamespaceRequest_UserMetaNsOp) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UpdateUserMetaNamespaceRequest_UserMetaNsOp) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_idm_proto_enumTypes[6].Descriptor()
}

func (UpdateUserMetaNamespaceRequest_UserMetaNsOp) Type() protoreflect.EnumType {
	return &file_cells_idm_proto_enumTypes[6]
}

func (x UpdateUserMetaNamespaceRequest_UserMetaNsOp) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UpdateUserMetaNamespaceRequest_UserMetaNsOp.Descriptor instead.
func (UpdateUserMetaNamespaceRequest_UserMetaNsOp) EnumDescriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{47, 0}
}

// *****************************************************************************
//
//	Messages structure
//
// *****************************************************************************
type CreateRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *Role `protobuf:"bytes,1,opt,name=Role,proto3" json:"Role,omitempty"`
}

func (x *CreateRoleRequest) Reset() {
	*x = CreateRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleRequest) ProtoMessage() {}

func (x *CreateRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleRequest.ProtoReflect.Descriptor instead.
func (*CreateRoleRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{0}
}

func (x *CreateRoleRequest) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type CreateRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *Role `protobuf:"bytes,1,opt,name=Role,proto3" json:"Role,omitempty"`
}

func (x *CreateRoleResponse) Reset() {
	*x = CreateRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRoleResponse) ProtoMessage() {}

func (x *CreateRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRoleResponse.ProtoReflect.Descriptor instead.
func (*CreateRoleResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{1}
}

func (x *CreateRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type DeleteRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *DeleteRoleRequest) Reset() {
	*x = DeleteRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleRequest) ProtoMessage() {}

func (x *DeleteRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleRequest.ProtoReflect.Descriptor instead.
func (*DeleteRoleRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{2}
}

func (x *DeleteRoleRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type DeleteRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted,proto3" json:"RowsDeleted,omitempty"`
}

func (x *DeleteRoleResponse) Reset() {
	*x = DeleteRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRoleResponse) ProtoMessage() {}

func (x *DeleteRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRoleResponse.ProtoReflect.Descriptor instead.
func (*DeleteRoleResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{3}
}

func (x *DeleteRoleResponse) GetRowsDeleted() int64 {
	if x != nil {
		return x.RowsDeleted
	}
	return 0
}

type SearchRoleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *SearchRoleRequest) Reset() {
	*x = SearchRoleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRoleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRoleRequest) ProtoMessage() {}

func (x *SearchRoleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRoleRequest.ProtoReflect.Descriptor instead.
func (*SearchRoleRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{4}
}

func (x *SearchRoleRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type SearchRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Role *Role `protobuf:"bytes,1,opt,name=Role,proto3" json:"Role,omitempty"`
}

func (x *SearchRoleResponse) Reset() {
	*x = SearchRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchRoleResponse) ProtoMessage() {}

func (x *SearchRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchRoleResponse.ProtoReflect.Descriptor instead.
func (*SearchRoleResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{5}
}

func (x *SearchRoleResponse) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

type CountRoleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *CountRoleResponse) Reset() {
	*x = CountRoleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountRoleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountRoleResponse) ProtoMessage() {}

func (x *CountRoleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountRoleResponse.ProtoReflect.Descriptor instead.
func (*CountRoleResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{6}
}

func (x *CountRoleResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Role represents a generic set of permissions that can be applied to any users or groups.
type Role struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of this role
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Label of this role
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Whether this role represents a user team or not
	IsTeam bool `protobuf:"varint,3,opt,name=IsTeam,proto3" json:"IsTeam,omitempty"`
	// Whether this role is attached to a Group object
	GroupRole bool `protobuf:"varint,4,opt,name=GroupRole,proto3" json:"GroupRole,omitempty"`
	// Whether this role is attached to a User object
	UserRole bool `protobuf:"varint,5,opt,name=UserRole,proto3" json:"UserRole,omitempty"`
	// Last modification date of the role
	LastUpdated int32 `protobuf:"varint,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	// List of profiles (standard, shared, admin) on which the role will be automatically applied
	AutoApplies []string `protobuf:"bytes,7,rep,name=AutoApplies,proto3" json:"AutoApplies,omitempty"`
	// List of policies for securing this role access
	Policies []*service.ResourcePolicy `protobuf:"bytes,8,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Whether the policies resolve into an editable state
	PoliciesContextEditable bool `protobuf:"varint,9,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
	// Is used in a stack of roles, this one will always be applied last.
	ForceOverride bool `protobuf:"varint,10,opt,name=ForceOverride,proto3" json:"ForceOverride,omitempty"`
}

func (x *Role) Reset() {
	*x = Role{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Role) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Role) ProtoMessage() {}

func (x *Role) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Role.ProtoReflect.Descriptor instead.
func (*Role) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{7}
}

func (x *Role) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Role) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Role) GetIsTeam() bool {
	if x != nil {
		return x.IsTeam
	}
	return false
}

func (x *Role) GetGroupRole() bool {
	if x != nil {
		return x.GroupRole
	}
	return false
}

func (x *Role) GetUserRole() bool {
	if x != nil {
		return x.UserRole
	}
	return false
}

func (x *Role) GetLastUpdated() int32 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Role) GetAutoApplies() []string {
	if x != nil {
		return x.AutoApplies
	}
	return nil
}

func (x *Role) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Role) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

func (x *Role) GetForceOverride() bool {
	if x != nil {
		return x.ForceOverride
	}
	return false
}

// RoleSingleQuery is the basic unit for building queries to Roles.
type RoleSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Look for roles by Uuid
	Uuid []string `protobuf:"bytes,1,rep,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Look for roles by label, eventually using "wildchar"
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Look up for roles associated with a Team
	IsTeam bool `protobuf:"varint,3,opt,name=IsTeam,proto3" json:"IsTeam,omitempty"`
	// Look for roles associated with a Group
	IsGroupRole bool `protobuf:"varint,4,opt,name=IsGroupRole,proto3" json:"IsGroupRole,omitempty"`
	// Look for roles associated with a User
	IsUserRole bool `protobuf:"varint,5,opt,name=IsUserRole,proto3" json:"IsUserRole,omitempty"`
	// Look for roles that have any value in the autoApplies field
	HasAutoApply bool `protobuf:"varint,6,opt,name=HasAutoApply,proto3" json:"HasAutoApply,omitempty"`
	// Internal - Negate the query
	Not bool `protobuf:"varint,7,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *RoleSingleQuery) Reset() {
	*x = RoleSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSingleQuery) ProtoMessage() {}

func (x *RoleSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSingleQuery.ProtoReflect.Descriptor instead.
func (*RoleSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{8}
}

func (x *RoleSingleQuery) GetUuid() []string {
	if x != nil {
		return x.Uuid
	}
	return nil
}

func (x *RoleSingleQuery) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *RoleSingleQuery) GetIsTeam() bool {
	if x != nil {
		return x.IsTeam
	}
	return false
}

func (x *RoleSingleQuery) GetIsGroupRole() bool {
	if x != nil {
		return x.IsGroupRole
	}
	return false
}

func (x *RoleSingleQuery) GetIsUserRole() bool {
	if x != nil {
		return x.IsUserRole
	}
	return false
}

func (x *RoleSingleQuery) GetHasAutoApply() bool {
	if x != nil {
		return x.HasAutoApply
	}
	return false
}

func (x *RoleSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// *****************************************************************************
//
//	Messages structure
//
// *****************************************************************************
type CreateUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *CreateUserRequest) Reset() {
	*x = CreateUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserRequest) ProtoMessage() {}

func (x *CreateUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserRequest.ProtoReflect.Descriptor instead.
func (*CreateUserRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{9}
}

func (x *CreateUserRequest) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CreateUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *CreateUserResponse) Reset() {
	*x = CreateUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateUserResponse) ProtoMessage() {}

func (x *CreateUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateUserResponse.ProtoReflect.Descriptor instead.
func (*CreateUserResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{10}
}

func (x *CreateUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type BindUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserName string `protobuf:"bytes,1,opt,name=userName,proto3" json:"userName,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *BindUserRequest) Reset() {
	*x = BindUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserRequest) ProtoMessage() {}

func (x *BindUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserRequest.ProtoReflect.Descriptor instead.
func (*BindUserRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{11}
}

func (x *BindUserRequest) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *BindUserRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type BindUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *BindUserResponse) Reset() {
	*x = BindUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BindUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BindUserResponse) ProtoMessage() {}

func (x *BindUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BindUserResponse.ProtoReflect.Descriptor instead.
func (*BindUserResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{12}
}

func (x *BindUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type DeleteUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *DeleteUserRequest) Reset() {
	*x = DeleteUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserRequest) ProtoMessage() {}

func (x *DeleteUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteUserRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type DeleteUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted,proto3" json:"RowsDeleted,omitempty"`
}

func (x *DeleteUserResponse) Reset() {
	*x = DeleteUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserResponse) ProtoMessage() {}

func (x *DeleteUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserResponse.ProtoReflect.Descriptor instead.
func (*DeleteUserResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{14}
}

func (x *DeleteUserResponse) GetRowsDeleted() int64 {
	if x != nil {
		return x.RowsDeleted
	}
	return 0
}

type SearchUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *SearchUserRequest) Reset() {
	*x = SearchUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserRequest) ProtoMessage() {}

func (x *SearchUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserRequest.ProtoReflect.Descriptor instead.
func (*SearchUserRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{15}
}

func (x *SearchUserRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type SearchUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User *User `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *SearchUserResponse) Reset() {
	*x = SearchUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserResponse) ProtoMessage() {}

func (x *SearchUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserResponse.ProtoReflect.Descriptor instead.
func (*SearchUserResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{16}
}

func (x *SearchUserResponse) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

type CountUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Count int32 `protobuf:"varint,1,opt,name=Count,proto3" json:"Count,omitempty"`
}

func (x *CountUserResponse) Reset() {
	*x = CountUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountUserResponse) ProtoMessage() {}

func (x *CountUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountUserResponse.ProtoReflect.Descriptor instead.
func (*CountUserResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{17}
}

func (x *CountUserResponse) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// User can represent either a User or a Group
type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User unique identifier
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Path to the parent group
	GroupPath string `protobuf:"bytes,2,opt,name=GroupPath,proto3" json:"GroupPath,omitempty"`
	// A free list of attributes
	Attributes map[string]string `protobuf:"bytes,3,rep,name=Attributes,proto3" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// List of roles applied to this user or group
	Roles []*Role `protobuf:"bytes,4,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// User login is used to connect, field is empty for groups
	Login string `protobuf:"bytes,5,opt,name=Login,proto3" json:"Login,omitempty"`
	// Password can be passed to be updated (but never read back), field is empty for groups
	Password string `protobuf:"bytes,6,opt,name=Password,proto3" json:"Password,omitempty"`
	// OldPassword must be set when a user updates her own password
	OldPassword string `protobuf:"bytes,11,opt,name=OldPassword,proto3" json:"OldPassword,omitempty"`
	// Whether this object is a group or a user
	IsGroup bool `protobuf:"varint,7,opt,name=IsGroup,proto3" json:"IsGroup,omitempty"`
	// Label of the group, field is empty for users
	GroupLabel string `protobuf:"bytes,8,opt,name=GroupLabel,proto3" json:"GroupLabel,omitempty"`
	// Last successful connection timestamp
	LastConnected int32 `protobuf:"varint,12,opt,name=LastConnected,proto3" json:"LastConnected,omitempty"`
	// Policies securing access to this user
	Policies []*service.ResourcePolicy `protobuf:"bytes,9,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Context-resolved to quickly check if user is editable or not.
	PoliciesContextEditable bool `protobuf:"varint,10,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{18}
}

func (x *User) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *User) GetGroupPath() string {
	if x != nil {
		return x.GroupPath
	}
	return ""
}

func (x *User) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

func (x *User) GetRoles() []*Role {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *User) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *User) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *User) GetOldPassword() string {
	if x != nil {
		return x.OldPassword
	}
	return ""
}

func (x *User) GetIsGroup() bool {
	if x != nil {
		return x.IsGroup
	}
	return false
}

func (x *User) GetGroupLabel() string {
	if x != nil {
		return x.GroupLabel
	}
	return ""
}

func (x *User) GetLastConnected() int32 {
	if x != nil {
		return x.LastConnected
	}
	return 0
}

func (x *User) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *User) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

type UserSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lookup a user by its Uuid
	Uuid string `protobuf:"bytes,11,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Lookup a user by Login
	Login string `protobuf:"bytes,1,opt,name=Login,proto3" json:"Login,omitempty"`
	// Lookup by hashed password, probably never used
	Password string `protobuf:"bytes,2,opt,name=Password,proto3" json:"Password,omitempty"`
	// List users below a specific on group path
	GroupPath string `protobuf:"bytes,3,opt,name=GroupPath,proto3" json:"GroupPath,omitempty"`
	// When searching on group path, load all users and groups recursively
	Recursive bool `protobuf:"varint,4,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
	// Search one specific Group by its path
	FullPath string `protobuf:"bytes,12,opt,name=FullPath,proto3" json:"FullPath,omitempty"`
	// Search on attribute, to be combined with AttributeValue
	AttributeName string `protobuf:"bytes,5,opt,name=AttributeName,proto3" json:"AttributeName,omitempty"`
	// Value used for comparison
	AttributeValue string `protobuf:"bytes,6,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"`
	// Search for the existence of the AttributeName, whatever its value
	AttributeAnyValue bool `protobuf:"varint,7,opt,name=AttributeAnyValue,proto3" json:"AttributeAnyValue,omitempty"`
	// Search users having a specific role UUID
	HasRole string `protobuf:"bytes,8,opt,name=HasRole,proto3" json:"HasRole,omitempty"`
	// Filter/Search by NodeType (generally user or group)
	NodeType NodeType `protobuf:"varint,9,opt,name=NodeType,proto3,enum=idm.NodeType" json:"NodeType,omitempty"`
	// Lookup by profile name (e.g. admin, standard, shared). This is a shortcut for searching on the pydio:profile attribute
	HasProfile string `protobuf:"bytes,13,opt,name=HasProfile,proto3" json:"HasProfile,omitempty"`
	// Lookup by last connection date. Must be a timestamp with a leading comparison symbol ('<' or '>')
	ConnectedSince string `protobuf:"bytes,14,opt,name=ConnectedSince,proto3" json:"ConnectedSince,omitempty"`
	// Internal - Negate the query/filter result
	Not bool `protobuf:"varint,10,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *UserSingleQuery) Reset() {
	*x = UserSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSingleQuery) ProtoMessage() {}

func (x *UserSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSingleQuery.ProtoReflect.Descriptor instead.
func (*UserSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{19}
}

func (x *UserSingleQuery) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UserSingleQuery) GetLogin() string {
	if x != nil {
		return x.Login
	}
	return ""
}

func (x *UserSingleQuery) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *UserSingleQuery) GetGroupPath() string {
	if x != nil {
		return x.GroupPath
	}
	return ""
}

func (x *UserSingleQuery) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

func (x *UserSingleQuery) GetFullPath() string {
	if x != nil {
		return x.FullPath
	}
	return ""
}

func (x *UserSingleQuery) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *UserSingleQuery) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

func (x *UserSingleQuery) GetAttributeAnyValue() bool {
	if x != nil {
		return x.AttributeAnyValue
	}
	return false
}

func (x *UserSingleQuery) GetHasRole() string {
	if x != nil {
		return x.HasRole
	}
	return ""
}

func (x *UserSingleQuery) GetNodeType() NodeType {
	if x != nil {
		return x.NodeType
	}
	return NodeType_UNKNOWN
}

func (x *UserSingleQuery) GetHasProfile() string {
	if x != nil {
		return x.HasProfile
	}
	return ""
}

func (x *UserSingleQuery) GetConnectedSince() string {
	if x != nil {
		return x.ConnectedSince
	}
	return ""
}

func (x *UserSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// *****************************************************************************
//
//	Messages structure
//
// *****************************************************************************
type CreateWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace,proto3" json:"Workspace,omitempty"`
}

func (x *CreateWorkspaceRequest) Reset() {
	*x = CreateWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceRequest) ProtoMessage() {}

func (x *CreateWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{20}
}

func (x *CreateWorkspaceRequest) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type CreateWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace,proto3" json:"Workspace,omitempty"`
}

func (x *CreateWorkspaceResponse) Reset() {
	*x = CreateWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateWorkspaceResponse) ProtoMessage() {}

func (x *CreateWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*CreateWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{21}
}

func (x *CreateWorkspaceResponse) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

type DeleteWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *DeleteWorkspaceRequest) Reset() {
	*x = DeleteWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkspaceRequest) ProtoMessage() {}

func (x *DeleteWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*DeleteWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{22}
}

func (x *DeleteWorkspaceRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type DeleteWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted,proto3" json:"RowsDeleted,omitempty"`
}

func (x *DeleteWorkspaceResponse) Reset() {
	*x = DeleteWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteWorkspaceResponse) ProtoMessage() {}

func (x *DeleteWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*DeleteWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteWorkspaceResponse) GetRowsDeleted() int64 {
	if x != nil {
		return x.RowsDeleted
	}
	return 0
}

type SearchWorkspaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
}

func (x *SearchWorkspaceRequest) Reset() {
	*x = SearchWorkspaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkspaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkspaceRequest) ProtoMessage() {}

func (x *SearchWorkspaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkspaceRequest.ProtoReflect.Descriptor instead.
func (*SearchWorkspaceRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{24}
}

func (x *SearchWorkspaceRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

type SearchWorkspaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Workspace *Workspace `protobuf:"bytes,1,opt,name=Workspace,proto3" json:"Workspace,omitempty"`
}

func (x *SearchWorkspaceResponse) Reset() {
	*x = SearchWorkspaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchWorkspaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchWorkspaceResponse) ProtoMessage() {}

func (x *SearchWorkspaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchWorkspaceResponse.ProtoReflect.Descriptor instead.
func (*SearchWorkspaceResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{25}
}

func (x *SearchWorkspaceResponse) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

// A Workspace is composed of a set of nodes UUIDs and is used to provide accesses to the tree via ACLs.
type Workspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the workspace
	UUID string `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	// Label of the workspace (max length 500)
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Description of the workspace (max length 1000)
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Slug is an url-compatible form of the workspace label, or can be freely modified (max length 500)
	Slug string `protobuf:"bytes,4,opt,name=Slug,proto3" json:"Slug,omitempty"`
	// Scope can be ADMIN, ROOM (=CELL) or LINK
	Scope WorkspaceScope `protobuf:"varint,5,opt,name=Scope,proto3,enum=idm.WorkspaceScope" json:"Scope,omitempty"`
	// Last modification time
	LastUpdated int32 `protobuf:"varint,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	// Policies for securing access
	Policies []*service.ResourcePolicy `protobuf:"bytes,7,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// JSON-encoded list of attributes
	Attributes string `protobuf:"bytes,8,opt,name=Attributes,proto3" json:"Attributes,omitempty"`
	// Quick list of the RootNodes uuids
	RootUUIDs []string `protobuf:"bytes,9,rep,name=RootUUIDs,proto3" json:"RootUUIDs,omitempty"`
	// List of the Root Nodes in the tree that compose this workspace
	RootNodes map[string]*tree.Node `protobuf:"bytes,11,rep,name=RootNodes,proto3" json:"RootNodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Context-resolved to quickly check if workspace is editable or not
	PoliciesContextEditable bool `protobuf:"varint,12,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *Workspace) Reset() {
	*x = Workspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Workspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Workspace) ProtoMessage() {}

func (x *Workspace) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Workspace.ProtoReflect.Descriptor instead.
func (*Workspace) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{26}
}

func (x *Workspace) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Workspace) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Workspace) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Workspace) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *Workspace) GetScope() WorkspaceScope {
	if x != nil {
		return x.Scope
	}
	return WorkspaceScope_ANY
}

func (x *Workspace) GetLastUpdated() int32 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *Workspace) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Workspace) GetAttributes() string {
	if x != nil {
		return x.Attributes
	}
	return ""
}

func (x *Workspace) GetRootUUIDs() []string {
	if x != nil {
		return x.RootUUIDs
	}
	return nil
}

func (x *Workspace) GetRootNodes() map[string]*tree.Node {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *Workspace) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

type WorkspaceSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lookup by workspace Uuid
	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Lookup by workspace Label
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Lookup by description
	Description string `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Select workspace by slug
	Slug string `protobuf:"bytes,4,opt,name=slug,proto3" json:"slug,omitempty"`
	// Restrict to a specific workspace type
	Scope WorkspaceScope `protobuf:"varint,5,opt,name=scope,proto3,enum=idm.WorkspaceScope" json:"scope,omitempty"`
	// Compared to workspace update date (Golang duration with a leading comparator < or >)
	LastUpdated string `protobuf:"bytes,7,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	// Lookup for the presence of a specific attribute, whatever its value
	HasAttribute string `protobuf:"bytes,8,opt,name=HasAttribute,proto3" json:"HasAttribute,omitempty"`
	// Lookup for an attribute, to be used in combination with AttributeValue
	AttributeName string `protobuf:"bytes,9,opt,name=AttributeName,proto3" json:"AttributeName,omitempty"`
	// Value used for comparison
	AttributeValue string `protobuf:"bytes,10,opt,name=AttributeValue,proto3" json:"AttributeValue,omitempty"`
	// Internal - Negate the query result
	Not bool `protobuf:"varint,6,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *WorkspaceSingleQuery) Reset() {
	*x = WorkspaceSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceSingleQuery) ProtoMessage() {}

func (x *WorkspaceSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceSingleQuery.ProtoReflect.Descriptor instead.
func (*WorkspaceSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{27}
}

func (x *WorkspaceSingleQuery) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetScope() WorkspaceScope {
	if x != nil {
		return x.Scope
	}
	return WorkspaceScope_ANY
}

func (x *WorkspaceSingleQuery) GetLastUpdated() string {
	if x != nil {
		return x.LastUpdated
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetHasAttribute() string {
	if x != nil {
		return x.HasAttribute
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetAttributeName() string {
	if x != nil {
		return x.AttributeName
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetAttributeValue() string {
	if x != nil {
		return x.AttributeValue
	}
	return ""
}

func (x *WorkspaceSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// *****************************************************************************
//
//	ACL Messages structure
//
// *****************************************************************************
type CreateACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ACL       *ACL  `protobuf:"bytes,1,opt,name=ACL,proto3" json:"ACL,omitempty"`
	ExpiresIn int64 `protobuf:"varint,2,opt,name=ExpiresIn,proto3" json:"ExpiresIn,omitempty"`
}

func (x *CreateACLRequest) Reset() {
	*x = CreateACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLRequest) ProtoMessage() {}

func (x *CreateACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLRequest.ProtoReflect.Descriptor instead.
func (*CreateACLRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{28}
}

func (x *CreateACLRequest) GetACL() *ACL {
	if x != nil {
		return x.ACL
	}
	return nil
}

func (x *CreateACLRequest) GetExpiresIn() int64 {
	if x != nil {
		return x.ExpiresIn
	}
	return 0
}

type CreateACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ACL *ACL `protobuf:"bytes,1,opt,name=ACL,proto3" json:"ACL,omitempty"`
}

func (x *CreateACLResponse) Reset() {
	*x = CreateACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateACLResponse) ProtoMessage() {}

func (x *CreateACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateACLResponse.ProtoReflect.Descriptor instead.
func (*CreateACLResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{29}
}

func (x *CreateACLResponse) GetACL() *ACL {
	if x != nil {
		return x.ACL
	}
	return nil
}

type ExpireACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query     *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	Timestamp int64          `protobuf:"varint,2,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *ExpireACLRequest) Reset() {
	*x = ExpireACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireACLRequest) ProtoMessage() {}

func (x *ExpireACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireACLRequest.ProtoReflect.Descriptor instead.
func (*ExpireACLRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{30}
}

func (x *ExpireACLRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExpireACLRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

type ExpireACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows int64 `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
}

func (x *ExpireACLResponse) Reset() {
	*x = ExpireACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExpireACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExpireACLResponse) ProtoMessage() {}

func (x *ExpireACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExpireACLResponse.ProtoReflect.Descriptor instead.
func (*ExpireACLResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{31}
}

func (x *ExpireACLResponse) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

type DeleteACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	ExpiredAfter  int64          `protobuf:"varint,2,opt,name=ExpiredAfter,proto3" json:"ExpiredAfter,omitempty"`
	ExpiredBefore int64          `protobuf:"varint,3,opt,name=ExpiredBefore,proto3" json:"ExpiredBefore,omitempty"`
}

func (x *DeleteACLRequest) Reset() {
	*x = DeleteACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLRequest) ProtoMessage() {}

func (x *DeleteACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLRequest.ProtoReflect.Descriptor instead.
func (*DeleteACLRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{32}
}

func (x *DeleteACLRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *DeleteACLRequest) GetExpiredAfter() int64 {
	if x != nil {
		return x.ExpiredAfter
	}
	return 0
}

func (x *DeleteACLRequest) GetExpiredBefore() int64 {
	if x != nil {
		return x.ExpiredBefore
	}
	return 0
}

type DeleteACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RowsDeleted int64 `protobuf:"varint,1,opt,name=RowsDeleted,proto3" json:"RowsDeleted,omitempty"`
}

func (x *DeleteACLResponse) Reset() {
	*x = DeleteACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteACLResponse) ProtoMessage() {}

func (x *DeleteACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteACLResponse.ProtoReflect.Descriptor instead.
func (*DeleteACLResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteACLResponse) GetRowsDeleted() int64 {
	if x != nil {
		return x.RowsDeleted
	}
	return 0
}

type SearchACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	ExpiredAfter  int64          `protobuf:"varint,2,opt,name=ExpiredAfter,proto3" json:"ExpiredAfter,omitempty"`
	ExpiredBefore int64          `protobuf:"varint,3,opt,name=ExpiredBefore,proto3" json:"ExpiredBefore,omitempty"`
}

func (x *SearchACLRequest) Reset() {
	*x = SearchACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchACLRequest) ProtoMessage() {}

func (x *SearchACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchACLRequest.ProtoReflect.Descriptor instead.
func (*SearchACLRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{34}
}

func (x *SearchACLRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SearchACLRequest) GetExpiredAfter() int64 {
	if x != nil {
		return x.ExpiredAfter
	}
	return 0
}

func (x *SearchACLRequest) GetExpiredBefore() int64 {
	if x != nil {
		return x.ExpiredBefore
	}
	return 0
}

type SearchACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ACL *ACL `protobuf:"bytes,1,opt,name=ACL,proto3" json:"ACL,omitempty"`
}

func (x *SearchACLResponse) Reset() {
	*x = SearchACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchACLResponse) ProtoMessage() {}

func (x *SearchACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchACLResponse.ProtoReflect.Descriptor instead.
func (*SearchACLResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{35}
}

func (x *SearchACLResponse) GetACL() *ACL {
	if x != nil {
		return x.ACL
	}
	return nil
}

type RestoreACLRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query         *service.Query `protobuf:"bytes,1,opt,name=Query,proto3" json:"Query,omitempty"`
	ExpiredAfter  int64          `protobuf:"varint,2,opt,name=ExpiredAfter,proto3" json:"ExpiredAfter,omitempty"`
	ExpiredBefore int64          `protobuf:"varint,3,opt,name=ExpiredBefore,proto3" json:"ExpiredBefore,omitempty"`
}

func (x *RestoreACLRequest) Reset() {
	*x = RestoreACLRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreACLRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreACLRequest) ProtoMessage() {}

func (x *RestoreACLRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreACLRequest.ProtoReflect.Descriptor instead.
func (*RestoreACLRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{36}
}

func (x *RestoreACLRequest) GetQuery() *service.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *RestoreACLRequest) GetExpiredAfter() int64 {
	if x != nil {
		return x.ExpiredAfter
	}
	return 0
}

func (x *RestoreACLRequest) GetExpiredBefore() int64 {
	if x != nil {
		return x.ExpiredBefore
	}
	return 0
}

type RestoreACLResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rows int64 `protobuf:"varint,1,opt,name=Rows,proto3" json:"Rows,omitempty"`
}

func (x *RestoreACLResponse) Reset() {
	*x = RestoreACLResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RestoreACLResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreACLResponse) ProtoMessage() {}

func (x *RestoreACLResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreACLResponse.ProtoReflect.Descriptor instead.
func (*RestoreACLResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{37}
}

func (x *RestoreACLResponse) GetRows() int64 {
	if x != nil {
		return x.Rows
	}
	return 0
}

type ACLAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ACL Action name, most frequent values are "read" or "write"
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// ACL Action value
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *ACLAction) Reset() {
	*x = ACLAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLAction) ProtoMessage() {}

func (x *ACLAction) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLAction.ProtoReflect.Descriptor instead.
func (*ACLAction) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{38}
}

func (x *ACLAction) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ACLAction) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// ACL are the basic flags that can be put anywhere in the tree to provide some specific rights to a given role.
// The context of how they apply can be fine-tuned by workspace.
type ACL struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique ID of this ACL
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// Action on which this ACL provides control
	Action *ACLAction `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	// Associated Role
	RoleID string `protobuf:"bytes,3,opt,name=RoleID,proto3" json:"RoleID,omitempty"`
	// Associated Workspace
	WorkspaceID string `protobuf:"bytes,4,opt,name=WorkspaceID,proto3" json:"WorkspaceID,omitempty"`
	// Associated Node
	NodeID string `protobuf:"bytes,5,opt,name=NodeID,proto3" json:"NodeID,omitempty"`
}

func (x *ACL) Reset() {
	*x = ACL{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACL) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACL) ProtoMessage() {}

func (x *ACL) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACL.ProtoReflect.Descriptor instead.
func (*ACL) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{39}
}

func (x *ACL) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ACL) GetAction() *ACLAction {
	if x != nil {
		return x.Action
	}
	return nil
}

func (x *ACL) GetRoleID() string {
	if x != nil {
		return x.RoleID
	}
	return ""
}

func (x *ACL) GetWorkspaceID() string {
	if x != nil {
		return x.WorkspaceID
	}
	return ""
}

func (x *ACL) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

type ACLSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of Actions to lookup
	Actions []*ACLAction `protobuf:"bytes,1,rep,name=Actions,proto3" json:"Actions,omitempty"`
	// Filter by one or more role UUID
	RoleIDs []string `protobuf:"bytes,2,rep,name=RoleIDs,proto3" json:"RoleIDs,omitempty"`
	// Filter by one or more workspace UUID
	WorkspaceIDs []string `protobuf:"bytes,3,rep,name=WorkspaceIDs,proto3" json:"WorkspaceIDs,omitempty"`
	// Filter by one or more node UUID
	NodeIDs []string `protobuf:"bytes,4,rep,name=NodeIDs,proto3" json:"NodeIDs,omitempty"`
	// Internal - Negate query
	Not bool `protobuf:"varint,5,opt,name=not,proto3" json:"not,omitempty"`
}

func (x *ACLSingleQuery) Reset() {
	*x = ACLSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ACLSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ACLSingleQuery) ProtoMessage() {}

func (x *ACLSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ACLSingleQuery.ProtoReflect.Descriptor instead.
func (*ACLSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{40}
}

func (x *ACLSingleQuery) GetActions() []*ACLAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *ACLSingleQuery) GetRoleIDs() []string {
	if x != nil {
		return x.RoleIDs
	}
	return nil
}

func (x *ACLSingleQuery) GetWorkspaceIDs() []string {
	if x != nil {
		return x.WorkspaceIDs
	}
	return nil
}

func (x *ACLSingleQuery) GetNodeIDs() []string {
	if x != nil {
		return x.NodeIDs
	}
	return nil
}

func (x *ACLSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

// Piece of metadata attached to a node
type UserMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier of the metadata
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Unique identifier of the node to which meta is attached
	NodeUuid string `protobuf:"bytes,2,opt,name=NodeUuid,proto3" json:"NodeUuid,omitempty"`
	// Namespace for the metadata
	Namespace string `protobuf:"bytes,3,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Json encoded value used to pass any type of values
	JsonValue string `protobuf:"bytes,4,opt,name=JsonValue,proto3" json:"JsonValue,omitempty"`
	// Policies for securing access
	Policies []*service.ResourcePolicy `protobuf:"bytes,5,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Context-resolved to quickly check if this meta is editable or not
	PoliciesContextEditable bool `protobuf:"varint,6,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
	// Pass along resolved Node for advanced filtering
	ResolvedNode *tree.Node `protobuf:"bytes,7,opt,name=ResolvedNode,proto3" json:"ResolvedNode,omitempty"`
}

func (x *UserMeta) Reset() {
	*x = UserMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMeta) ProtoMessage() {}

func (x *UserMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMeta.ProtoReflect.Descriptor instead.
func (*UserMeta) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{41}
}

func (x *UserMeta) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UserMeta) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *UserMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UserMeta) GetJsonValue() string {
	if x != nil {
		return x.JsonValue
	}
	return ""
}

func (x *UserMeta) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *UserMeta) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

func (x *UserMeta) GetResolvedNode() *tree.Node {
	if x != nil {
		return x.ResolvedNode
	}
	return nil
}

// Globally declared Namespace with associated policies
type UserMetaNamespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Namespace identifier, must be unique
	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Human-readable Label
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Order is used for sorting lists of namesapces
	Order int32 `protobuf:"varint,3,opt,name=Order,proto3" json:"Order,omitempty"`
	// Whether a modification of a metadata value for this namespace should trigger an indexation by the search engine
	Indexable bool `protobuf:"varint,4,opt,name=Indexable,proto3" json:"Indexable,omitempty"`
	// Json-encoded type to provide accurate interface for edition
	JsonDefinition string `protobuf:"bytes,5,opt,name=JsonDefinition,proto3" json:"JsonDefinition,omitempty"`
	// Policies securing this namespace
	Policies []*service.ResourcePolicy `protobuf:"bytes,6,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Context-resolved to quickly check if this meta is editable or not
	PoliciesContextEditable bool `protobuf:"varint,7,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *UserMetaNamespace) Reset() {
	*x = UserMetaNamespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserMetaNamespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserMetaNamespace) ProtoMessage() {}

func (x *UserMetaNamespace) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserMetaNamespace.ProtoReflect.Descriptor instead.
func (*UserMetaNamespace) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{42}
}

func (x *UserMetaNamespace) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *UserMetaNamespace) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *UserMetaNamespace) GetOrder() int32 {
	if x != nil {
		return x.Order
	}
	return 0
}

func (x *UserMetaNamespace) GetIndexable() bool {
	if x != nil {
		return x.Indexable
	}
	return false
}

func (x *UserMetaNamespace) GetJsonDefinition() string {
	if x != nil {
		return x.JsonDefinition
	}
	return ""
}

func (x *UserMetaNamespace) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *UserMetaNamespace) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

// Request for modifying UserMeta
type UpdateUserMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of operation to apply (PUT / DELETE)
	Operation UpdateUserMetaRequest_UserMetaOp `protobuf:"varint,1,opt,name=Operation,proto3,enum=idm.UpdateUserMetaRequest_UserMetaOp" json:"Operation,omitempty"`
	// List of metadatas to update or delete
	MetaDatas []*UserMeta `protobuf:"bytes,3,rep,name=MetaDatas,proto3" json:"MetaDatas,omitempty"`
}

func (x *UpdateUserMetaRequest) Reset() {
	*x = UpdateUserMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMetaRequest) ProtoMessage() {}

func (x *UpdateUserMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMetaRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserMetaRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{43}
}

func (x *UpdateUserMetaRequest) GetOperation() UpdateUserMetaRequest_UserMetaOp {
	if x != nil {
		return x.Operation
	}
	return UpdateUserMetaRequest_PUT
}

func (x *UpdateUserMetaRequest) GetMetaDatas() []*UserMeta {
	if x != nil {
		return x.MetaDatas
	}
	return nil
}

// Response of UpdateUserMeta service
type UpdateUserMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// List of metadatas
	MetaDatas []*UserMeta `protobuf:"bytes,3,rep,name=MetaDatas,proto3" json:"MetaDatas,omitempty"`
}

func (x *UpdateUserMetaResponse) Reset() {
	*x = UpdateUserMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMetaResponse) ProtoMessage() {}

func (x *UpdateUserMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMetaResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserMetaResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{44}
}

func (x *UpdateUserMetaResponse) GetMetaDatas() []*UserMeta {
	if x != nil {
		return x.MetaDatas
	}
	return nil
}

// Request for searching UserMeta by NodeUuid or by Namespace
type SearchUserMetaRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Look for meta by their unique identifier
	MetaUuids []string `protobuf:"bytes,1,rep,name=MetaUuids,proto3" json:"MetaUuids,omitempty"`
	// Look for all meta for a list of nodes
	NodeUuids []string `protobuf:"bytes,2,rep,name=NodeUuids,proto3" json:"NodeUuids,omitempty"`
	// Filter meta by their namespace
	Namespace string `protobuf:"bytes,3,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Filter meta by owner (in the sense of the policies)
	ResourceSubjectOwner string `protobuf:"bytes,4,opt,name=ResourceSubjectOwner,proto3" json:"ResourceSubjectOwner,omitempty"`
	// Filter meta by policies query
	ResourceQuery *service.ResourcePolicyQuery `protobuf:"bytes,5,opt,name=ResourceQuery,proto3" json:"ResourceQuery,omitempty"`
}

func (x *SearchUserMetaRequest) Reset() {
	*x = SearchUserMetaRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserMetaRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMetaRequest) ProtoMessage() {}

func (x *SearchUserMetaRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMetaRequest.ProtoReflect.Descriptor instead.
func (*SearchUserMetaRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{45}
}

func (x *SearchUserMetaRequest) GetMetaUuids() []string {
	if x != nil {
		return x.MetaUuids
	}
	return nil
}

func (x *SearchUserMetaRequest) GetNodeUuids() []string {
	if x != nil {
		return x.NodeUuids
	}
	return nil
}

func (x *SearchUserMetaRequest) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *SearchUserMetaRequest) GetResourceSubjectOwner() string {
	if x != nil {
		return x.ResourceSubjectOwner
	}
	return ""
}

func (x *SearchUserMetaRequest) GetResourceQuery() *service.ResourcePolicyQuery {
	if x != nil {
		return x.ResourceQuery
	}
	return nil
}

// Streamed container for the UserMeta results
type SearchUserMetaResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMeta *UserMeta `protobuf:"bytes,1,opt,name=UserMeta,proto3" json:"UserMeta,omitempty"`
}

func (x *SearchUserMetaResponse) Reset() {
	*x = SearchUserMetaResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SearchUserMetaResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SearchUserMetaResponse) ProtoMessage() {}

func (x *SearchUserMetaResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SearchUserMetaResponse.ProtoReflect.Descriptor instead.
func (*SearchUserMetaResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{46}
}

func (x *SearchUserMetaResponse) GetUserMeta() *UserMeta {
	if x != nil {
		return x.UserMeta
	}
	return nil
}

// Modify UserMetaNamespaces
type UpdateUserMetaNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  UpdateUserMetaNamespaceRequest_UserMetaNsOp `protobuf:"varint,1,opt,name=Operation,proto3,enum=idm.UpdateUserMetaNamespaceRequest_UserMetaNsOp" json:"Operation,omitempty"`
	Namespaces []*UserMetaNamespace                        `protobuf:"bytes,2,rep,name=Namespaces,proto3" json:"Namespaces,omitempty"`
}

func (x *UpdateUserMetaNamespaceRequest) Reset() {
	*x = UpdateUserMetaNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMetaNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMetaNamespaceRequest) ProtoMessage() {}

func (x *UpdateUserMetaNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMetaNamespaceRequest.ProtoReflect.Descriptor instead.
func (*UpdateUserMetaNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{47}
}

func (x *UpdateUserMetaNamespaceRequest) GetOperation() UpdateUserMetaNamespaceRequest_UserMetaNsOp {
	if x != nil {
		return x.Operation
	}
	return UpdateUserMetaNamespaceRequest_PUT
}

func (x *UpdateUserMetaNamespaceRequest) GetNamespaces() []*UserMetaNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// Response of the
type UpdateUserMetaNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespaces []*UserMetaNamespace `protobuf:"bytes,1,rep,name=Namespaces,proto3" json:"Namespaces,omitempty"`
}

func (x *UpdateUserMetaNamespaceResponse) Reset() {
	*x = UpdateUserMetaNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateUserMetaNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateUserMetaNamespaceResponse) ProtoMessage() {}

func (x *UpdateUserMetaNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateUserMetaNamespaceResponse.ProtoReflect.Descriptor instead.
func (*UpdateUserMetaNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{48}
}

func (x *UpdateUserMetaNamespaceResponse) GetNamespaces() []*UserMetaNamespace {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

// List All MetaNamespaces
type ListUserMetaNamespaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListUserMetaNamespaceRequest) Reset() {
	*x = ListUserMetaNamespaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMetaNamespaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMetaNamespaceRequest) ProtoMessage() {}

func (x *ListUserMetaNamespaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMetaNamespaceRequest.ProtoReflect.Descriptor instead.
func (*ListUserMetaNamespaceRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{49}
}

// Collection of results
type ListUserMetaNamespaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserMetaNamespace *UserMetaNamespace `protobuf:"bytes,1,opt,name=UserMetaNamespace,proto3" json:"UserMetaNamespace,omitempty"`
}

func (x *ListUserMetaNamespaceResponse) Reset() {
	*x = ListUserMetaNamespaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListUserMetaNamespaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserMetaNamespaceResponse) ProtoMessage() {}

func (x *ListUserMetaNamespaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserMetaNamespaceResponse.ProtoReflect.Descriptor instead.
func (*ListUserMetaNamespaceResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{50}
}

func (x *ListUserMetaNamespaceResponse) GetUserMetaNamespace() *UserMetaNamespace {
	if x != nil {
		return x.UserMetaNamespace
	}
	return nil
}

// Global Event message for IDM
type ChangeEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JsonType      string             `protobuf:"bytes,1,opt,name=jsonType,json=@type,proto3" json:"jsonType,omitempty"`
	Type          ChangeEventType    `protobuf:"varint,2,opt,name=Type,proto3,enum=idm.ChangeEventType" json:"Type,omitempty"`
	User          *User              `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
	Role          *Role              `protobuf:"bytes,4,opt,name=Role,proto3" json:"Role,omitempty"`
	Workspace     *Workspace         `protobuf:"bytes,5,opt,name=Workspace,proto3" json:"Workspace,omitempty"`
	Acl           *ACL               `protobuf:"bytes,6,opt,name=Acl,proto3" json:"Acl,omitempty"`
	MetaNamespace *UserMetaNamespace `protobuf:"bytes,8,opt,name=MetaNamespace,proto3" json:"MetaNamespace,omitempty"`
	Attributes    map[string]string  `protobuf:"bytes,7,rep,name=Attributes,proto3" json:"Attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ChangeEvent) Reset() {
	*x = ChangeEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeEvent) ProtoMessage() {}

func (x *ChangeEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeEvent.ProtoReflect.Descriptor instead.
func (*ChangeEvent) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{51}
}

func (x *ChangeEvent) GetJsonType() string {
	if x != nil {
		return x.JsonType
	}
	return ""
}

func (x *ChangeEvent) GetType() ChangeEventType {
	if x != nil {
		return x.Type
	}
	return ChangeEventType_CREATE
}

func (x *ChangeEvent) GetUser() *User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *ChangeEvent) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

func (x *ChangeEvent) GetWorkspace() *Workspace {
	if x != nil {
		return x.Workspace
	}
	return nil
}

func (x *ChangeEvent) GetAcl() *ACL {
	if x != nil {
		return x.Acl
	}
	return nil
}

func (x *ChangeEvent) GetMetaNamespace() *UserMetaNamespace {
	if x != nil {
		return x.MetaNamespace
	}
	return nil
}

func (x *ChangeEvent) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

// ************************************
// Messages Structures
// ************************************
type PolicyEngineRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resource string            `protobuf:"bytes,1,opt,name=Resource,proto3" json:"Resource,omitempty"`
	Action   string            `protobuf:"bytes,2,opt,name=Action,proto3" json:"Action,omitempty"`
	Subjects []string          `protobuf:"bytes,3,rep,name=Subjects,proto3" json:"Subjects,omitempty"`
	Context  map[string]string `protobuf:"bytes,4,rep,name=Context,proto3" json:"Context,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PolicyEngineRequest) Reset() {
	*x = PolicyEngineRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEngineRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEngineRequest) ProtoMessage() {}

func (x *PolicyEngineRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEngineRequest.ProtoReflect.Descriptor instead.
func (*PolicyEngineRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{52}
}

func (x *PolicyEngineRequest) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PolicyEngineRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *PolicyEngineRequest) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *PolicyEngineRequest) GetContext() map[string]string {
	if x != nil {
		return x.Context
	}
	return nil
}

type PolicyEngineResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Allowed      bool `protobuf:"varint,1,opt,name=Allowed,proto3" json:"Allowed,omitempty"`
	ExplicitDeny bool `protobuf:"varint,2,opt,name=ExplicitDeny,proto3" json:"ExplicitDeny,omitempty"`
	DefaultDeny  bool `protobuf:"varint,3,opt,name=DefaultDeny,proto3" json:"DefaultDeny,omitempty"`
}

func (x *PolicyEngineResponse) Reset() {
	*x = PolicyEngineResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyEngineResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyEngineResponse) ProtoMessage() {}

func (x *PolicyEngineResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyEngineResponse.ProtoReflect.Descriptor instead.
func (*PolicyEngineResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{53}
}

func (x *PolicyEngineResponse) GetAllowed() bool {
	if x != nil {
		return x.Allowed
	}
	return false
}

func (x *PolicyEngineResponse) GetExplicitDeny() bool {
	if x != nil {
		return x.ExplicitDeny
	}
	return false
}

func (x *PolicyEngineResponse) GetDefaultDeny() bool {
	if x != nil {
		return x.DefaultDeny
	}
	return false
}

type PolicyCondition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type        string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	JsonOptions string `protobuf:"bytes,2,opt,name=jsonOptions,proto3" json:"jsonOptions,omitempty"`
}

func (x *PolicyCondition) Reset() {
	*x = PolicyCondition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyCondition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyCondition) ProtoMessage() {}

func (x *PolicyCondition) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyCondition.ProtoReflect.Descriptor instead.
func (*PolicyCondition) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{54}
}

func (x *PolicyCondition) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *PolicyCondition) GetJsonOptions() string {
	if x != nil {
		return x.JsonOptions
	}
	return ""
}

type Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          string                      `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Description string                      `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Subjects    []string                    `protobuf:"bytes,3,rep,name=subjects,proto3" json:"subjects,omitempty"`
	Resources   []string                    `protobuf:"bytes,4,rep,name=resources,proto3" json:"resources,omitempty"`
	Actions     []string                    `protobuf:"bytes,5,rep,name=actions,proto3" json:"actions,omitempty"`
	Effect      PolicyEffect                `protobuf:"varint,6,opt,name=effect,proto3,enum=idm.PolicyEffect" json:"effect,omitempty"`
	Conditions  map[string]*PolicyCondition `protobuf:"bytes,7,rep,name=conditions,proto3" json:"conditions,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Policy) Reset() {
	*x = Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Policy) ProtoMessage() {}

func (x *Policy) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Policy.ProtoReflect.Descriptor instead.
func (*Policy) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{55}
}

func (x *Policy) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Policy) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Policy) GetSubjects() []string {
	if x != nil {
		return x.Subjects
	}
	return nil
}

func (x *Policy) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Policy) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *Policy) GetEffect() PolicyEffect {
	if x != nil {
		return x.Effect
	}
	return PolicyEffect_unknown
}

func (x *Policy) GetConditions() map[string]*PolicyCondition {
	if x != nil {
		return x.Conditions
	}
	return nil
}

type PolicyGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid          string              `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Name          string              `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description   string              `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	OwnerUuid     string              `protobuf:"bytes,4,opt,name=OwnerUuid,proto3" json:"OwnerUuid,omitempty"`
	ResourceGroup PolicyResourceGroup `protobuf:"varint,5,opt,name=ResourceGroup,proto3,enum=idm.PolicyResourceGroup" json:"ResourceGroup,omitempty"`
	LastUpdated   int32               `protobuf:"varint,6,opt,name=LastUpdated,proto3" json:"LastUpdated,omitempty"`
	Policies      []*Policy           `protobuf:"bytes,7,rep,name=Policies,proto3" json:"Policies,omitempty"`
}

func (x *PolicyGroup) Reset() {
	*x = PolicyGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PolicyGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PolicyGroup) ProtoMessage() {}

func (x *PolicyGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PolicyGroup.ProtoReflect.Descriptor instead.
func (*PolicyGroup) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{56}
}

func (x *PolicyGroup) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PolicyGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PolicyGroup) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *PolicyGroup) GetOwnerUuid() string {
	if x != nil {
		return x.OwnerUuid
	}
	return ""
}

func (x *PolicyGroup) GetResourceGroup() PolicyResourceGroup {
	if x != nil {
		return x.ResourceGroup
	}
	return PolicyResourceGroup_rest
}

func (x *PolicyGroup) GetLastUpdated() int32 {
	if x != nil {
		return x.LastUpdated
	}
	return 0
}

func (x *PolicyGroup) GetPolicies() []*Policy {
	if x != nil {
		return x.Policies
	}
	return nil
}

// Request / Response Messages
type StorePolicyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyGroup *PolicyGroup `protobuf:"bytes,1,opt,name=PolicyGroup,proto3" json:"PolicyGroup,omitempty"`
}

func (x *StorePolicyGroupRequest) Reset() {
	*x = StorePolicyGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorePolicyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorePolicyGroupRequest) ProtoMessage() {}

func (x *StorePolicyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorePolicyGroupRequest.ProtoReflect.Descriptor instead.
func (*StorePolicyGroupRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{57}
}

func (x *StorePolicyGroupRequest) GetPolicyGroup() *PolicyGroup {
	if x != nil {
		return x.PolicyGroup
	}
	return nil
}

type StorePolicyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyGroup *PolicyGroup `protobuf:"bytes,1,opt,name=PolicyGroup,proto3" json:"PolicyGroup,omitempty"`
}

func (x *StorePolicyGroupResponse) Reset() {
	*x = StorePolicyGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorePolicyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorePolicyGroupResponse) ProtoMessage() {}

func (x *StorePolicyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorePolicyGroupResponse.ProtoReflect.Descriptor instead.
func (*StorePolicyGroupResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{58}
}

func (x *StorePolicyGroupResponse) GetPolicyGroup() *PolicyGroup {
	if x != nil {
		return x.PolicyGroup
	}
	return nil
}

type DeletePolicyGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyGroup *PolicyGroup `protobuf:"bytes,1,opt,name=PolicyGroup,proto3" json:"PolicyGroup,omitempty"`
}

func (x *DeletePolicyGroupRequest) Reset() {
	*x = DeletePolicyGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyGroupRequest) ProtoMessage() {}

func (x *DeletePolicyGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyGroupRequest.ProtoReflect.Descriptor instead.
func (*DeletePolicyGroupRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{59}
}

func (x *DeletePolicyGroupRequest) GetPolicyGroup() *PolicyGroup {
	if x != nil {
		return x.PolicyGroup
	}
	return nil
}

type DeletePolicyGroupResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DeletePolicyGroupResponse) Reset() {
	*x = DeletePolicyGroupResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeletePolicyGroupResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeletePolicyGroupResponse) ProtoMessage() {}

func (x *DeletePolicyGroupResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeletePolicyGroupResponse.ProtoReflect.Descriptor instead.
func (*DeletePolicyGroupResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{60}
}

func (x *DeletePolicyGroupResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListPolicyGroupsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Filter string `protobuf:"bytes,1,opt,name=Filter,proto3" json:"Filter,omitempty"`
}

func (x *ListPolicyGroupsRequest) Reset() {
	*x = ListPolicyGroupsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyGroupsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyGroupsRequest) ProtoMessage() {}

func (x *ListPolicyGroupsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyGroupsRequest.ProtoReflect.Descriptor instead.
func (*ListPolicyGroupsRequest) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{61}
}

func (x *ListPolicyGroupsRequest) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

type ListPolicyGroupsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyGroups []*PolicyGroup `protobuf:"bytes,1,rep,name=PolicyGroups,proto3" json:"PolicyGroups,omitempty"`
	Total        int32          `protobuf:"varint,2,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ListPolicyGroupsResponse) Reset() {
	*x = ListPolicyGroupsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_idm_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListPolicyGroupsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListPolicyGroupsResponse) ProtoMessage() {}

func (x *ListPolicyGroupsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_idm_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListPolicyGroupsResponse.ProtoReflect.Descriptor instead.
func (*ListPolicyGroupsResponse) Descriptor() ([]byte, []int) {
	return file_cells_idm_proto_rawDescGZIP(), []int{62}
}

func (x *ListPolicyGroupsResponse) GetPolicyGroups() []*PolicyGroup {
	if x != nil {
		return x.PolicyGroups
	}
	return nil
}

func (x *ListPolicyGroupsResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

var File_cells_idm_proto protoreflect.FileDescriptor

var file_cells_idm_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x03, 0x69, 0x64, 0x6d, 0x1a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f,
	0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x32, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x39,
	0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x36, 0x0a, 0x12, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x33, 0x0a, 0x12,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c,
	0x65, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xdb, 0x02, 0x0a,
	0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x49, 0x73, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x6f, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70, 0x6c, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70,
	0x70, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x4f, 0x76, 0x65,
	0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x46, 0x6f, 0x72,
	0x63, 0x65, 0x4f, 0x76, 0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x54, 0x65,
	0x61, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x54, 0x65, 0x61, 0x6d,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61, 0x73, 0x41, 0x75, 0x74, 0x6f, 0x41, 0x70, 0x70,
	0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x48, 0x61, 0x73, 0x41, 0x75, 0x74,
	0x6f, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x22, 0x32, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22, 0x33, 0x0a, 0x12,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x49, 0x0a, 0x0f, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x31, 0x0a, 0x10,
	0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x22,
	0x39, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x36, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x22, 0x39, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22, 0x33, 0x0a,
	0x12, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x22, 0x29, 0x0a, 0x11, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xf6, 0x03,
	0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x39, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6c, 0x64, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x6c, 0x64,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x69, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a,
	0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45,
	0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xca, 0x03, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x1c, 0x0a, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69, 0x76, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x46, 0x75, 0x6c, 0x6c, 0x50, 0x61, 0x74, 0x68, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x11, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x41, 0x6e, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x48, 0x61, 0x73, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x0d, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x08, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x61, 0x73,
	0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x48,
	0x61, 0x73, 0x50, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x53, 0x69, 0x6e, 0x63,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03,
	0x6e, 0x6f, 0x74, 0x22, 0x46, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a,
	0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x47, 0x0a, 0x17, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x22, 0x3e, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24,
	0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x22, 0x3b, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52, 0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x22, 0x3e, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x22, 0x47, 0x0a, 0x17, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x09,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x87, 0x04, 0x0a, 0x09, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1d, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f,
	0x03, 0x78, 0xf4, 0x03, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xe8, 0x07, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xf4, 0x03, 0x52, 0x04, 0x53,
	0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x55, 0x49,
	0x44, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x73, 0x12, 0x3b, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x48, 0x0a, 0x0e, 0x52, 0x6f,
	0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x20,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e,
	0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0xc7, 0x02, 0x0a, 0x14, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x6c, 0x75,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x73, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a,
	0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4c,
	0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x61,
	0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0c, 0x48, 0x61, 0x73, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x41, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6e, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x22, 0x4c,
	0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x08, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x41, 0x43, 0x4c, 0x12, 0x1c,
	0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x49, 0x6e, 0x22, 0x2f, 0x0a, 0x11,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1a, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x41, 0x43, 0x4c, 0x22, 0x56, 0x0a,
	0x10, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x27, 0x0a, 0x11, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x6f,
	0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x6f, 0x77, 0x73, 0x22, 0x82,
	0x01, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x66,
	0x6f, 0x72, 0x65, 0x22, 0x35, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x6f, 0x77, 0x73,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x52,
	0x6f, 0x77, 0x73, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22,
	0x2f, 0x0a, 0x11, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x08, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x41, 0x43, 0x4c,
	0x22, 0x83, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0c, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x66, 0x74, 0x65, 0x72,
	0x12, 0x24, 0x0a, 0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x42, 0x65, 0x66, 0x6f, 0x72,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x22, 0x28, 0x0a, 0x12, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72,
	0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x52, 0x6f, 0x77, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x52, 0x6f, 0x77, 0x73,
	0x22, 0x35, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8f, 0x01, 0x0a, 0x03, 0x41, 0x43, 0x4c, 0x12,
	0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44, 0x12,
	0x26, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49,
	0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x12,
	0x20, 0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49,
	0x44, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x22, 0xa4, 0x01, 0x0a, 0x0e, 0x41, 0x43,
	0x4c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x28, 0x0a, 0x07,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x44, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x49, 0x44, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x12, 0x10,
	0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6e, 0x6f, 0x74,
	0x22, 0x95, 0x02, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4a,
	0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a,
	0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x0c, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x92, 0x02, 0x0a, 0x11, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1c,
	0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x6e, 0x64, 0x65,
	0x78, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x33,
	0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x22, 0xac, 0x01,
	0x0a, 0x15, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x69, 0x64, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f,
	0x70, 0x52, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2b, 0x0a, 0x09,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09,
	0x4d, 0x65, 0x74, 0x61, 0x44, 0x61, 0x74, 0x61, 0x73, 0x22, 0x21, 0x0a, 0x0a, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x4f, 0x70, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x01, 0x22, 0x45, 0x0a, 0x16,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x44, 0x61,
	0x74, 0x61, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x15, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x4d, 0x65, 0x74, 0x61, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4e,
	0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09,
	0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53,
	0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x42, 0x0a, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79, 0x22,
	0x43, 0x0a, 0x16, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74,
	0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x22, 0xcd, 0x01, 0x0a, 0x1e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4e, 0x0a, 0x09, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x69, 0x64, 0x6d,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x73, 0x4f, 0x70, 0x52, 0x09, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x23, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x73, 0x4f, 0x70, 0x12,
	0x07, 0x0a, 0x03, 0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45,
	0x54, 0x45, 0x10, 0x01, 0x22, 0x59, 0x0a, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x22,
	0x1e, 0x0a, 0x1c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x65, 0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x44, 0x0a, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x11, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x22, 0x97, 0x03, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x08, 0x6a, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x40, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x28, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x55, 0x73, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x6d,
	0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1a, 0x0a, 0x03, 0x41, 0x63, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x08, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x52, 0x03, 0x41, 0x63,
	0x6c, 0x12, 0x3c, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x40, 0x0a, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0xe2, 0x01, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x65, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x1a, 0x3a, 0x0a, 0x0c, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x76, 0x0a, 0x14, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45,
	0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x65, 0x6e, 0x79, 0x22, 0x47, 0x0a,
	0x0f, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6a, 0x73, 0x6f, 0x6e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xcb, 0x02, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x65, 0x66, 0x66, 0x65, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x11, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x52, 0x06, 0x65, 0x66, 0x66, 0x65,
	0x63, 0x74, 0x12, 0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x2e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x53, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x22, 0x80, 0x02, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x3e, 0x0a, 0x0d,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x20, 0x0a, 0x0b,
	0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x27,
	0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0x4d, 0x0a, 0x17, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4e, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x4e, 0x0a, 0x18, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x32, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x35, 0x0a, 0x19, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x31, 0x0a,
	0x17, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x22, 0x66, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x0c,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x52, 0x0c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x2a, 0x2c, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x10, 0x02, 0x2a, 0x38, 0x0a, 0x0e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10,
	0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x4e, 0x4b, 0x10, 0x03,
	0x2a, 0x56, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x00, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x45, 0x41, 0x44, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x03, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x4f, 0x47, 0x49, 0x4e, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06,
	0x4c, 0x4f, 0x47, 0x4f, 0x55, 0x54, 0x10, 0x05, 0x2a, 0x30, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x45, 0x66, 0x66, 0x65, 0x63, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x64, 0x65, 0x6e, 0x79, 0x10, 0x01, 0x12,
	0x09, 0x0a, 0x05, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x02, 0x2a, 0x32, 0x0a, 0x13, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x12, 0x08, 0x0a, 0x04, 0x72, 0x65, 0x73, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x61,
	0x63, 0x6c, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x6f, 0x69, 0x64, 0x63, 0x10, 0x02, 0x32, 0xd6,
	0x02, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f,
	0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x41, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61,
	0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x6f, 0x6c,
	0x65, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f,
	0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x3d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x91, 0x03, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3f, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x39, 0x0a, 0x08, 0x42, 0x69, 0x6e,
	0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x14, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x42, 0x69, 0x6e, 0x64,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x69, 0x64,
	0x6d, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x3d, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12, 0x43, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0xd8, 0x02, 0x0a, 0x10,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x4e, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4e, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x50, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x52, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x32, 0x89, 0x03, 0x0a, 0x0a, 0x41, 0x43, 0x4c, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4c, 0x12, 0x15, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41,
	0x43, 0x4c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x3c, 0x0a, 0x09, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x43, 0x4c,
	0x12, 0x15, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x41, 0x43, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x3c, 0x0a, 0x09, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x12, 0x15,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x3e, 0x0a, 0x09, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x43, 0x4c, 0x12, 0x15, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x12,
	0x40, 0x0a, 0x09, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x41, 0x43, 0x4c, 0x12, 0x15, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x3f, 0x0a, 0x0a, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x12,
	0x16, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43, 0x4c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52, 0x65,
	0x73, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x43, 0x4c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x00, 0x32, 0xf9, 0x02, 0x0a, 0x0f, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x12, 0x4d, 0x0a, 0x0e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73, 0x65,
	0x72, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x1a, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1b, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x30, 0x01, 0x12, 0x66, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x23, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x24, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x62, 0x0a, 0x15, 0x4c, 0x69,
	0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x21, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30, 0x01, 0x32, 0x9f,
	0x03, 0x0a, 0x13, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x09, 0x49, 0x73, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x12, 0x18, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e,
	0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x67, 0x69, 0x6e, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a, 0x10, 0x53, 0x74,
	0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1c,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x69,
	0x64, 0x6d, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x51, 0x0a,
	0x10, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1d, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x48, 0x0a, 0x12, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x1c, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x10, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x22, 0x00, 0x30, 0x01, 0x12, 0x54, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x1d, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e,
	0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70,
	0x79, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x69, 0x64, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
}

var (
	file_cells_idm_proto_rawDescOnce sync.Once
	file_cells_idm_proto_rawDescData = file_cells_idm_proto_rawDesc
)

func file_cells_idm_proto_rawDescGZIP() []byte {
	file_cells_idm_proto_rawDescOnce.Do(func() {
		file_cells_idm_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_idm_proto_rawDescData)
	})
	return file_cells_idm_proto_rawDescData
}

var file_cells_idm_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_cells_idm_proto_msgTypes = make([]protoimpl.MessageInfo, 68)
var file_cells_idm_proto_goTypes = []interface{}{
	(NodeType)(0),                                    // 0: idm.NodeType
	(WorkspaceScope)(0),                              // 1: idm.WorkspaceScope
	(ChangeEventType)(0),                             // 2: idm.ChangeEventType
	(PolicyEffect)(0),                                // 3: idm.PolicyEffect
	(PolicyResourceGroup)(0),                         // 4: idm.PolicyResourceGroup
	(UpdateUserMetaRequest_UserMetaOp)(0),            // 5: idm.UpdateUserMetaRequest.UserMetaOp
	(UpdateUserMetaNamespaceRequest_UserMetaNsOp)(0), // 6: idm.UpdateUserMetaNamespaceRequest.UserMetaNsOp
	(*CreateRoleRequest)(nil),                        // 7: idm.CreateRoleRequest
	(*CreateRoleResponse)(nil),                       // 8: idm.CreateRoleResponse
	(*DeleteRoleRequest)(nil),                        // 9: idm.DeleteRoleRequest
	(*DeleteRoleResponse)(nil),                       // 10: idm.DeleteRoleResponse
	(*SearchRoleRequest)(nil),                        // 11: idm.SearchRoleRequest
	(*SearchRoleResponse)(nil),                       // 12: idm.SearchRoleResponse
	(*CountRoleResponse)(nil),                        // 13: idm.CountRoleResponse
	(*Role)(nil),                                     // 14: idm.Role
	(*RoleSingleQuery)(nil),                          // 15: idm.RoleSingleQuery
	(*CreateUserRequest)(nil),                        // 16: idm.CreateUserRequest
	(*CreateUserResponse)(nil),                       // 17: idm.CreateUserResponse
	(*BindUserRequest)(nil),                          // 18: idm.BindUserRequest
	(*BindUserResponse)(nil),                         // 19: idm.BindUserResponse
	(*DeleteUserRequest)(nil),                        // 20: idm.DeleteUserRequest
	(*DeleteUserResponse)(nil),                       // 21: idm.DeleteUserResponse
	(*SearchUserRequest)(nil),                        // 22: idm.SearchUserRequest
	(*SearchUserResponse)(nil),                       // 23: idm.SearchUserResponse
	(*CountUserResponse)(nil),                        // 24: idm.CountUserResponse
	(*User)(nil),                                     // 25: idm.User
	(*UserSingleQuery)(nil),                          // 26: idm.UserSingleQuery
	(*CreateWorkspaceRequest)(nil),                   // 27: idm.CreateWorkspaceRequest
	(*CreateWorkspaceResponse)(nil),                  // 28: idm.CreateWorkspaceResponse
	(*DeleteWorkspaceRequest)(nil),                   // 29: idm.DeleteWorkspaceRequest
	(*DeleteWorkspaceResponse)(nil),                  // 30: idm.DeleteWorkspaceResponse
	(*SearchWorkspaceRequest)(nil),                   // 31: idm.SearchWorkspaceRequest
	(*SearchWorkspaceResponse)(nil),                  // 32: idm.SearchWorkspaceResponse
	(*Workspace)(nil),                                // 33: idm.Workspace
	(*WorkspaceSingleQuery)(nil),                     // 34: idm.WorkspaceSingleQuery
	(*CreateACLRequest)(nil),                         // 35: idm.CreateACLRequest
	(*CreateACLResponse)(nil),                        // 36: idm.CreateACLResponse
	(*ExpireACLRequest)(nil),                         // 37: idm.ExpireACLRequest
	(*ExpireACLResponse)(nil),                        // 38: idm.ExpireACLResponse
	(*DeleteACLRequest)(nil),                         // 39: idm.DeleteACLRequest
	(*DeleteACLResponse)(nil),                        // 40: idm.DeleteACLResponse
	(*SearchACLRequest)(nil),                         // 41: idm.SearchACLRequest
	(*SearchACLResponse)(nil),                        // 42: idm.SearchACLResponse
	(*RestoreACLRequest)(nil),                        // 43: idm.RestoreACLRequest
	(*RestoreACLResponse)(nil),                       // 44: idm.RestoreACLResponse
	(*ACLAction)(nil),                                // 45: idm.ACLAction
	(*ACL)(nil),                                      // 46: idm.ACL
	(*ACLSingleQuery)(nil),                           // 47: idm.ACLSingleQuery
	(*UserMeta)(nil),                                 // 48: idm.UserMeta
	(*UserMetaNamespace)(nil),                        // 49: idm.UserMetaNamespace
	(*UpdateUserMetaRequest)(nil),                    // 50: idm.UpdateUserMetaRequest
	(*UpdateUserMetaResponse)(nil),                   // 51: idm.UpdateUserMetaResponse
	(*SearchUserMetaRequest)(nil),                    // 52: idm.SearchUserMetaRequest
	(*SearchUserMetaResponse)(nil),                   // 53: idm.SearchUserMetaResponse
	(*UpdateUserMetaNamespaceRequest)(nil),           // 54: idm.UpdateUserMetaNamespaceRequest
	(*UpdateUserMetaNamespaceResponse)(nil),          // 55: idm.UpdateUserMetaNamespaceResponse
	(*ListUserMetaNamespaceRequest)(nil),             // 56: idm.ListUserMetaNamespaceRequest
	(*ListUserMetaNamespaceResponse)(nil),            // 57: idm.ListUserMetaNamespaceResponse
	(*ChangeEvent)(nil),                              // 58: idm.ChangeEvent
	(*PolicyEngineRequest)(nil),                      // 59: idm.PolicyEngineRequest
	(*PolicyEngineResponse)(nil),                     // 60: idm.PolicyEngineResponse
	(*PolicyCondition)(nil),                          // 61: idm.PolicyCondition
	(*Policy)(nil),                                   // 62: idm.Policy
	(*PolicyGroup)(nil),                              // 63: idm.PolicyGroup
	(*StorePolicyGroupRequest)(nil),                  // 64: idm.StorePolicyGroupRequest
	(*StorePolicyGroupResponse)(nil),                 // 65: idm.StorePolicyGroupResponse
	(*DeletePolicyGroupRequest)(nil),                 // 66: idm.DeletePolicyGroupRequest
	(*DeletePolicyGroupResponse)(nil),                // 67: idm.DeletePolicyGroupResponse
	(*ListPolicyGroupsRequest)(nil),                  // 68: idm.ListPolicyGroupsRequest
	(*ListPolicyGroupsResponse)(nil),                 // 69: idm.ListPolicyGroupsResponse
	nil,                                              // 70: idm.User.AttributesEntry
	nil,                                              // 71: idm.Workspace.RootNodesEntry
	nil,                                              // 72: idm.ChangeEvent.AttributesEntry
	nil,                                              // 73: idm.PolicyEngineRequest.ContextEntry
	nil,                                              // 74: idm.Policy.ConditionsEntry
	(*service.Query)(nil),                            // 75: service.Query
	(*service.ResourcePolicy)(nil),                   // 76: service.ResourcePolicy
	(*tree.Node)(nil),                                // 77: tree.Node
	(*service.ResourcePolicyQuery)(nil),              // 78: service.ResourcePolicyQuery
}
var file_cells_idm_proto_depIdxs = []int32{
	14, // 0: idm.CreateRoleRequest.Role:type_name -> idm.Role
	14, // 1: idm.CreateRoleResponse.Role:type_name -> idm.Role
	75, // 2: idm.DeleteRoleRequest.Query:type_name -> service.Query
	75, // 3: idm.SearchRoleRequest.Query:type_name -> service.Query
	14, // 4: idm.SearchRoleResponse.Role:type_name -> idm.Role
	76, // 5: idm.Role.Policies:type_name -> service.ResourcePolicy
	25, // 6: idm.CreateUserRequest.User:type_name -> idm.User
	25, // 7: idm.CreateUserResponse.User:type_name -> idm.User
	25, // 8: idm.BindUserResponse.User:type_name -> idm.User
	75, // 9: idm.DeleteUserRequest.Query:type_name -> service.Query
	75, // 10: idm.SearchUserRequest.Query:type_name -> service.Query
	25, // 11: idm.SearchUserResponse.User:type_name -> idm.User
	70, // 12: idm.User.Attributes:type_name -> idm.User.AttributesEntry
	14, // 13: idm.User.Roles:type_name -> idm.Role
	76, // 14: idm.User.Policies:type_name -> service.ResourcePolicy
	0,  // 15: idm.UserSingleQuery.NodeType:type_name -> idm.NodeType
	33, // 16: idm.CreateWorkspaceRequest.Workspace:type_name -> idm.Workspace
	33, // 17: idm.CreateWorkspaceResponse.Workspace:type_name -> idm.Workspace
	75, // 18: idm.DeleteWorkspaceRequest.Query:type_name -> service.Query
	75, // 19: idm.SearchWorkspaceRequest.Query:type_name -> service.Query
	33, // 20: idm.SearchWorkspaceResponse.Workspace:type_name -> idm.Workspace
	1,  // 21: idm.Workspace.Scope:type_name -> idm.WorkspaceScope
	76, // 22: idm.Workspace.Policies:type_name -> service.ResourcePolicy
	71, // 23: idm.Workspace.RootNodes:type_name -> idm.Workspace.RootNodesEntry
	1,  // 24: idm.WorkspaceSingleQuery.scope:type_name -> idm.WorkspaceScope
	46, // 25: idm.CreateACLRequest.ACL:type_name -> idm.ACL
	46, // 26: idm.CreateACLResponse.ACL:type_name -> idm.ACL
	75, // 27: idm.ExpireACLRequest.Query:type_name -> service.Query
	75, // 28: idm.DeleteACLRequest.Query:type_name -> service.Query
	75, // 29: idm.SearchACLRequest.Query:type_name -> service.Query
	46, // 30: idm.SearchACLResponse.ACL:type_name -> idm.ACL
	75, // 31: idm.RestoreACLRequest.Query:type_name -> service.Query
	45, // 32: idm.ACL.Action:type_name -> idm.ACLAction
	45, // 33: idm.ACLSingleQuery.Actions:type_name -> idm.ACLAction
	76, // 34: idm.UserMeta.Policies:type_name -> service.ResourcePolicy
	77, // 35: idm.UserMeta.ResolvedNode:type_name -> tree.Node
	76, // 36: idm.UserMetaNamespace.Policies:type_name -> service.ResourcePolicy
	5,  // 37: idm.UpdateUserMetaRequest.Operation:type_name -> idm.UpdateUserMetaRequest.UserMetaOp
	48, // 38: idm.UpdateUserMetaRequest.MetaDatas:type_name -> idm.UserMeta
	48, // 39: idm.UpdateUserMetaResponse.MetaDatas:type_name -> idm.UserMeta
	78, // 40: idm.SearchUserMetaRequest.ResourceQuery:type_name -> service.ResourcePolicyQuery
	48, // 41: idm.SearchUserMetaResponse.UserMeta:type_name -> idm.UserMeta
	6,  // 42: idm.UpdateUserMetaNamespaceRequest.Operation:type_name -> idm.UpdateUserMetaNamespaceRequest.UserMetaNsOp
	49, // 43: idm.UpdateUserMetaNamespaceRequest.Namespaces:type_name -> idm.UserMetaNamespace
	49, // 44: idm.UpdateUserMetaNamespaceResponse.Namespaces:type_name -> idm.UserMetaNamespace
	49, // 45: idm.ListUserMetaNamespaceResponse.UserMetaNamespace:type_name -> idm.UserMetaNamespace
	2,  // 46: idm.ChangeEvent.Type:type_name -> idm.ChangeEventType
	25, // 47: idm.ChangeEvent.User:type_name -> idm.User
	14, // 48: idm.ChangeEvent.Role:type_name -> idm.Role
	33, // 49: idm.ChangeEvent.Workspace:type_name -> idm.Workspace
	46, // 50: idm.ChangeEvent.Acl:type_name -> idm.ACL
	49, // 51: idm.ChangeEvent.MetaNamespace:type_name -> idm.UserMetaNamespace
	72, // 52: idm.ChangeEvent.Attributes:type_name -> idm.ChangeEvent.AttributesEntry
	73, // 53: idm.PolicyEngineRequest.Context:type_name -> idm.PolicyEngineRequest.ContextEntry
	3,  // 54: idm.Policy.effect:type_name -> idm.PolicyEffect
	74, // 55: idm.Policy.conditions:type_name -> idm.Policy.ConditionsEntry
	4,  // 56: idm.PolicyGroup.ResourceGroup:type_name -> idm.PolicyResourceGroup
	62, // 57: idm.PolicyGroup.Policies:type_name -> idm.Policy
	63, // 58: idm.StorePolicyGroupRequest.PolicyGroup:type_name -> idm.PolicyGroup
	63, // 59: idm.StorePolicyGroupResponse.PolicyGroup:type_name -> idm.PolicyGroup
	63, // 60: idm.DeletePolicyGroupRequest.PolicyGroup:type_name -> idm.PolicyGroup
	63, // 61: idm.ListPolicyGroupsResponse.PolicyGroups:type_name -> idm.PolicyGroup
	77, // 62: idm.Workspace.RootNodesEntry.value:type_name -> tree.Node
	61, // 63: idm.Policy.ConditionsEntry.value:type_name -> idm.PolicyCondition
	7,  // 64: idm.RoleService.CreateRole:input_type -> idm.CreateRoleRequest
	9,  // 65: idm.RoleService.DeleteRole:input_type -> idm.DeleteRoleRequest
	11, // 66: idm.RoleService.SearchRole:input_type -> idm.SearchRoleRequest
	11, // 67: idm.RoleService.StreamRole:input_type -> idm.SearchRoleRequest
	11, // 68: idm.RoleService.CountRole:input_type -> idm.SearchRoleRequest
	16, // 69: idm.UserService.CreateUser:input_type -> idm.CreateUserRequest
	20, // 70: idm.UserService.DeleteUser:input_type -> idm.DeleteUserRequest
	18, // 71: idm.UserService.BindUser:input_type -> idm.BindUserRequest
	22, // 72: idm.UserService.CountUser:input_type -> idm.SearchUserRequest
	22, // 73: idm.UserService.SearchUser:input_type -> idm.SearchUserRequest
	22, // 74: idm.UserService.StreamUser:input_type -> idm.SearchUserRequest
	27, // 75: idm.WorkspaceService.CreateWorkspace:input_type -> idm.CreateWorkspaceRequest
	29, // 76: idm.WorkspaceService.DeleteWorkspace:input_type -> idm.DeleteWorkspaceRequest
	31, // 77: idm.WorkspaceService.SearchWorkspace:input_type -> idm.SearchWorkspaceRequest
	31, // 78: idm.WorkspaceService.StreamWorkspace:input_type -> idm.SearchWorkspaceRequest
	35, // 79: idm.ACLService.CreateACL:input_type -> idm.CreateACLRequest
	37, // 80: idm.ACLService.ExpireACL:input_type -> idm.ExpireACLRequest
	39, // 81: idm.ACLService.DeleteACL:input_type -> idm.DeleteACLRequest
	41, // 82: idm.ACLService.SearchACL:input_type -> idm.SearchACLRequest
	41, // 83: idm.ACLService.StreamACL:input_type -> idm.SearchACLRequest
	43, // 84: idm.ACLService.RestoreACL:input_type -> idm.RestoreACLRequest
	50, // 85: idm.UserMetaService.UpdateUserMeta:input_type -> idm.UpdateUserMetaRequest
	52, // 86: idm.UserMetaService.SearchUserMeta:input_type -> idm.SearchUserMetaRequest
	54, // 87: idm.UserMetaService.UpdateUserMetaNamespace:input_type -> idm.UpdateUserMetaNamespaceRequest
	56, // 88: idm.UserMetaService.ListUserMetaNamespace:input_type -> idm.ListUserMetaNamespaceRequest
	59, // 89: idm.PolicyEngineService.IsAllowed:input_type -> idm.PolicyEngineRequest
	64, // 90: idm.PolicyEngineService.StorePolicyGroup:input_type -> idm.StorePolicyGroupRequest
	68, // 91: idm.PolicyEngineService.ListPolicyGroups:input_type -> idm.ListPolicyGroupsRequest
	68, // 92: idm.PolicyEngineService.StreamPolicyGroups:input_type -> idm.ListPolicyGroupsRequest
	66, // 93: idm.PolicyEngineService.DeletePolicyGroup:input_type -> idm.DeletePolicyGroupRequest
	8,  // 94: idm.RoleService.CreateRole:output_type -> idm.CreateRoleResponse
	10, // 95: idm.RoleService.DeleteRole:output_type -> idm.DeleteRoleResponse
	12, // 96: idm.RoleService.SearchRole:output_type -> idm.SearchRoleResponse
	12, // 97: idm.RoleService.StreamRole:output_type -> idm.SearchRoleResponse
	13, // 98: idm.RoleService.CountRole:output_type -> idm.CountRoleResponse
	17, // 99: idm.UserService.CreateUser:output_type -> idm.CreateUserResponse
	21, // 100: idm.UserService.DeleteUser:output_type -> idm.DeleteUserResponse
	19, // 101: idm.UserService.BindUser:output_type -> idm.BindUserResponse
	24, // 102: idm.UserService.CountUser:output_type -> idm.CountUserResponse
	23, // 103: idm.UserService.SearchUser:output_type -> idm.SearchUserResponse
	23, // 104: idm.UserService.StreamUser:output_type -> idm.SearchUserResponse
	28, // 105: idm.WorkspaceService.CreateWorkspace:output_type -> idm.CreateWorkspaceResponse
	30, // 106: idm.WorkspaceService.DeleteWorkspace:output_type -> idm.DeleteWorkspaceResponse
	32, // 107: idm.WorkspaceService.SearchWorkspace:output_type -> idm.SearchWorkspaceResponse
	32, // 108: idm.WorkspaceService.StreamWorkspace:output_type -> idm.SearchWorkspaceResponse
	36, // 109: idm.ACLService.CreateACL:output_type -> idm.CreateACLResponse
	38, // 110: idm.ACLService.ExpireACL:output_type -> idm.ExpireACLResponse
	40, // 111: idm.ACLService.DeleteACL:output_type -> idm.DeleteACLResponse
	42, // 112: idm.ACLService.SearchACL:output_type -> idm.SearchACLResponse
	42, // 113: idm.ACLService.StreamACL:output_type -> idm.SearchACLResponse
	44, // 114: idm.ACLService.RestoreACL:output_type -> idm.RestoreACLResponse
	51, // 115: idm.UserMetaService.UpdateUserMeta:output_type -> idm.UpdateUserMetaResponse
	53, // 116: idm.UserMetaService.SearchUserMeta:output_type -> idm.SearchUserMetaResponse
	55, // 117: idm.UserMetaService.UpdateUserMetaNamespace:output_type -> idm.UpdateUserMetaNamespaceResponse
	57, // 118: idm.UserMetaService.ListUserMetaNamespace:output_type -> idm.ListUserMetaNamespaceResponse
	60, // 119: idm.PolicyEngineService.IsAllowed:output_type -> idm.PolicyEngineResponse
	65, // 120: idm.PolicyEngineService.StorePolicyGroup:output_type -> idm.StorePolicyGroupResponse
	69, // 121: idm.PolicyEngineService.ListPolicyGroups:output_type -> idm.ListPolicyGroupsResponse
	63, // 122: idm.PolicyEngineService.StreamPolicyGroups:output_type -> idm.PolicyGroup
	67, // 123: idm.PolicyEngineService.DeletePolicyGroup:output_type -> idm.DeletePolicyGroupResponse
	94, // [94:124] is the sub-list for method output_type
	64, // [64:94] is the sub-list for method input_type
	64, // [64:64] is the sub-list for extension type_name
	64, // [64:64] is the sub-list for extension extendee
	0,  // [0:64] is the sub-list for field type_name
}

func init() { file_cells_idm_proto_init() }
func file_cells_idm_proto_init() {
	if File_cells_idm_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_idm_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRoleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountRoleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Role); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BindUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CountUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkspaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchWorkspaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Workspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExpireACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreACLRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RestoreACLResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACL); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ACLSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserMetaNamespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserMetaRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SearchUserMetaResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMetaNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateUserMetaNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMetaNamespaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListUserMetaNamespaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyEngineRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyEngineResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyCondition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PolicyGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorePolicyGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StorePolicyGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeletePolicyGroupResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyGroupsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_idm_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListPolicyGroupsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_idm_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   68,
			NumExtensions: 0,
			NumServices:   6,
		},
		GoTypes:           file_cells_idm_proto_goTypes,
		DependencyIndexes: file_cells_idm_proto_depIdxs,
		EnumInfos:         file_cells_idm_proto_enumTypes,
		MessageInfos:      file_cells_idm_proto_msgTypes,
	}.Build()
	File_cells_idm_proto = out.File
	file_cells_idm_proto_rawDesc = nil
	file_cells_idm_proto_goTypes = nil
	file_cells_idm_proto_depIdxs = nil
}
