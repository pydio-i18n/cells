// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceManagerClient is the client API for ServiceManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceManagerClient interface {
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
	Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error)
}

type serviceManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceManagerClient(cc grpc.ClientConnInterface) ServiceManagerClient {
	return &serviceManagerClient{cc}
}

func (c *serviceManagerClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceManager/Start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceManagerClient) Stop(ctx context.Context, in *StopRequest, opts ...grpc.CallOption) (*StopResponse, error) {
	out := new(StopResponse)
	err := c.cc.Invoke(ctx, "/service.ServiceManager/Stop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceManagerServer is the server API for ServiceManager service.
// All implementations must embed UnimplementedServiceManagerServer
// for forward compatibility
type ServiceManagerServer interface {
	Start(context.Context, *StartRequest) (*StartResponse, error)
	Stop(context.Context, *StopRequest) (*StopResponse, error)
	mustEmbedUnimplementedServiceManagerServer()
}

// UnimplementedServiceManagerServer must be embedded to have forward compatible implementations.
type UnimplementedServiceManagerServer struct {
}

func (UnimplementedServiceManagerServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedServiceManagerServer) Stop(context.Context, *StopRequest) (*StopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedServiceManagerServer) mustEmbedUnimplementedServiceManagerServer() {}

// UnsafeServiceManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceManagerServer will
// result in compilation errors.
type UnsafeServiceManagerServer interface {
	mustEmbedUnimplementedServiceManagerServer()
}

func RegisterServiceManagerServer(s grpc.ServiceRegistrar, srv ServiceManagerServer) {
	s.RegisterService(&ServiceManager_ServiceDesc, srv)
}

func _ServiceManager_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceManager/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceManager_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceManagerServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.ServiceManager/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceManagerServer).Stop(ctx, req.(*StopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceManager_ServiceDesc is the grpc.ServiceDesc for ServiceManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.ServiceManager",
	HandlerType: (*ServiceManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ServiceManager_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ServiceManager_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-service.proto",
}

// LoginModifierClient is the client API for LoginModifier service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LoginModifierClient interface {
	ModifyLogin(ctx context.Context, in *ModifyLoginRequest, opts ...grpc.CallOption) (*ModifyLoginResponse, error)
}

type loginModifierClient struct {
	cc grpc.ClientConnInterface
}

func NewLoginModifierClient(cc grpc.ClientConnInterface) LoginModifierClient {
	return &loginModifierClient{cc}
}

func (c *loginModifierClient) ModifyLogin(ctx context.Context, in *ModifyLoginRequest, opts ...grpc.CallOption) (*ModifyLoginResponse, error) {
	out := new(ModifyLoginResponse)
	err := c.cc.Invoke(ctx, "/service.LoginModifier/ModifyLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LoginModifierServer is the server API for LoginModifier service.
// All implementations must embed UnimplementedLoginModifierServer
// for forward compatibility
type LoginModifierServer interface {
	ModifyLogin(context.Context, *ModifyLoginRequest) (*ModifyLoginResponse, error)
	mustEmbedUnimplementedLoginModifierServer()
}

// UnimplementedLoginModifierServer must be embedded to have forward compatible implementations.
type UnimplementedLoginModifierServer struct {
}

func (UnimplementedLoginModifierServer) ModifyLogin(context.Context, *ModifyLoginRequest) (*ModifyLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModifyLogin not implemented")
}
func (UnimplementedLoginModifierServer) mustEmbedUnimplementedLoginModifierServer() {}

// UnsafeLoginModifierServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LoginModifierServer will
// result in compilation errors.
type UnsafeLoginModifierServer interface {
	mustEmbedUnimplementedLoginModifierServer()
}

func RegisterLoginModifierServer(s grpc.ServiceRegistrar, srv LoginModifierServer) {
	s.RegisterService(&LoginModifier_ServiceDesc, srv)
}

func _LoginModifier_ModifyLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModifyLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LoginModifierServer).ModifyLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/service.LoginModifier/ModifyLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LoginModifierServer).ModifyLogin(ctx, req.(*ModifyLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LoginModifier_ServiceDesc is the grpc.ServiceDesc for LoginModifier service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LoginModifier_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "service.LoginModifier",
	HandlerType: (*LoginModifierServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ModifyLogin",
			Handler:    _LoginModifier_ModifyLogin_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-service.proto",
}
