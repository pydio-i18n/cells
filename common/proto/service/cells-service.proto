syntax = "proto3";

import "google/protobuf/any.proto";
import "google/protobuf/empty.proto";
import "orm/orm.proto";

package service;

option go_package="github.com/pydio/cells/common/proto/service";

enum OperationType {
    OR = 0;
    AND = 1;
}

enum ResourcePolicyAction {
    ANY = 0;
    OWNER = 1;
    READ = 2;
    WRITE = 3;
    EDIT_RULES = 4;
}

message Query {
    repeated google.protobuf.Any SubQueries = 1;
    OperationType Operation = 2;
    ResourcePolicyQuery ResourcePolicyQuery = 3;
    int64 Offset = 4;
    int64 Limit = 5;
    int32 groupBy = 6;
}

message ResourcePolicyQuery {
    repeated string Subjects = 1;
    bool Empty = 2;
    bool Any = 3;
}

message ResourcePolicy {
    option (orm.ormPolicy).enabled = true;

    int64 id = 1                    [(orm.orm).gorm = {column: "id"; autoIncrement: true;}];
    string Resource = 2             [(orm.orm).gorm = {column: "resource";}];
    ResourcePolicyAction Action = 3 [(orm.orm).gorm = {column: "action";}];
    string Subject = 4              [(orm.orm).gorm = {column: "subject";}];
    enum PolicyEffect {
        deny = 0;
        allow = 1;
    }
    PolicyEffect Effect = 5         [(orm.orm).gorm = {column: "effect";}];
    string JsonConditions = 6       [(orm.orm).gorm = {column: "conditions";}];
}

service ServiceManager {
    rpc Start(StartRequest) returns (StartResponse);
    rpc Stop(StopRequest) returns (StopResponse);
}

message StartRequest {
    string name = 1;
}

message StartResponse {
    bool OK = 1;
}

message StopRequest {
    string name = 1;
}

message StopResponse {
    bool OK = 1;
}

service Archiver {
    rpc Archive(Query) returns (ArchiveResponse);
}

message ArchiveResponse {
    bool OK = 1;
}

// TODO - move from there
message ChangesArchiveQuery {
    uint64 RemainingRows = 1;
}

message Error {
    string ID = 1;
    uint32 Code = 2;
    string Status = 3;
    string Details = 4;
}