syntax = "proto3";

import "orm.proto";

package encryption;

option go_package="github.com/pydio/cells/common/proto/encryption";

message Export {
    // Name of exporter
    string By = 1;
    // Date of export
    int32 Date = 2;
}

message Import {
    // Name of importer
    string By = 1;
    // Date of import
    int32 Date = 3;
}

message KeyInfo {
    repeated Export Exports = 1;
    repeated Import Imports = 2;
}

message Key {
    // Key owner
    string Owner = 1;
    // Key ID
    string ID = 2 ;
    // Key label
    string Label = 3;
    // Key content
    string Content = 4;
    // Key creation date
    int32 CreationDate = 5;
    // Additional key info
    KeyInfo Info = 6;
}

// ==========================================================
// * User Key store
// ==========================================================

service UserKeyStore {
    rpc AddKey (AddKeyRequest) returns (AddKeyResponse) {
    };
    rpc GetKey (GetKeyRequest) returns (GetKeyResponse) {
    };

    rpc AdminListKeys (AdminListKeysRequest) returns (AdminListKeysResponse) {
    };
    rpc AdminCreateKey (AdminCreateKeyRequest) returns (AdminCreateKeyResponse) {
    };
    rpc AdminDeleteKey (AdminDeleteKeyRequest) returns (AdminDeleteKeyResponse) {
    };
    rpc AdminExportKey (AdminExportKeyRequest) returns (AdminExportKeyResponse) {
    };
    rpc AdminImportKey (AdminImportKeyRequest) returns (AdminImportKeyResponse) {
    };
}

message AddKeyRequest {
    // Key to add
    Key Key = 1;
    // Key password as string
    string StrPassword = 2;
}

message AddKeyResponse {
    bool Success = 1;
}

message GetKeyRequest {
    string Owner = 1;
    string KeyID = 2;
    string StrPassword = 3;
}

message GetKeyResponse {
    Key Key = 1;
}


message AdminListKeysRequest {
    bool All = 1;
}

message AdminListKeysResponse {
    repeated Key Keys = 1;
}

message AdminDeleteKeyRequest {
    // Id of the key to delete
    string KeyID = 1;
}

message AdminDeleteKeyResponse {
    bool Success = 1;
}

message AdminExportKeyRequest {
    // Id of the key to export
    string KeyID = 1;
    // Associated password as string
    string StrPassword = 2;
}

message AdminExportKeyResponse {
    Key Key = 1;
}

message AdminImportKeyRequest {
    // Imported key data
    Key Key = 1;
    // Key password
    string StrPassword = 2;
    // Whether to override if a key with same ID already exists
    bool Override = 3;
}

message AdminImportKeyResponse {
    bool Success = 1;
}

message AdminCreateKeyRequest {
    // Create a key with this ID
    string KeyID = 1;
    // Provide label for the newly created key
    string Label = 2;
}

message AdminCreateKeyResponse {
    bool Success = 1;
}

// ==========================================================
// * File Key Manager
// ==========================================================

service NodeKeyManager {
    rpc GetNodeInfo (GetNodeInfoRequest) returns (GetNodeInfoResponse);
    rpc GetNodePlainSize (GetNodePlainSizeRequest) returns (GetNodePlainSizeResponse);
    rpc SetNodeInfo (stream SetNodeInfoRequest) returns (SetNodeInfoResponse);
    rpc CopyNodeInfo (CopyNodeInfoRequest) returns (CopyNodeInfoResponse);

    rpc DeleteNode (DeleteNodeRequest) returns (DeleteNodeResponse);
    rpc DeleteNodeKey (DeleteNodeKeyRequest) returns (DeleteNodeKeyResponse);
    rpc DeleteNodeSharedKey (DeleteNodeSharedKeyRequest) returns (DeleteNodeSharedKeyResponse);
}

message NodeKey {
    option (options.ormPolicy).enabled = true;

    string NodeId = 1  [(options.orm).gorm = {column: "node_id";}];
    string UserId = 2  [(options.orm).gorm = {column: "user_id";}];
    string OwnerId = 3 [(options.orm).gorm = {column: "owner_id";}];
    bytes KeyData = 6  [(options.orm).gorm = {column: "key_data";}];
}

message Node {
    option (options.ormPolicy).enabled = true;

    string NodeId = 1 [(options.orm).gorm = {column: "node_id";}];
    bool Legacy = 2   [(options.orm).gorm = {column: "legacy";}];
}

message NodeInfo {
    Node Node = 1;
    NodeKey NodeKey = 2;
    Block Block = 3;
}

message Block {
    string OwnerId = 1;
    uint32 PartId = 2;
    uint32 Position = 3;
    uint32 HeaderSize = 4;
    uint32 BlockSize = 5;
    bytes Nonce = 6;
}

message RangedBlock {
    option (options.ormPolicy).enabled = true;

    string OwnerId = 1    [(options.orm).gorm = {column: "owner";}];
    uint32 PartId = 2     [(options.orm).gorm = {column: "part_id";}];
    uint32 SeqStart = 3   [(options.orm).gorm = {column: "seq_start";}];
    uint32 SeqEnd = 4     [(options.orm).gorm = {column: "seq_end";}];
    uint32 HeaderSize = 5 [(options.orm).gorm = {column: "block_header_size";}];
    uint32 BlockSize = 6  [(options.orm).gorm = {column: "block_data_size";}];

    string NodeId = 7      [(options.orm).gorm = {column: "node_id";}];
    bytes Nonce = 8       [(options.orm).gorm = {column: "nonce";}];
}

message GetNodeInfoRequest {
    string UserId = 1;
    string NodeId = 2;
    bool WithRange = 3;
    int64 PlainOffset = 4;
    int64 PlainLength = 5;
}
message GetNodeInfoResponse {
    NodeInfo NodeInfo = 1;
    int64 HeadSKippedPlainBytesCount = 2;
    bool WithRange = 3;
    int64 EncryptedOffset = 4;
    int64 EncryptedCount = 5;
}

message GetNodePlainSizeRequest {
    string UserId = 1;
    string NodeId = 2;
}
message GetNodePlainSizeResponse {
    int64 Size = 1;
}

message SetNodeInfoRequest {
    string Action = 1;
    SetNodeKeyRequest SetNodeKey = 2;
    SetNodeBlockRequest SetBlock = 3;
}

message SetNodeInfoResponse {
    string ErrorText = 1;
    SetNodeKeyResponse SetNodeKey = 2;
    SetNodeBlockResponse SetBlock = 3;
}

message DeleteNodeRequest {
    string NodeId = 1;
}
message DeleteNodeResponse {
}

message DeleteNodeKeyRequest {
    string UserId = 1;
    string NodeId = 2;
}
message DeleteNodeKeyResponse {}

message DeleteNodeSharedKeyRequest {
    string UserId = 1;
    string OwnerId = 2;
    string NodeId = 3;
}
message DeleteNodeSharedKeyResponse {}

message SetNodeKeyRequest {
    NodeKey NodeKey = 1;
}
message SetNodeKeyResponse {}

message SetNodeBlockRequest {
    string NodeUuid = 1;
    Block Block = 2;
}
message SetNodeBlockResponse {}

message CopyNodeInfoRequest {
    string NodeUuid = 1;
    string NodeCopyUuid = 2;
}
message CopyNodeInfoResponse {}