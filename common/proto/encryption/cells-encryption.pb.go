// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: cells-encryption.proto

package encryption

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Export struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of exporter
	By string `protobuf:"bytes,1,opt,name=By,proto3" json:"By,omitempty"`
	// Date of export
	Date int32 `protobuf:"varint,2,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *Export) Reset() {
	*x = Export{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Export) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Export) ProtoMessage() {}

func (x *Export) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Export.ProtoReflect.Descriptor instead.
func (*Export) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{0}
}

func (x *Export) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *Export) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

type Import struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of importer
	By string `protobuf:"bytes,1,opt,name=By,proto3" json:"By,omitempty"`
	// Date of import
	Date int32 `protobuf:"varint,3,opt,name=Date,proto3" json:"Date,omitempty"`
}

func (x *Import) Reset() {
	*x = Import{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Import) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Import) ProtoMessage() {}

func (x *Import) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Import.ProtoReflect.Descriptor instead.
func (*Import) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{1}
}

func (x *Import) GetBy() string {
	if x != nil {
		return x.By
	}
	return ""
}

func (x *Import) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

type KeyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exports []*Export `protobuf:"bytes,1,rep,name=Exports,proto3" json:"Exports,omitempty"`
	Imports []*Import `protobuf:"bytes,2,rep,name=Imports,proto3" json:"Imports,omitempty"`
}

func (x *KeyInfo) Reset() {
	*x = KeyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyInfo) ProtoMessage() {}

func (x *KeyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyInfo.ProtoReflect.Descriptor instead.
func (*KeyInfo) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{2}
}

func (x *KeyInfo) GetExports() []*Export {
	if x != nil {
		return x.Exports
	}
	return nil
}

func (x *KeyInfo) GetImports() []*Import {
	if x != nil {
		return x.Imports
	}
	return nil
}

type Key struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key owner
	Owner string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	// Key ID
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// Key label
	Label string `protobuf:"bytes,3,opt,name=Label,proto3" json:"Label,omitempty"`
	// Key content
	Content string `protobuf:"bytes,4,opt,name=Content,proto3" json:"Content,omitempty"`
	// Key creation date
	CreationDate int32 `protobuf:"varint,5,opt,name=CreationDate,proto3" json:"CreationDate,omitempty"`
	// Additional key info
	Info *KeyInfo `protobuf:"bytes,6,opt,name=Info,proto3" json:"Info,omitempty"`
}

func (x *Key) Reset() {
	*x = Key{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Key) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Key) ProtoMessage() {}

func (x *Key) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Key.ProtoReflect.Descriptor instead.
func (*Key) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{3}
}

func (x *Key) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *Key) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *Key) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Key) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Key) GetCreationDate() int32 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *Key) GetInfo() *KeyInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type AddKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Key to add
	Key *Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Key password as string
	StrPassword string `protobuf:"bytes,2,opt,name=StrPassword,proto3" json:"StrPassword,omitempty"`
}

func (x *AddKeyRequest) Reset() {
	*x = AddKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyRequest) ProtoMessage() {}

func (x *AddKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyRequest.ProtoReflect.Descriptor instead.
func (*AddKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{4}
}

func (x *AddKeyRequest) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AddKeyRequest) GetStrPassword() string {
	if x != nil {
		return x.StrPassword
	}
	return ""
}

type AddKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *AddKeyResponse) Reset() {
	*x = AddKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddKeyResponse) ProtoMessage() {}

func (x *AddKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddKeyResponse.ProtoReflect.Descriptor instead.
func (*AddKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{5}
}

func (x *AddKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Owner       string `protobuf:"bytes,1,opt,name=Owner,proto3" json:"Owner,omitempty"`
	KeyID       string `protobuf:"bytes,2,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	StrPassword string `protobuf:"bytes,3,opt,name=StrPassword,proto3" json:"StrPassword,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{6}
}

func (x *GetKeyRequest) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

func (x *GetKeyRequest) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *GetKeyRequest) GetStrPassword() string {
	if x != nil {
		return x.StrPassword
	}
	return ""
}

type GetKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *GetKeyResponse) Reset() {
	*x = GetKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResponse) ProtoMessage() {}

func (x *GetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResponse.ProtoReflect.Descriptor instead.
func (*GetKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{7}
}

func (x *GetKeyResponse) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

type AdminListKeysRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All bool `protobuf:"varint,1,opt,name=All,proto3" json:"All,omitempty"`
}

func (x *AdminListKeysRequest) Reset() {
	*x = AdminListKeysRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListKeysRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListKeysRequest) ProtoMessage() {}

func (x *AdminListKeysRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListKeysRequest.ProtoReflect.Descriptor instead.
func (*AdminListKeysRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{8}
}

func (x *AdminListKeysRequest) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

type AdminListKeysResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keys []*Key `protobuf:"bytes,1,rep,name=Keys,proto3" json:"Keys,omitempty"`
}

func (x *AdminListKeysResponse) Reset() {
	*x = AdminListKeysResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminListKeysResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminListKeysResponse) ProtoMessage() {}

func (x *AdminListKeysResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminListKeysResponse.ProtoReflect.Descriptor instead.
func (*AdminListKeysResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{9}
}

func (x *AdminListKeysResponse) GetKeys() []*Key {
	if x != nil {
		return x.Keys
	}
	return nil
}

type AdminDeleteKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the key to delete
	KeyID string `protobuf:"bytes,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
}

func (x *AdminDeleteKeyRequest) Reset() {
	*x = AdminDeleteKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteKeyRequest) ProtoMessage() {}

func (x *AdminDeleteKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteKeyRequest.ProtoReflect.Descriptor instead.
func (*AdminDeleteKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{10}
}

func (x *AdminDeleteKeyRequest) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

type AdminDeleteKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *AdminDeleteKeyResponse) Reset() {
	*x = AdminDeleteKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminDeleteKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminDeleteKeyResponse) ProtoMessage() {}

func (x *AdminDeleteKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminDeleteKeyResponse.ProtoReflect.Descriptor instead.
func (*AdminDeleteKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{11}
}

func (x *AdminDeleteKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminExportKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of the key to export
	KeyID string `protobuf:"bytes,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	// Associated password as string
	StrPassword string `protobuf:"bytes,2,opt,name=StrPassword,proto3" json:"StrPassword,omitempty"`
}

func (x *AdminExportKeyRequest) Reset() {
	*x = AdminExportKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminExportKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminExportKeyRequest) ProtoMessage() {}

func (x *AdminExportKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminExportKeyRequest.ProtoReflect.Descriptor instead.
func (*AdminExportKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{12}
}

func (x *AdminExportKeyRequest) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *AdminExportKeyRequest) GetStrPassword() string {
	if x != nil {
		return x.StrPassword
	}
	return ""
}

type AdminExportKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key *Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *AdminExportKeyResponse) Reset() {
	*x = AdminExportKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminExportKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminExportKeyResponse) ProtoMessage() {}

func (x *AdminExportKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminExportKeyResponse.ProtoReflect.Descriptor instead.
func (*AdminExportKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{13}
}

func (x *AdminExportKeyResponse) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

type AdminImportKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Imported key data
	Key *Key `protobuf:"bytes,1,opt,name=Key,proto3" json:"Key,omitempty"`
	// Key password
	StrPassword string `protobuf:"bytes,2,opt,name=StrPassword,proto3" json:"StrPassword,omitempty"`
	// Whether to override if a key with same ID already exists
	Override bool `protobuf:"varint,3,opt,name=Override,proto3" json:"Override,omitempty"`
}

func (x *AdminImportKeyRequest) Reset() {
	*x = AdminImportKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminImportKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminImportKeyRequest) ProtoMessage() {}

func (x *AdminImportKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminImportKeyRequest.ProtoReflect.Descriptor instead.
func (*AdminImportKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{14}
}

func (x *AdminImportKeyRequest) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *AdminImportKeyRequest) GetStrPassword() string {
	if x != nil {
		return x.StrPassword
	}
	return ""
}

func (x *AdminImportKeyRequest) GetOverride() bool {
	if x != nil {
		return x.Override
	}
	return false
}

type AdminImportKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *AdminImportKeyResponse) Reset() {
	*x = AdminImportKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminImportKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminImportKeyResponse) ProtoMessage() {}

func (x *AdminImportKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminImportKeyResponse.ProtoReflect.Descriptor instead.
func (*AdminImportKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{15}
}

func (x *AdminImportKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type AdminCreateKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Create a key with this ID
	KeyID string `protobuf:"bytes,1,opt,name=KeyID,proto3" json:"KeyID,omitempty"`
	// Provide label for the newly created key
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
}

func (x *AdminCreateKeyRequest) Reset() {
	*x = AdminCreateKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateKeyRequest) ProtoMessage() {}

func (x *AdminCreateKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateKeyRequest.ProtoReflect.Descriptor instead.
func (*AdminCreateKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{16}
}

func (x *AdminCreateKeyRequest) GetKeyID() string {
	if x != nil {
		return x.KeyID
	}
	return ""
}

func (x *AdminCreateKeyRequest) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

type AdminCreateKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *AdminCreateKeyResponse) Reset() {
	*x = AdminCreateKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdminCreateKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdminCreateKeyResponse) ProtoMessage() {}

func (x *AdminCreateKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdminCreateKeyResponse.ProtoReflect.Descriptor instead.
func (*AdminCreateKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{17}
}

func (x *AdminCreateKeyResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type NodeKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId  string `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	UserId  string `protobuf:"bytes,2,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OwnerId string `protobuf:"bytes,3,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	KeyData []byte `protobuf:"bytes,6,opt,name=KeyData,proto3" json:"KeyData,omitempty"`
}

func (x *NodeKey) Reset() {
	*x = NodeKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeKey) ProtoMessage() {}

func (x *NodeKey) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeKey.ProtoReflect.Descriptor instead.
func (*NodeKey) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{18}
}

func (x *NodeKey) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *NodeKey) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *NodeKey) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *NodeKey) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Legacy bool   `protobuf:"varint,2,opt,name=Legacy,proto3" json:"Legacy,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{19}
}

func (x *Node) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Node) GetLegacy() bool {
	if x != nil {
		return x.Legacy
	}
	return false
}

type NodeInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node    *Node    `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	NodeKey *NodeKey `protobuf:"bytes,2,opt,name=NodeKey,proto3" json:"NodeKey,omitempty"`
	Block   *Block   `protobuf:"bytes,3,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *NodeInfo) Reset() {
	*x = NodeInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeInfo) ProtoMessage() {}

func (x *NodeInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeInfo.ProtoReflect.Descriptor instead.
func (*NodeInfo) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{20}
}

func (x *NodeInfo) GetNode() *Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *NodeInfo) GetNodeKey() *NodeKey {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

func (x *NodeInfo) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId    string `protobuf:"bytes,1,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	PartId     uint32 `protobuf:"varint,2,opt,name=PartId,proto3" json:"PartId,omitempty"`
	Position   uint32 `protobuf:"varint,3,opt,name=Position,proto3" json:"Position,omitempty"`
	HeaderSize uint32 `protobuf:"varint,4,opt,name=HeaderSize,proto3" json:"HeaderSize,omitempty"`
	BlockSize  uint32 `protobuf:"varint,5,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	Nonce      []byte `protobuf:"bytes,6,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{21}
}

func (x *Block) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *Block) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *Block) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *Block) GetHeaderSize() uint32 {
	if x != nil {
		return x.HeaderSize
	}
	return 0
}

func (x *Block) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *Block) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type RangedBlock struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OwnerId    string `protobuf:"bytes,1,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	PartId     uint32 `protobuf:"varint,2,opt,name=PartId,proto3" json:"PartId,omitempty"`
	SeqStart   uint32 `protobuf:"varint,3,opt,name=SeqStart,proto3" json:"SeqStart,omitempty"`
	SeqEnd     uint32 `protobuf:"varint,4,opt,name=SeqEnd,proto3" json:"SeqEnd,omitempty"`
	HeaderSize uint32 `protobuf:"varint,5,opt,name=HeaderSize,proto3" json:"HeaderSize,omitempty"`
	BlockSize  uint32 `protobuf:"varint,6,opt,name=BlockSize,proto3" json:"BlockSize,omitempty"`
	NodeId     string `protobuf:"bytes,7,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	Nonce      []byte `protobuf:"bytes,8,opt,name=Nonce,proto3" json:"Nonce,omitempty"`
}

func (x *RangedBlock) Reset() {
	*x = RangedBlock{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RangedBlock) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RangedBlock) ProtoMessage() {}

func (x *RangedBlock) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RangedBlock.ProtoReflect.Descriptor instead.
func (*RangedBlock) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{22}
}

func (x *RangedBlock) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *RangedBlock) GetPartId() uint32 {
	if x != nil {
		return x.PartId
	}
	return 0
}

func (x *RangedBlock) GetSeqStart() uint32 {
	if x != nil {
		return x.SeqStart
	}
	return 0
}

func (x *RangedBlock) GetSeqEnd() uint32 {
	if x != nil {
		return x.SeqEnd
	}
	return 0
}

func (x *RangedBlock) GetHeaderSize() uint32 {
	if x != nil {
		return x.HeaderSize
	}
	return 0
}

func (x *RangedBlock) GetBlockSize() uint32 {
	if x != nil {
		return x.BlockSize
	}
	return 0
}

func (x *RangedBlock) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *RangedBlock) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

type GetNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	NodeId      string `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
	WithRange   bool   `protobuf:"varint,3,opt,name=WithRange,proto3" json:"WithRange,omitempty"`
	PlainOffset int64  `protobuf:"varint,4,opt,name=PlainOffset,proto3" json:"PlainOffset,omitempty"`
	PlainLength int64  `protobuf:"varint,5,opt,name=PlainLength,proto3" json:"PlainLength,omitempty"`
}

func (x *GetNodeInfoRequest) Reset() {
	*x = GetNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoRequest) ProtoMessage() {}

func (x *GetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*GetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{23}
}

func (x *GetNodeInfoRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetNodeInfoRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *GetNodeInfoRequest) GetWithRange() bool {
	if x != nil {
		return x.WithRange
	}
	return false
}

func (x *GetNodeInfoRequest) GetPlainOffset() int64 {
	if x != nil {
		return x.PlainOffset
	}
	return 0
}

func (x *GetNodeInfoRequest) GetPlainLength() int64 {
	if x != nil {
		return x.PlainLength
	}
	return 0
}

type GetNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeInfo                   *NodeInfo `protobuf:"bytes,1,opt,name=NodeInfo,proto3" json:"NodeInfo,omitempty"`
	HeadSKippedPlainBytesCount int64     `protobuf:"varint,2,opt,name=HeadSKippedPlainBytesCount,proto3" json:"HeadSKippedPlainBytesCount,omitempty"`
	WithRange                  bool      `protobuf:"varint,3,opt,name=WithRange,proto3" json:"WithRange,omitempty"`
	EncryptedOffset            int64     `protobuf:"varint,4,opt,name=EncryptedOffset,proto3" json:"EncryptedOffset,omitempty"`
	EncryptedCount             int64     `protobuf:"varint,5,opt,name=EncryptedCount,proto3" json:"EncryptedCount,omitempty"`
}

func (x *GetNodeInfoResponse) Reset() {
	*x = GetNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodeInfoResponse) ProtoMessage() {}

func (x *GetNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*GetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{24}
}

func (x *GetNodeInfoResponse) GetNodeInfo() *NodeInfo {
	if x != nil {
		return x.NodeInfo
	}
	return nil
}

func (x *GetNodeInfoResponse) GetHeadSKippedPlainBytesCount() int64 {
	if x != nil {
		return x.HeadSKippedPlainBytesCount
	}
	return 0
}

func (x *GetNodeInfoResponse) GetWithRange() bool {
	if x != nil {
		return x.WithRange
	}
	return false
}

func (x *GetNodeInfoResponse) GetEncryptedOffset() int64 {
	if x != nil {
		return x.EncryptedOffset
	}
	return 0
}

func (x *GetNodeInfoResponse) GetEncryptedCount() int64 {
	if x != nil {
		return x.EncryptedCount
	}
	return 0
}

type GetNodePlainSizeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	NodeId string `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *GetNodePlainSizeRequest) Reset() {
	*x = GetNodePlainSizeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodePlainSizeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodePlainSizeRequest) ProtoMessage() {}

func (x *GetNodePlainSizeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodePlainSizeRequest.ProtoReflect.Descriptor instead.
func (*GetNodePlainSizeRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{25}
}

func (x *GetNodePlainSizeRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *GetNodePlainSizeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type GetNodePlainSizeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Size int64 `protobuf:"varint,1,opt,name=Size,proto3" json:"Size,omitempty"`
}

func (x *GetNodePlainSizeResponse) Reset() {
	*x = GetNodePlainSizeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetNodePlainSizeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetNodePlainSizeResponse) ProtoMessage() {}

func (x *GetNodePlainSizeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetNodePlainSizeResponse.ProtoReflect.Descriptor instead.
func (*GetNodePlainSizeResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{26}
}

func (x *GetNodePlainSizeResponse) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

type SetNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Action     string               `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	SetNodeKey *SetNodeKeyRequest   `protobuf:"bytes,2,opt,name=SetNodeKey,proto3" json:"SetNodeKey,omitempty"`
	SetBlock   *SetNodeBlockRequest `protobuf:"bytes,3,opt,name=SetBlock,proto3" json:"SetBlock,omitempty"`
}

func (x *SetNodeInfoRequest) Reset() {
	*x = SetNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeInfoRequest) ProtoMessage() {}

func (x *SetNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*SetNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{27}
}

func (x *SetNodeInfoRequest) GetAction() string {
	if x != nil {
		return x.Action
	}
	return ""
}

func (x *SetNodeInfoRequest) GetSetNodeKey() *SetNodeKeyRequest {
	if x != nil {
		return x.SetNodeKey
	}
	return nil
}

func (x *SetNodeInfoRequest) GetSetBlock() *SetNodeBlockRequest {
	if x != nil {
		return x.SetBlock
	}
	return nil
}

type SetNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorText  string                `protobuf:"bytes,1,opt,name=ErrorText,proto3" json:"ErrorText,omitempty"`
	SetNodeKey *SetNodeKeyResponse   `protobuf:"bytes,2,opt,name=SetNodeKey,proto3" json:"SetNodeKey,omitempty"`
	SetBlock   *SetNodeBlockResponse `protobuf:"bytes,3,opt,name=SetBlock,proto3" json:"SetBlock,omitempty"`
}

func (x *SetNodeInfoResponse) Reset() {
	*x = SetNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeInfoResponse) ProtoMessage() {}

func (x *SetNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*SetNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{28}
}

func (x *SetNodeInfoResponse) GetErrorText() string {
	if x != nil {
		return x.ErrorText
	}
	return ""
}

func (x *SetNodeInfoResponse) GetSetNodeKey() *SetNodeKeyResponse {
	if x != nil {
		return x.SetNodeKey
	}
	return nil
}

func (x *SetNodeInfoResponse) GetSetBlock() *SetNodeBlockResponse {
	if x != nil {
		return x.SetBlock
	}
	return nil
}

type DeleteNodeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId string `protobuf:"bytes,1,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *DeleteNodeRequest) Reset() {
	*x = DeleteNodeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeRequest) ProtoMessage() {}

func (x *DeleteNodeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{29}
}

func (x *DeleteNodeRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DeleteNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodeResponse) Reset() {
	*x = DeleteNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeResponse) ProtoMessage() {}

func (x *DeleteNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{30}
}

type DeleteNodeKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	NodeId string `protobuf:"bytes,2,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *DeleteNodeKeyRequest) Reset() {
	*x = DeleteNodeKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeKeyRequest) ProtoMessage() {}

func (x *DeleteNodeKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{31}
}

func (x *DeleteNodeKeyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteNodeKeyRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DeleteNodeKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodeKeyResponse) Reset() {
	*x = DeleteNodeKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeKeyResponse) ProtoMessage() {}

func (x *DeleteNodeKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{32}
}

type DeleteNodeSharedKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId  string `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	OwnerId string `protobuf:"bytes,2,opt,name=OwnerId,proto3" json:"OwnerId,omitempty"`
	NodeId  string `protobuf:"bytes,3,opt,name=NodeId,proto3" json:"NodeId,omitempty"`
}

func (x *DeleteNodeSharedKeyRequest) Reset() {
	*x = DeleteNodeSharedKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeSharedKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeSharedKeyRequest) ProtoMessage() {}

func (x *DeleteNodeSharedKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeSharedKeyRequest.ProtoReflect.Descriptor instead.
func (*DeleteNodeSharedKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{33}
}

func (x *DeleteNodeSharedKeyRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *DeleteNodeSharedKeyRequest) GetOwnerId() string {
	if x != nil {
		return x.OwnerId
	}
	return ""
}

func (x *DeleteNodeSharedKeyRequest) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

type DeleteNodeSharedKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DeleteNodeSharedKeyResponse) Reset() {
	*x = DeleteNodeSharedKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteNodeSharedKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteNodeSharedKeyResponse) ProtoMessage() {}

func (x *DeleteNodeSharedKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteNodeSharedKeyResponse.ProtoReflect.Descriptor instead.
func (*DeleteNodeSharedKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{34}
}

type SetNodeKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeKey *NodeKey `protobuf:"bytes,1,opt,name=NodeKey,proto3" json:"NodeKey,omitempty"`
}

func (x *SetNodeKeyRequest) Reset() {
	*x = SetNodeKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeKeyRequest) ProtoMessage() {}

func (x *SetNodeKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeKeyRequest.ProtoReflect.Descriptor instead.
func (*SetNodeKeyRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{35}
}

func (x *SetNodeKeyRequest) GetNodeKey() *NodeKey {
	if x != nil {
		return x.NodeKey
	}
	return nil
}

type SetNodeKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNodeKeyResponse) Reset() {
	*x = SetNodeKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeKeyResponse) ProtoMessage() {}

func (x *SetNodeKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeKeyResponse.ProtoReflect.Descriptor instead.
func (*SetNodeKeyResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{36}
}

type SetNodeBlockRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUuid string `protobuf:"bytes,1,opt,name=NodeUuid,proto3" json:"NodeUuid,omitempty"`
	Block    *Block `protobuf:"bytes,2,opt,name=Block,proto3" json:"Block,omitempty"`
}

func (x *SetNodeBlockRequest) Reset() {
	*x = SetNodeBlockRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeBlockRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeBlockRequest) ProtoMessage() {}

func (x *SetNodeBlockRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeBlockRequest.ProtoReflect.Descriptor instead.
func (*SetNodeBlockRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{37}
}

func (x *SetNodeBlockRequest) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *SetNodeBlockRequest) GetBlock() *Block {
	if x != nil {
		return x.Block
	}
	return nil
}

type SetNodeBlockResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetNodeBlockResponse) Reset() {
	*x = SetNodeBlockResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetNodeBlockResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetNodeBlockResponse) ProtoMessage() {}

func (x *SetNodeBlockResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetNodeBlockResponse.ProtoReflect.Descriptor instead.
func (*SetNodeBlockResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{38}
}

type CopyNodeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeUuid     string `protobuf:"bytes,1,opt,name=NodeUuid,proto3" json:"NodeUuid,omitempty"`
	NodeCopyUuid string `protobuf:"bytes,2,opt,name=NodeCopyUuid,proto3" json:"NodeCopyUuid,omitempty"`
}

func (x *CopyNodeInfoRequest) Reset() {
	*x = CopyNodeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyNodeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNodeInfoRequest) ProtoMessage() {}

func (x *CopyNodeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNodeInfoRequest.ProtoReflect.Descriptor instead.
func (*CopyNodeInfoRequest) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{39}
}

func (x *CopyNodeInfoRequest) GetNodeUuid() string {
	if x != nil {
		return x.NodeUuid
	}
	return ""
}

func (x *CopyNodeInfoRequest) GetNodeCopyUuid() string {
	if x != nil {
		return x.NodeCopyUuid
	}
	return ""
}

type CopyNodeInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CopyNodeInfoResponse) Reset() {
	*x = CopyNodeInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_encryption_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CopyNodeInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CopyNodeInfoResponse) ProtoMessage() {}

func (x *CopyNodeInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_encryption_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CopyNodeInfoResponse.ProtoReflect.Descriptor instead.
func (*CopyNodeInfoResponse) Descriptor() ([]byte, []int) {
	return file_cells_encryption_proto_rawDescGZIP(), []int{40}
}

var File_cells_encryption_proto protoreflect.FileDescriptor

var file_cells_encryption_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x09, 0x6f, 0x72, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x2c, 0x0a, 0x06, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x2c, 0x0a,
	0x06, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x42, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x42, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x44, 0x61, 0x74, 0x65, 0x22, 0x65, 0x0a, 0x07, 0x4b,
	0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2c, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x73, 0x12, 0x2c, 0x0a, 0x07, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x07, 0x49, 0x6d, 0x70, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0xa8, 0x01, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x54, 0x0a,
	0x0d, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21,
	0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65,
	0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77,
	0x6f, 0x72, 0x64, 0x22, 0x2a, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22,
	0x5d, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x33,
	0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x21, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x4b, 0x65, 0x79, 0x22, 0x28, 0x0a, 0x14, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x41,
	0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x41, 0x6c, 0x6c, 0x22, 0x3c, 0x0a,
	0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x4b, 0x65, 0x79, 0x73, 0x22, 0x2d, 0x0a, 0x15, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x4f,
	0x0a, 0x15, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x20, 0x0a,
	0x0b, 0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x3b, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x4b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x78, 0x0a, 0x15,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4b, 0x65, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x72, 0x50,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53,
	0x74, 0x72, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4f, 0x76,
	0x65, 0x72, 0x72, 0x69, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49,
	0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x43, 0x0a, 0x15, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x4b, 0x65, 0x79, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x22,
	0x32, 0x0a, 0x16, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x22, 0xbb, 0x01, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x27, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64,
	0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09,
	0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x10, 0xba, 0xb9, 0x19, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x6f, 0x77, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2a, 0x0a,
	0x07, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x10,
	0xba, 0xb9, 0x19, 0x0c, 0x0a, 0x0a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x07, 0x4b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08,
	0x01, 0x22, 0x5f, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a,
	0x09, 0x0a, 0x07, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x26, 0x0a, 0x06, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x0e, 0xba, 0xb9, 0x19, 0x0a, 0x0a, 0x08, 0x0a, 0x06, 0x6c, 0x65, 0x67, 0x61,
	0x63, 0x79, 0x52, 0x06, 0x4c, 0x65, 0x67, 0x61, 0x63, 0x79, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02,
	0x08, 0x01, 0x22, 0x88, 0x01, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x07, 0x4e, 0x6f, 0x64,
	0x65, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xa9, 0x01,
	0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53,
	0x69, 0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x22, 0xff, 0x02, 0x0a, 0x0b, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x64, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x27, 0x0a, 0x07, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xba, 0xb9, 0x19, 0x09,
	0x0a, 0x07, 0x0a, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x72, 0x74,
	0x5f, 0x69, 0x64, 0x52, 0x06, 0x50, 0x61, 0x72, 0x74, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x08, 0x53,
	0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x11, 0xba,
	0xb9, 0x19, 0x0d, 0x0a, 0x0b, 0x0a, 0x09, 0x73, 0x65, 0x71, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x52, 0x08, 0x53, 0x65, 0x71, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x53, 0x65,
	0x71, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b,
	0x0a, 0x09, 0x0a, 0x07, 0x73, 0x65, 0x71, 0x5f, 0x65, 0x6e, 0x64, 0x52, 0x06, 0x53, 0x65, 0x71,
	0x45, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xba, 0xb9, 0x19, 0x15, 0x0a, 0x13, 0x0a,
	0x11, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x69,
	0x7a, 0x65, 0x52, 0x0a, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x35,
	0x0a, 0x09, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0d, 0x42, 0x17, 0xba, 0xb9, 0x19, 0x13, 0x0a, 0x11, 0x0a, 0x0f, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x09, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xba, 0xb9, 0x19, 0x0b, 0x0a, 0x09, 0x0a, 0x07, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x23,
	0x0a, 0x05, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0d, 0xba,
	0xb9, 0x19, 0x09, 0x0a, 0x07, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x3a, 0x06, 0xba, 0xb9, 0x19, 0x02, 0x08, 0x01, 0x22, 0xa6, 0x01, 0x0a, 0x12,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x4f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x22, 0xf7, 0x01, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x08,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3e,
	0x0a, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x53, 0x4b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50, 0x6c, 0x61,
	0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x1a, 0x48, 0x65, 0x61, 0x64, 0x53, 0x4b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x50,
	0x6c, 0x61, 0x69, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x09, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x57, 0x69, 0x74, 0x68, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x28, 0x0a, 0x0f,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x49,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65,
	0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xa8, 0x01, 0x0a, 0x12, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0a, 0x53, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3b, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6c,
	0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08, 0x53, 0x65, 0x74, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x22, 0xb1, 0x01, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x65, 0x78, 0x74, 0x12, 0x3e, 0x0a, 0x0a, 0x53, 0x65,
	0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e,
	0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x0a,
	0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x3c, 0x0a, 0x08, 0x53, 0x65,
	0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08,
	0x53, 0x65, 0x74, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x2b, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x14, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x46, 0x0a, 0x14, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x64, 0x22, 0x17, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64,
	0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x66, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f,
	0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x42, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x07, 0x4e, 0x6f, 0x64, 0x65,
	0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x07,
	0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x14, 0x0a, 0x12, 0x53, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5a, 0x0a,
	0x13, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65, 0x55, 0x75, 0x69, 0x64,
	0x12, 0x27, 0x0a, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x52, 0x05, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x22, 0x16, 0x0a, 0x14, 0x53, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x55, 0x0a, 0x13, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x6f, 0x64, 0x65,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x70, 0x79,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4e, 0x6f, 0x64, 0x65,
	0x43, 0x6f, 0x70, 0x79, 0x55, 0x75, 0x69, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x6f, 0x70, 0x79,
	0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0xd8, 0x04, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x6f, 0x72,
	0x65, 0x12, 0x41, 0x0a, 0x06, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x19, 0x2e, 0x65, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x41, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x19,
	0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4b,
	0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x0d, 0x41, 0x64, 0x6d, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x4b,
	0x65, 0x79, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x4b, 0x65, 0x79, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x59, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65,
	0x79, 0x12, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41,
	0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x41, 0x64,
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x22, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d,
	0x69, 0x6e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78,
	0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74,
	0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x59, 0x0a, 0x0e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b,
	0x65, 0x79, 0x12, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x41, 0x64, 0x6d, 0x69, 0x6e, 0x49, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0xef, 0x04, 0x0a, 0x0e,
	0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x4e,
	0x0a, 0x0b, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f,
	0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5d,
	0x0a, 0x10, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x23, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x69, 0x6e, 0x53, 0x69, 0x7a, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x6c, 0x61, 0x69,
	0x6e, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x0b, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x74, 0x4e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x28, 0x01, 0x12,
	0x51, 0x0a, 0x0c, 0x43, 0x6f, 0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1f, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f, 0x70,
	0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x43, 0x6f,
	0x70, 0x79, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4b, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65,
	0x12, 0x1d, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1e, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x54, 0x0a, 0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x20, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x21, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x66, 0x0a, 0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x12, 0x26, 0x2e, 0x65,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x30, 0x5a,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69,
	0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cells_encryption_proto_rawDescOnce sync.Once
	file_cells_encryption_proto_rawDescData = file_cells_encryption_proto_rawDesc
)

func file_cells_encryption_proto_rawDescGZIP() []byte {
	file_cells_encryption_proto_rawDescOnce.Do(func() {
		file_cells_encryption_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_encryption_proto_rawDescData)
	})
	return file_cells_encryption_proto_rawDescData
}

var file_cells_encryption_proto_msgTypes = make([]protoimpl.MessageInfo, 41)
var file_cells_encryption_proto_goTypes = []interface{}{
	(*Export)(nil),                      // 0: encryption.Export
	(*Import)(nil),                      // 1: encryption.Import
	(*KeyInfo)(nil),                     // 2: encryption.KeyInfo
	(*Key)(nil),                         // 3: encryption.Key
	(*AddKeyRequest)(nil),               // 4: encryption.AddKeyRequest
	(*AddKeyResponse)(nil),              // 5: encryption.AddKeyResponse
	(*GetKeyRequest)(nil),               // 6: encryption.GetKeyRequest
	(*GetKeyResponse)(nil),              // 7: encryption.GetKeyResponse
	(*AdminListKeysRequest)(nil),        // 8: encryption.AdminListKeysRequest
	(*AdminListKeysResponse)(nil),       // 9: encryption.AdminListKeysResponse
	(*AdminDeleteKeyRequest)(nil),       // 10: encryption.AdminDeleteKeyRequest
	(*AdminDeleteKeyResponse)(nil),      // 11: encryption.AdminDeleteKeyResponse
	(*AdminExportKeyRequest)(nil),       // 12: encryption.AdminExportKeyRequest
	(*AdminExportKeyResponse)(nil),      // 13: encryption.AdminExportKeyResponse
	(*AdminImportKeyRequest)(nil),       // 14: encryption.AdminImportKeyRequest
	(*AdminImportKeyResponse)(nil),      // 15: encryption.AdminImportKeyResponse
	(*AdminCreateKeyRequest)(nil),       // 16: encryption.AdminCreateKeyRequest
	(*AdminCreateKeyResponse)(nil),      // 17: encryption.AdminCreateKeyResponse
	(*NodeKey)(nil),                     // 18: encryption.NodeKey
	(*Node)(nil),                        // 19: encryption.Node
	(*NodeInfo)(nil),                    // 20: encryption.NodeInfo
	(*Block)(nil),                       // 21: encryption.Block
	(*RangedBlock)(nil),                 // 22: encryption.RangedBlock
	(*GetNodeInfoRequest)(nil),          // 23: encryption.GetNodeInfoRequest
	(*GetNodeInfoResponse)(nil),         // 24: encryption.GetNodeInfoResponse
	(*GetNodePlainSizeRequest)(nil),     // 25: encryption.GetNodePlainSizeRequest
	(*GetNodePlainSizeResponse)(nil),    // 26: encryption.GetNodePlainSizeResponse
	(*SetNodeInfoRequest)(nil),          // 27: encryption.SetNodeInfoRequest
	(*SetNodeInfoResponse)(nil),         // 28: encryption.SetNodeInfoResponse
	(*DeleteNodeRequest)(nil),           // 29: encryption.DeleteNodeRequest
	(*DeleteNodeResponse)(nil),          // 30: encryption.DeleteNodeResponse
	(*DeleteNodeKeyRequest)(nil),        // 31: encryption.DeleteNodeKeyRequest
	(*DeleteNodeKeyResponse)(nil),       // 32: encryption.DeleteNodeKeyResponse
	(*DeleteNodeSharedKeyRequest)(nil),  // 33: encryption.DeleteNodeSharedKeyRequest
	(*DeleteNodeSharedKeyResponse)(nil), // 34: encryption.DeleteNodeSharedKeyResponse
	(*SetNodeKeyRequest)(nil),           // 35: encryption.SetNodeKeyRequest
	(*SetNodeKeyResponse)(nil),          // 36: encryption.SetNodeKeyResponse
	(*SetNodeBlockRequest)(nil),         // 37: encryption.SetNodeBlockRequest
	(*SetNodeBlockResponse)(nil),        // 38: encryption.SetNodeBlockResponse
	(*CopyNodeInfoRequest)(nil),         // 39: encryption.CopyNodeInfoRequest
	(*CopyNodeInfoResponse)(nil),        // 40: encryption.CopyNodeInfoResponse
}
var file_cells_encryption_proto_depIdxs = []int32{
	0,  // 0: encryption.KeyInfo.Exports:type_name -> encryption.Export
	1,  // 1: encryption.KeyInfo.Imports:type_name -> encryption.Import
	2,  // 2: encryption.Key.Info:type_name -> encryption.KeyInfo
	3,  // 3: encryption.AddKeyRequest.Key:type_name -> encryption.Key
	3,  // 4: encryption.GetKeyResponse.Key:type_name -> encryption.Key
	3,  // 5: encryption.AdminListKeysResponse.Keys:type_name -> encryption.Key
	3,  // 6: encryption.AdminExportKeyResponse.Key:type_name -> encryption.Key
	3,  // 7: encryption.AdminImportKeyRequest.Key:type_name -> encryption.Key
	19, // 8: encryption.NodeInfo.Node:type_name -> encryption.Node
	18, // 9: encryption.NodeInfo.NodeKey:type_name -> encryption.NodeKey
	21, // 10: encryption.NodeInfo.Block:type_name -> encryption.Block
	20, // 11: encryption.GetNodeInfoResponse.NodeInfo:type_name -> encryption.NodeInfo
	35, // 12: encryption.SetNodeInfoRequest.SetNodeKey:type_name -> encryption.SetNodeKeyRequest
	37, // 13: encryption.SetNodeInfoRequest.SetBlock:type_name -> encryption.SetNodeBlockRequest
	36, // 14: encryption.SetNodeInfoResponse.SetNodeKey:type_name -> encryption.SetNodeKeyResponse
	38, // 15: encryption.SetNodeInfoResponse.SetBlock:type_name -> encryption.SetNodeBlockResponse
	18, // 16: encryption.SetNodeKeyRequest.NodeKey:type_name -> encryption.NodeKey
	21, // 17: encryption.SetNodeBlockRequest.Block:type_name -> encryption.Block
	4,  // 18: encryption.UserKeyStore.AddKey:input_type -> encryption.AddKeyRequest
	6,  // 19: encryption.UserKeyStore.GetKey:input_type -> encryption.GetKeyRequest
	8,  // 20: encryption.UserKeyStore.AdminListKeys:input_type -> encryption.AdminListKeysRequest
	16, // 21: encryption.UserKeyStore.AdminCreateKey:input_type -> encryption.AdminCreateKeyRequest
	10, // 22: encryption.UserKeyStore.AdminDeleteKey:input_type -> encryption.AdminDeleteKeyRequest
	12, // 23: encryption.UserKeyStore.AdminExportKey:input_type -> encryption.AdminExportKeyRequest
	14, // 24: encryption.UserKeyStore.AdminImportKey:input_type -> encryption.AdminImportKeyRequest
	23, // 25: encryption.NodeKeyManager.GetNodeInfo:input_type -> encryption.GetNodeInfoRequest
	25, // 26: encryption.NodeKeyManager.GetNodePlainSize:input_type -> encryption.GetNodePlainSizeRequest
	27, // 27: encryption.NodeKeyManager.SetNodeInfo:input_type -> encryption.SetNodeInfoRequest
	39, // 28: encryption.NodeKeyManager.CopyNodeInfo:input_type -> encryption.CopyNodeInfoRequest
	29, // 29: encryption.NodeKeyManager.DeleteNode:input_type -> encryption.DeleteNodeRequest
	31, // 30: encryption.NodeKeyManager.DeleteNodeKey:input_type -> encryption.DeleteNodeKeyRequest
	33, // 31: encryption.NodeKeyManager.DeleteNodeSharedKey:input_type -> encryption.DeleteNodeSharedKeyRequest
	5,  // 32: encryption.UserKeyStore.AddKey:output_type -> encryption.AddKeyResponse
	7,  // 33: encryption.UserKeyStore.GetKey:output_type -> encryption.GetKeyResponse
	9,  // 34: encryption.UserKeyStore.AdminListKeys:output_type -> encryption.AdminListKeysResponse
	17, // 35: encryption.UserKeyStore.AdminCreateKey:output_type -> encryption.AdminCreateKeyResponse
	11, // 36: encryption.UserKeyStore.AdminDeleteKey:output_type -> encryption.AdminDeleteKeyResponse
	13, // 37: encryption.UserKeyStore.AdminExportKey:output_type -> encryption.AdminExportKeyResponse
	15, // 38: encryption.UserKeyStore.AdminImportKey:output_type -> encryption.AdminImportKeyResponse
	24, // 39: encryption.NodeKeyManager.GetNodeInfo:output_type -> encryption.GetNodeInfoResponse
	26, // 40: encryption.NodeKeyManager.GetNodePlainSize:output_type -> encryption.GetNodePlainSizeResponse
	28, // 41: encryption.NodeKeyManager.SetNodeInfo:output_type -> encryption.SetNodeInfoResponse
	40, // 42: encryption.NodeKeyManager.CopyNodeInfo:output_type -> encryption.CopyNodeInfoResponse
	30, // 43: encryption.NodeKeyManager.DeleteNode:output_type -> encryption.DeleteNodeResponse
	32, // 44: encryption.NodeKeyManager.DeleteNodeKey:output_type -> encryption.DeleteNodeKeyResponse
	34, // 45: encryption.NodeKeyManager.DeleteNodeSharedKey:output_type -> encryption.DeleteNodeSharedKeyResponse
	32, // [32:46] is the sub-list for method output_type
	18, // [18:32] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_cells_encryption_proto_init() }
func file_cells_encryption_proto_init() {
	if File_cells_encryption_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_encryption_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Export); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Import); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Key); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListKeysRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminListKeysResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminDeleteKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminExportKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminExportKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminImportKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminImportKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdminCreateKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RangedBlock); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodePlainSizeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetNodePlainSizeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeSharedKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteNodeSharedKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeBlockRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetNodeBlockResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyNodeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_encryption_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CopyNodeInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_encryption_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   41,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_cells_encryption_proto_goTypes,
		DependencyIndexes: file_cells_encryption_proto_depIdxs,
		MessageInfos:      file_cells_encryption_proto_msgTypes,
	}.Build()
	File_cells_encryption_proto = out.File
	file_cells_encryption_proto_rawDesc = nil
	file_cells_encryption_proto_goTypes = nil
	file_cells_encryption_proto_depIdxs = nil
}
