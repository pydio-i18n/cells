// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package update

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateServiceClient is the client API for UpdateService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServiceClient interface {
	UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...grpc.CallOption) (*ApplyUpdateResponse, error)
}

type updateServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServiceClient(cc grpc.ClientConnInterface) UpdateServiceClient {
	return &updateServiceClient{cc}
}

func (c *updateServiceClient) UpdateRequired(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateService/UpdateRequired", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServiceClient) ApplyUpdate(ctx context.Context, in *ApplyUpdateRequest, opts ...grpc.CallOption) (*ApplyUpdateResponse, error) {
	out := new(ApplyUpdateResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateService/ApplyUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServiceServer is the server API for UpdateService service.
// All implementations must embed UnimplementedUpdateServiceServer
// for forward compatibility
type UpdateServiceServer interface {
	UpdateRequired(context.Context, *UpdateRequest) (*UpdateResponse, error)
	ApplyUpdate(context.Context, *ApplyUpdateRequest) (*ApplyUpdateResponse, error)
	mustEmbedUnimplementedUpdateServiceServer()
}

// UnimplementedUpdateServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServiceServer struct {
}

func (UnimplementedUpdateServiceServer) UpdateRequired(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRequired not implemented")
}
func (UnimplementedUpdateServiceServer) ApplyUpdate(context.Context, *ApplyUpdateRequest) (*ApplyUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApplyUpdate not implemented")
}
func (UnimplementedUpdateServiceServer) mustEmbedUnimplementedUpdateServiceServer() {}

// UnsafeUpdateServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServiceServer will
// result in compilation errors.
type UnsafeUpdateServiceServer interface {
	mustEmbedUnimplementedUpdateServiceServer()
}

func RegisterUpdateServiceServer(s grpc.ServiceRegistrar, srv UpdateServiceServer) {
	s.RegisterService(&UpdateService_ServiceDesc, srv)
}

func _UpdateService_UpdateRequired_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).UpdateRequired(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateService/UpdateRequired",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).UpdateRequired(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateService_ApplyUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplyUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServiceServer).ApplyUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateService/ApplyUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServiceServer).ApplyUpdate(ctx, req.(*ApplyUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateService_ServiceDesc is the grpc.ServiceDesc for UpdateService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "update.UpdateService",
	HandlerType: (*UpdateServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateRequired",
			Handler:    _UpdateService_UpdateRequired_Handler,
		},
		{
			MethodName: "ApplyUpdate",
			Handler:    _UpdateService_ApplyUpdate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-update.proto",
}

// UpdateServerServiceClient is the client API for UpdateServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateServerServiceClient interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...grpc.CallOption) (*PublishPackageResponse, error)
	ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error)
	DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error)
}

type updateServerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateServerServiceClient(cc grpc.ClientConnInterface) UpdateServerServiceClient {
	return &updateServerServiceClient{cc}
}

func (c *updateServerServiceClient) CheckForUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateServerService/CheckForUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) PublishPackage(ctx context.Context, in *PublishPackageRequest, opts ...grpc.CallOption) (*PublishPackageResponse, error) {
	out := new(PublishPackageResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateServerService/PublishPackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) ListPackages(ctx context.Context, in *ListPackagesRequest, opts ...grpc.CallOption) (*ListPackagesResponse, error) {
	out := new(ListPackagesResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateServerService/ListPackages", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *updateServerServiceClient) DeletePackage(ctx context.Context, in *DeletePackageRequest, opts ...grpc.CallOption) (*DeletePackageResponse, error) {
	out := new(DeletePackageResponse)
	err := c.cc.Invoke(ctx, "/update.UpdateServerService/DeletePackage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateServerServiceServer is the server API for UpdateServerService service.
// All implementations must embed UnimplementedUpdateServerServiceServer
// for forward compatibility
type UpdateServerServiceServer interface {
	// Ask the update server if there are any available updates
	CheckForUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	PublishPackage(context.Context, *PublishPackageRequest) (*PublishPackageResponse, error)
	ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error)
	DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error)
	mustEmbedUnimplementedUpdateServerServiceServer()
}

// UnimplementedUpdateServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateServerServiceServer struct {
}

func (UnimplementedUpdateServerServiceServer) CheckForUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckForUpdate not implemented")
}
func (UnimplementedUpdateServerServiceServer) PublishPackage(context.Context, *PublishPackageRequest) (*PublishPackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishPackage not implemented")
}
func (UnimplementedUpdateServerServiceServer) ListPackages(context.Context, *ListPackagesRequest) (*ListPackagesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPackages not implemented")
}
func (UnimplementedUpdateServerServiceServer) DeletePackage(context.Context, *DeletePackageRequest) (*DeletePackageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePackage not implemented")
}
func (UnimplementedUpdateServerServiceServer) mustEmbedUnimplementedUpdateServerServiceServer() {}

// UnsafeUpdateServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateServerServiceServer will
// result in compilation errors.
type UnsafeUpdateServerServiceServer interface {
	mustEmbedUnimplementedUpdateServerServiceServer()
}

func RegisterUpdateServerServiceServer(s grpc.ServiceRegistrar, srv UpdateServerServiceServer) {
	s.RegisterService(&UpdateServerService_ServiceDesc, srv)
}

func _UpdateServerService_CheckForUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServerServiceServer).CheckForUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateServerService/CheckForUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServerServiceServer).CheckForUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateServerService_PublishPackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PublishPackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServerServiceServer).PublishPackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateServerService/PublishPackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServerServiceServer).PublishPackage(ctx, req.(*PublishPackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateServerService_ListPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServerServiceServer).ListPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateServerService/ListPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServerServiceServer).ListPackages(ctx, req.(*ListPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UpdateServerService_DeletePackage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePackageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateServerServiceServer).DeletePackage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/update.UpdateServerService/DeletePackage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateServerServiceServer).DeletePackage(ctx, req.(*DeletePackageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateServerService_ServiceDesc is the grpc.ServiceDesc for UpdateServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "update.UpdateServerService",
	HandlerType: (*UpdateServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckForUpdate",
			Handler:    _UpdateServerService_CheckForUpdate_Handler,
		},
		{
			MethodName: "PublishPackage",
			Handler:    _UpdateServerService_PublishPackage_Handler,
		},
		{
			MethodName: "ListPackages",
			Handler:    _UpdateServerService_ListPackages_Handler,
		},
		{
			MethodName: "DeletePackage",
			Handler:    _UpdateServerService_DeletePackage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-update.proto",
}
