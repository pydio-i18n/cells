syntax="proto3";

import "buf/validate/validate.proto";

package object;

option go_package="github.com/pydio/cells/common/proto/object";

service ObjectsEndpoint {
    rpc GetMinioConfig(GetMinioConfigRequest) returns (GetMinioConfigResponse){};
    rpc StorageStats(StorageStatsRequest) returns (StorageStatsResponse){};
}

service DataSourceEndpoint {
    rpc GetDataSourceConfig(GetDataSourceConfigRequest) returns (GetDataSourceConfigResponse){};
}

service ResourceCleanerEndpoint {
    rpc CleanResourcesBeforeDelete(CleanResourcesRequest) returns (CleanResourcesResponse) {};
}

message CleanResourcesRequest {}
message CleanResourcesResponse {
    bool Success = 1;
    string Message = 2;
}

// Type of Gateway
enum StorageType {
    LOCAL = 0;
    S3 = 1;
    SMB = 2;
    CELLS = 4;
    AZURE = 5;
    GCS = 6;
    B2 = 7;
    MANTA = 8;
    SIA = 9;
}

// Type of Encryption
enum EncryptionMode {
    CLEAR = 0;
    MASTER = 1;
    USER = 2;
    USER_PWD = 3;
}

// DataSource Object description
message DataSource {
    // Name of the data source (max length 34)
    string Name = 1 [(buf.validate.field).string.max_len = 34];
    // Whether this data source is disabled or running
    bool Disabled = 2;

    // Type of underlying storage (LOCAL, S3, AZURE, GCS)
    StorageType StorageType = 3;
    // List of key values describing storage configuration
    map<string,string> StorageConfiguration = 4;

    // Corresponding objects service name (underlying s3 service)
    string ObjectsServiceName = 18;
    // Corresponding objects service host
    string ObjectsHost = 12;
    // Corresponding objects service port
    int32  ObjectsPort = 5;
    // Corresponding objects service connection type
    bool   ObjectsSecure = 13;
    // Corresponding objects service bucket
    string ObjectsBucket = 14;
    // Corresponding objects service base folder inside the bucket
    string ObjectsBaseFolder = 15;

    // Corresponding objects service api key
    string ApiKey = 16;
    // Corresponding objects service api secret
    string ApiSecret = 17;
    // Peer address of the data source
    string PeerAddress = 19;
    // Not implemented, whether to watch for underlying changes on the FS
    bool Watch = 6;

    // Store data in flat format (object-storage like)
    bool FlatStorage = 20;
    // Do not trigger resync at start
    bool SkipSyncOnRestart = 21;

    // Type of encryption applied before sending data to storage
    EncryptionMode EncryptionMode = 7;
    // Encryption key used for encrypting data
    string EncryptionKey = 8;
    // Versioning policy describes how files are kept in the versioning queue
    string VersioningPolicyName = 9;

    // Data Source creation date
    int32 CreationDate = 10;
    // Data Source last synchronization date
    int32 LastSynchronizationDate = 11;
}

// Used a config storage for minio services
message MinioConfig {
    // Name of the object service
    string Name = 1;
    // Underlying storage type (LOCAL, S3, AZURE, GCS)
    StorageType StorageType = 2;
    // Host where this minio is running
    string RunningHost = 3;
    // Whether it is exposed with TLS or not
    bool RunningSecure = 4;
    // Port where this minio is bound
    int32 RunningPort = 5;
    // Api Key to access this object service
    string ApiKey = 6;
    // Api Secret to access this object service
    string ApiSecret = 7;
    // Url to get info about this object service
    string EndpointUrl = 10;
    // Specific to Local storage type
    string LocalFolder = 8;
    // Restrict this service to run on a given peer
    string PeerAddress = 9;
    // Additional configs
    map<string,string> GatewayConfiguration = 11;
}

// Used to dispatch some specific events
// across services
message DataSourceEvent {
    enum DSEventType {
        CREATE = 0;
        UPDATE = 1;
        DELETE = 2;
        ENABLED = 3;
        DISABLED = 4;
    }
    DSEventType Type = 1;
    string Name = 2;
    DataSource Config = 3;
}

enum StorageTypeFilter {
    ANY = 0;
    LOCALFS = 1;
    REMOTE = 2;
}

message DataSourceSingleQuery {
    // Lookup DataSource by Name
    string Name = 1;
    // Check if DataSource is Disabled or not
    bool IsDisabled = 2;
    // Restrict to a specific Storage Type
    StorageTypeFilter StorageType = 3;
    // Restrict to a specific PeerAddress
    string PeerAddress = 4;
    // Flat datasources (appeared at version 3) store the files in an "object storage" way, instead of keeping the folders structure
    bool FlatStorage = 5;
    // Check if this flag is set
    bool SkipSyncOnRestart = 6;
    // Restrict to DataSource where versioning is enabled
    bool IsVersioned = 9;
    // Restrict to DataSource where encryption is enabled
    bool IsEncrypted = 17;
    // Along with IsEncrypted, restrict EncryptionMode
    EncryptionMode EncryptionMode = 7;
    // Along with IsEncrypted, lookup by encryption key Id
    string EncryptionKey = 8;
    // Along with IsVersioned, lookup by versioning policy name
    string VersioningPolicyName = 10;
    // Lookup a key in the StorageConfiguration map. Frequently used keys: cellsInternal, folder, normalize (refer to the low-level configuration)
    string StorageConfigurationName = 13;
    // Combined with StorageConfigurationName, value used for comparison
    string StorageConfigurationValue = 14;
    // Restrict datasource attached to a specific Object service (see Services list)
    string ObjectServiceName = 15;
    // Internal - Negate the query result
    bool Not = 16;
}

message GetMinioConfigRequest {}

message GetMinioConfigResponse {
    MinioConfig MinioConfig = 1;
}

message StorageStatsRequest {}

message StorageStatsResponse {
    map<string,string> Stats = 1;
}

message GetDataSourceConfigRequest {}

message GetDataSourceConfigResponse {
    DataSource DataSource = 1;
}