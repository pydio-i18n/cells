// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cells-object.proto

package object

import (
	_ "buf.build/gen/go/bufbuild/protovalidate/protocolbuffers/go/buf/validate"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Type of Gateway
type StorageType int32

const (
	StorageType_LOCAL StorageType = 0
	StorageType_S3    StorageType = 1
	StorageType_SMB   StorageType = 2
	StorageType_CELLS StorageType = 4
	StorageType_AZURE StorageType = 5
	StorageType_GCS   StorageType = 6
	StorageType_B2    StorageType = 7
	StorageType_MANTA StorageType = 8
	StorageType_SIA   StorageType = 9
)

// Enum value maps for StorageType.
var (
	StorageType_name = map[int32]string{
		0: "LOCAL",
		1: "S3",
		2: "SMB",
		4: "CELLS",
		5: "AZURE",
		6: "GCS",
		7: "B2",
		8: "MANTA",
		9: "SIA",
	}
	StorageType_value = map[string]int32{
		"LOCAL": 0,
		"S3":    1,
		"SMB":   2,
		"CELLS": 4,
		"AZURE": 5,
		"GCS":   6,
		"B2":    7,
		"MANTA": 8,
		"SIA":   9,
	}
)

func (x StorageType) Enum() *StorageType {
	p := new(StorageType)
	*p = x
	return p
}

func (x StorageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_object_proto_enumTypes[0].Descriptor()
}

func (StorageType) Type() protoreflect.EnumType {
	return &file_cells_object_proto_enumTypes[0]
}

func (x StorageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageType.Descriptor instead.
func (StorageType) EnumDescriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{0}
}

// Type of Encryption
type EncryptionMode int32

const (
	EncryptionMode_CLEAR    EncryptionMode = 0
	EncryptionMode_MASTER   EncryptionMode = 1
	EncryptionMode_USER     EncryptionMode = 2
	EncryptionMode_USER_PWD EncryptionMode = 3
)

// Enum value maps for EncryptionMode.
var (
	EncryptionMode_name = map[int32]string{
		0: "CLEAR",
		1: "MASTER",
		2: "USER",
		3: "USER_PWD",
	}
	EncryptionMode_value = map[string]int32{
		"CLEAR":    0,
		"MASTER":   1,
		"USER":     2,
		"USER_PWD": 3,
	}
)

func (x EncryptionMode) Enum() *EncryptionMode {
	p := new(EncryptionMode)
	*p = x
	return p
}

func (x EncryptionMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptionMode) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_object_proto_enumTypes[1].Descriptor()
}

func (EncryptionMode) Type() protoreflect.EnumType {
	return &file_cells_object_proto_enumTypes[1]
}

func (x EncryptionMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EncryptionMode.Descriptor instead.
func (EncryptionMode) EnumDescriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{1}
}

type StorageTypeFilter int32

const (
	StorageTypeFilter_ANY     StorageTypeFilter = 0
	StorageTypeFilter_LOCALFS StorageTypeFilter = 1
	StorageTypeFilter_REMOTE  StorageTypeFilter = 2
)

// Enum value maps for StorageTypeFilter.
var (
	StorageTypeFilter_name = map[int32]string{
		0: "ANY",
		1: "LOCALFS",
		2: "REMOTE",
	}
	StorageTypeFilter_value = map[string]int32{
		"ANY":     0,
		"LOCALFS": 1,
		"REMOTE":  2,
	}
)

func (x StorageTypeFilter) Enum() *StorageTypeFilter {
	p := new(StorageTypeFilter)
	*p = x
	return p
}

func (x StorageTypeFilter) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StorageTypeFilter) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_object_proto_enumTypes[2].Descriptor()
}

func (StorageTypeFilter) Type() protoreflect.EnumType {
	return &file_cells_object_proto_enumTypes[2]
}

func (x StorageTypeFilter) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StorageTypeFilter.Descriptor instead.
func (StorageTypeFilter) EnumDescriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{2}
}

type DataSourceEvent_DSEventType int32

const (
	DataSourceEvent_CREATE   DataSourceEvent_DSEventType = 0
	DataSourceEvent_UPDATE   DataSourceEvent_DSEventType = 1
	DataSourceEvent_DELETE   DataSourceEvent_DSEventType = 2
	DataSourceEvent_ENABLED  DataSourceEvent_DSEventType = 3
	DataSourceEvent_DISABLED DataSourceEvent_DSEventType = 4
)

// Enum value maps for DataSourceEvent_DSEventType.
var (
	DataSourceEvent_DSEventType_name = map[int32]string{
		0: "CREATE",
		1: "UPDATE",
		2: "DELETE",
		3: "ENABLED",
		4: "DISABLED",
	}
	DataSourceEvent_DSEventType_value = map[string]int32{
		"CREATE":   0,
		"UPDATE":   1,
		"DELETE":   2,
		"ENABLED":  3,
		"DISABLED": 4,
	}
)

func (x DataSourceEvent_DSEventType) Enum() *DataSourceEvent_DSEventType {
	p := new(DataSourceEvent_DSEventType)
	*p = x
	return p
}

func (x DataSourceEvent_DSEventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSourceEvent_DSEventType) Descriptor() protoreflect.EnumDescriptor {
	return file_cells_object_proto_enumTypes[3].Descriptor()
}

func (DataSourceEvent_DSEventType) Type() protoreflect.EnumType {
	return &file_cells_object_proto_enumTypes[3]
}

func (x DataSourceEvent_DSEventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSourceEvent_DSEventType.Descriptor instead.
func (DataSourceEvent_DSEventType) EnumDescriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{4, 0}
}

type CleanResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CleanResourcesRequest) Reset() {
	*x = CleanResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanResourcesRequest) ProtoMessage() {}

func (x *CleanResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanResourcesRequest.ProtoReflect.Descriptor instead.
func (*CleanResourcesRequest) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{0}
}

type CleanResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool   `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *CleanResourcesResponse) Reset() {
	*x = CleanResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CleanResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CleanResourcesResponse) ProtoMessage() {}

func (x *CleanResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CleanResourcesResponse.ProtoReflect.Descriptor instead.
func (*CleanResourcesResponse) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{1}
}

func (x *CleanResourcesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *CleanResourcesResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// DataSource Object description
type DataSource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the data source (max length 34)
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Whether this data source is disabled or running
	Disabled bool `protobuf:"varint,2,opt,name=Disabled,proto3" json:"Disabled,omitempty"`
	// Type of underlying storage (LOCAL, S3, AZURE, GCS)
	StorageType StorageType `protobuf:"varint,3,opt,name=StorageType,proto3,enum=object.StorageType" json:"StorageType,omitempty"`
	// List of key values describing storage configuration
	StorageConfiguration map[string]string `protobuf:"bytes,4,rep,name=StorageConfiguration,proto3" json:"StorageConfiguration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Corresponding objects service name (underlying s3 service)
	ObjectsServiceName string `protobuf:"bytes,18,opt,name=ObjectsServiceName,proto3" json:"ObjectsServiceName,omitempty"`
	// Corresponding objects service host
	ObjectsHost string `protobuf:"bytes,12,opt,name=ObjectsHost,proto3" json:"ObjectsHost,omitempty"`
	// Corresponding objects service port
	ObjectsPort int32 `protobuf:"varint,5,opt,name=ObjectsPort,proto3" json:"ObjectsPort,omitempty"`
	// Corresponding objects service connection type
	ObjectsSecure bool `protobuf:"varint,13,opt,name=ObjectsSecure,proto3" json:"ObjectsSecure,omitempty"`
	// Corresponding objects service bucket
	ObjectsBucket string `protobuf:"bytes,14,opt,name=ObjectsBucket,proto3" json:"ObjectsBucket,omitempty"`
	// Corresponding objects service base folder inside the bucket
	ObjectsBaseFolder string `protobuf:"bytes,15,opt,name=ObjectsBaseFolder,proto3" json:"ObjectsBaseFolder,omitempty"`
	// Corresponding objects service api key
	ApiKey string `protobuf:"bytes,16,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	// Corresponding objects service api secret
	ApiSecret string `protobuf:"bytes,17,opt,name=ApiSecret,proto3" json:"ApiSecret,omitempty"`
	// Peer address of the data source
	PeerAddress string `protobuf:"bytes,19,opt,name=PeerAddress,proto3" json:"PeerAddress,omitempty"`
	// Not implemented, whether to watch for underlying changes on the FS
	Watch bool `protobuf:"varint,6,opt,name=Watch,proto3" json:"Watch,omitempty"`
	// Store data in flat format (object-storage like)
	FlatStorage bool `protobuf:"varint,20,opt,name=FlatStorage,proto3" json:"FlatStorage,omitempty"`
	// Do not trigger resync at start
	SkipSyncOnRestart bool `protobuf:"varint,21,opt,name=SkipSyncOnRestart,proto3" json:"SkipSyncOnRestart,omitempty"`
	// Type of encryption applied before sending data to storage
	EncryptionMode EncryptionMode `protobuf:"varint,7,opt,name=EncryptionMode,proto3,enum=object.EncryptionMode" json:"EncryptionMode,omitempty"`
	// Encryption key used for encrypting data
	EncryptionKey string `protobuf:"bytes,8,opt,name=EncryptionKey,proto3" json:"EncryptionKey,omitempty"`
	// Versioning policy describes how files are kept in the versioning queue
	VersioningPolicyName string `protobuf:"bytes,9,opt,name=VersioningPolicyName,proto3" json:"VersioningPolicyName,omitempty"`
	// Data Source creation date
	CreationDate int32 `protobuf:"varint,10,opt,name=CreationDate,proto3" json:"CreationDate,omitempty"`
	// Data Source last synchronization date
	LastSynchronizationDate int32 `protobuf:"varint,11,opt,name=LastSynchronizationDate,proto3" json:"LastSynchronizationDate,omitempty"`
}

func (x *DataSource) Reset() {
	*x = DataSource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSource) ProtoMessage() {}

func (x *DataSource) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSource.ProtoReflect.Descriptor instead.
func (*DataSource) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{2}
}

func (x *DataSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSource) GetDisabled() bool {
	if x != nil {
		return x.Disabled
	}
	return false
}

func (x *DataSource) GetStorageType() StorageType {
	if x != nil {
		return x.StorageType
	}
	return StorageType_LOCAL
}

func (x *DataSource) GetStorageConfiguration() map[string]string {
	if x != nil {
		return x.StorageConfiguration
	}
	return nil
}

func (x *DataSource) GetObjectsServiceName() string {
	if x != nil {
		return x.ObjectsServiceName
	}
	return ""
}

func (x *DataSource) GetObjectsHost() string {
	if x != nil {
		return x.ObjectsHost
	}
	return ""
}

func (x *DataSource) GetObjectsPort() int32 {
	if x != nil {
		return x.ObjectsPort
	}
	return 0
}

func (x *DataSource) GetObjectsSecure() bool {
	if x != nil {
		return x.ObjectsSecure
	}
	return false
}

func (x *DataSource) GetObjectsBucket() string {
	if x != nil {
		return x.ObjectsBucket
	}
	return ""
}

func (x *DataSource) GetObjectsBaseFolder() string {
	if x != nil {
		return x.ObjectsBaseFolder
	}
	return ""
}

func (x *DataSource) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *DataSource) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *DataSource) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *DataSource) GetWatch() bool {
	if x != nil {
		return x.Watch
	}
	return false
}

func (x *DataSource) GetFlatStorage() bool {
	if x != nil {
		return x.FlatStorage
	}
	return false
}

func (x *DataSource) GetSkipSyncOnRestart() bool {
	if x != nil {
		return x.SkipSyncOnRestart
	}
	return false
}

func (x *DataSource) GetEncryptionMode() EncryptionMode {
	if x != nil {
		return x.EncryptionMode
	}
	return EncryptionMode_CLEAR
}

func (x *DataSource) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *DataSource) GetVersioningPolicyName() string {
	if x != nil {
		return x.VersioningPolicyName
	}
	return ""
}

func (x *DataSource) GetCreationDate() int32 {
	if x != nil {
		return x.CreationDate
	}
	return 0
}

func (x *DataSource) GetLastSynchronizationDate() int32 {
	if x != nil {
		return x.LastSynchronizationDate
	}
	return 0
}

// Used a config storage for minio services
type MinioConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the object service
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Underlying storage type (LOCAL, S3, AZURE, GCS)
	StorageType StorageType `protobuf:"varint,2,opt,name=StorageType,proto3,enum=object.StorageType" json:"StorageType,omitempty"`
	// Host where this minio is running
	RunningHost string `protobuf:"bytes,3,opt,name=RunningHost,proto3" json:"RunningHost,omitempty"`
	// Whether it is exposed with TLS or not
	RunningSecure bool `protobuf:"varint,4,opt,name=RunningSecure,proto3" json:"RunningSecure,omitempty"`
	// Port where this minio is bound
	RunningPort int32 `protobuf:"varint,5,opt,name=RunningPort,proto3" json:"RunningPort,omitempty"`
	// Api Key to access this object service
	ApiKey string `protobuf:"bytes,6,opt,name=ApiKey,proto3" json:"ApiKey,omitempty"`
	// Api Secret to access this object service
	ApiSecret string `protobuf:"bytes,7,opt,name=ApiSecret,proto3" json:"ApiSecret,omitempty"`
	// Url to get info about this object service
	EndpointUrl string `protobuf:"bytes,10,opt,name=EndpointUrl,proto3" json:"EndpointUrl,omitempty"`
	// Specific to Local storage type
	LocalFolder string `protobuf:"bytes,8,opt,name=LocalFolder,proto3" json:"LocalFolder,omitempty"`
	// Restrict this service to run on a given peer
	PeerAddress string `protobuf:"bytes,9,opt,name=PeerAddress,proto3" json:"PeerAddress,omitempty"`
	// Additional configs
	GatewayConfiguration map[string]string `protobuf:"bytes,11,rep,name=GatewayConfiguration,proto3" json:"GatewayConfiguration,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *MinioConfig) Reset() {
	*x = MinioConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MinioConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MinioConfig) ProtoMessage() {}

func (x *MinioConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MinioConfig.ProtoReflect.Descriptor instead.
func (*MinioConfig) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{3}
}

func (x *MinioConfig) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MinioConfig) GetStorageType() StorageType {
	if x != nil {
		return x.StorageType
	}
	return StorageType_LOCAL
}

func (x *MinioConfig) GetRunningHost() string {
	if x != nil {
		return x.RunningHost
	}
	return ""
}

func (x *MinioConfig) GetRunningSecure() bool {
	if x != nil {
		return x.RunningSecure
	}
	return false
}

func (x *MinioConfig) GetRunningPort() int32 {
	if x != nil {
		return x.RunningPort
	}
	return 0
}

func (x *MinioConfig) GetApiKey() string {
	if x != nil {
		return x.ApiKey
	}
	return ""
}

func (x *MinioConfig) GetApiSecret() string {
	if x != nil {
		return x.ApiSecret
	}
	return ""
}

func (x *MinioConfig) GetEndpointUrl() string {
	if x != nil {
		return x.EndpointUrl
	}
	return ""
}

func (x *MinioConfig) GetLocalFolder() string {
	if x != nil {
		return x.LocalFolder
	}
	return ""
}

func (x *MinioConfig) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *MinioConfig) GetGatewayConfiguration() map[string]string {
	if x != nil {
		return x.GatewayConfiguration
	}
	return nil
}

// Used to dispatch some specific events
// across services
type DataSourceEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type   DataSourceEvent_DSEventType `protobuf:"varint,1,opt,name=Type,proto3,enum=object.DataSourceEvent_DSEventType" json:"Type,omitempty"`
	Name   string                      `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Config *DataSource                 `protobuf:"bytes,3,opt,name=Config,proto3" json:"Config,omitempty"`
}

func (x *DataSourceEvent) Reset() {
	*x = DataSourceEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceEvent) ProtoMessage() {}

func (x *DataSourceEvent) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceEvent.ProtoReflect.Descriptor instead.
func (*DataSourceEvent) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{4}
}

func (x *DataSourceEvent) GetType() DataSourceEvent_DSEventType {
	if x != nil {
		return x.Type
	}
	return DataSourceEvent_CREATE
}

func (x *DataSourceEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSourceEvent) GetConfig() *DataSource {
	if x != nil {
		return x.Config
	}
	return nil
}

type DataSourceSingleQuery struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Lookup DataSource by Name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Check if DataSource is Disabled or not
	IsDisabled bool `protobuf:"varint,2,opt,name=IsDisabled,proto3" json:"IsDisabled,omitempty"`
	// Restrict to a specific Storage Type
	StorageType StorageTypeFilter `protobuf:"varint,3,opt,name=StorageType,proto3,enum=object.StorageTypeFilter" json:"StorageType,omitempty"`
	// Restrict to a specific PeerAddress
	PeerAddress string `protobuf:"bytes,4,opt,name=PeerAddress,proto3" json:"PeerAddress,omitempty"`
	// Flat datasources (appeared at version 3) store the files in an "object storage" way, instead of keeping the folders structure
	FlatStorage bool `protobuf:"varint,5,opt,name=FlatStorage,proto3" json:"FlatStorage,omitempty"`
	// Check if this flag is set
	SkipSyncOnRestart bool `protobuf:"varint,6,opt,name=SkipSyncOnRestart,proto3" json:"SkipSyncOnRestart,omitempty"`
	// Restrict to DataSource where versioning is enabled
	IsVersioned bool `protobuf:"varint,9,opt,name=IsVersioned,proto3" json:"IsVersioned,omitempty"`
	// Restrict to DataSource where encryption is enabled
	IsEncrypted bool `protobuf:"varint,17,opt,name=IsEncrypted,proto3" json:"IsEncrypted,omitempty"`
	// Along with IsEncrypted, restrict EncryptionMode
	EncryptionMode EncryptionMode `protobuf:"varint,7,opt,name=EncryptionMode,proto3,enum=object.EncryptionMode" json:"EncryptionMode,omitempty"`
	// Along with IsEncrypted, lookup by encryption key Id
	EncryptionKey string `protobuf:"bytes,8,opt,name=EncryptionKey,proto3" json:"EncryptionKey,omitempty"`
	// Along with IsVersioned, lookup by versioning policy name
	VersioningPolicyName string `protobuf:"bytes,10,opt,name=VersioningPolicyName,proto3" json:"VersioningPolicyName,omitempty"`
	// Lookup a key in the StorageConfiguration map. Frequently used keys: cellsInternal, folder, normalize (refer to the low-level configuration)
	StorageConfigurationName string `protobuf:"bytes,13,opt,name=StorageConfigurationName,proto3" json:"StorageConfigurationName,omitempty"`
	// Combined with StorageConfigurationName, value used for comparison
	StorageConfigurationValue string `protobuf:"bytes,14,opt,name=StorageConfigurationValue,proto3" json:"StorageConfigurationValue,omitempty"`
	// Restrict datasource attached to a specific Object service (see Services list)
	ObjectServiceName string `protobuf:"bytes,15,opt,name=ObjectServiceName,proto3" json:"ObjectServiceName,omitempty"`
	// Internal - Negate the query result
	Not bool `protobuf:"varint,16,opt,name=Not,proto3" json:"Not,omitempty"`
}

func (x *DataSourceSingleQuery) Reset() {
	*x = DataSourceSingleQuery{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceSingleQuery) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceSingleQuery) ProtoMessage() {}

func (x *DataSourceSingleQuery) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceSingleQuery.ProtoReflect.Descriptor instead.
func (*DataSourceSingleQuery) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{5}
}

func (x *DataSourceSingleQuery) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DataSourceSingleQuery) GetIsDisabled() bool {
	if x != nil {
		return x.IsDisabled
	}
	return false
}

func (x *DataSourceSingleQuery) GetStorageType() StorageTypeFilter {
	if x != nil {
		return x.StorageType
	}
	return StorageTypeFilter_ANY
}

func (x *DataSourceSingleQuery) GetPeerAddress() string {
	if x != nil {
		return x.PeerAddress
	}
	return ""
}

func (x *DataSourceSingleQuery) GetFlatStorage() bool {
	if x != nil {
		return x.FlatStorage
	}
	return false
}

func (x *DataSourceSingleQuery) GetSkipSyncOnRestart() bool {
	if x != nil {
		return x.SkipSyncOnRestart
	}
	return false
}

func (x *DataSourceSingleQuery) GetIsVersioned() bool {
	if x != nil {
		return x.IsVersioned
	}
	return false
}

func (x *DataSourceSingleQuery) GetIsEncrypted() bool {
	if x != nil {
		return x.IsEncrypted
	}
	return false
}

func (x *DataSourceSingleQuery) GetEncryptionMode() EncryptionMode {
	if x != nil {
		return x.EncryptionMode
	}
	return EncryptionMode_CLEAR
}

func (x *DataSourceSingleQuery) GetEncryptionKey() string {
	if x != nil {
		return x.EncryptionKey
	}
	return ""
}

func (x *DataSourceSingleQuery) GetVersioningPolicyName() string {
	if x != nil {
		return x.VersioningPolicyName
	}
	return ""
}

func (x *DataSourceSingleQuery) GetStorageConfigurationName() string {
	if x != nil {
		return x.StorageConfigurationName
	}
	return ""
}

func (x *DataSourceSingleQuery) GetStorageConfigurationValue() string {
	if x != nil {
		return x.StorageConfigurationValue
	}
	return ""
}

func (x *DataSourceSingleQuery) GetObjectServiceName() string {
	if x != nil {
		return x.ObjectServiceName
	}
	return ""
}

func (x *DataSourceSingleQuery) GetNot() bool {
	if x != nil {
		return x.Not
	}
	return false
}

type GetMinioConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetMinioConfigRequest) Reset() {
	*x = GetMinioConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinioConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinioConfigRequest) ProtoMessage() {}

func (x *GetMinioConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinioConfigRequest.ProtoReflect.Descriptor instead.
func (*GetMinioConfigRequest) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{6}
}

type GetMinioConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MinioConfig *MinioConfig `protobuf:"bytes,1,opt,name=MinioConfig,proto3" json:"MinioConfig,omitempty"`
}

func (x *GetMinioConfigResponse) Reset() {
	*x = GetMinioConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetMinioConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetMinioConfigResponse) ProtoMessage() {}

func (x *GetMinioConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetMinioConfigResponse.ProtoReflect.Descriptor instead.
func (*GetMinioConfigResponse) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{7}
}

func (x *GetMinioConfigResponse) GetMinioConfig() *MinioConfig {
	if x != nil {
		return x.MinioConfig
	}
	return nil
}

type StorageStatsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StorageStatsRequest) Reset() {
	*x = StorageStatsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageStatsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatsRequest) ProtoMessage() {}

func (x *StorageStatsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatsRequest.ProtoReflect.Descriptor instead.
func (*StorageStatsRequest) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{8}
}

type StorageStatsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Stats map[string]string `protobuf:"bytes,1,rep,name=Stats,proto3" json:"Stats,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *StorageStatsResponse) Reset() {
	*x = StorageStatsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StorageStatsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StorageStatsResponse) ProtoMessage() {}

func (x *StorageStatsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StorageStatsResponse.ProtoReflect.Descriptor instead.
func (*StorageStatsResponse) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{9}
}

func (x *StorageStatsResponse) GetStats() map[string]string {
	if x != nil {
		return x.Stats
	}
	return nil
}

type GetDataSourceConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetDataSourceConfigRequest) Reset() {
	*x = GetDataSourceConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataSourceConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataSourceConfigRequest) ProtoMessage() {}

func (x *GetDataSourceConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataSourceConfigRequest.ProtoReflect.Descriptor instead.
func (*GetDataSourceConfigRequest) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{10}
}

type GetDataSourceConfigResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataSource *DataSource `protobuf:"bytes,1,opt,name=DataSource,proto3" json:"DataSource,omitempty"`
}

func (x *GetDataSourceConfigResponse) Reset() {
	*x = GetDataSourceConfigResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cells_object_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDataSourceConfigResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDataSourceConfigResponse) ProtoMessage() {}

func (x *GetDataSourceConfigResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cells_object_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDataSourceConfigResponse.ProtoReflect.Descriptor instead.
func (*GetDataSourceConfigResponse) Descriptor() ([]byte, []int) {
	return file_cells_object_proto_rawDescGZIP(), []int{11}
}

func (x *GetDataSourceConfigResponse) GetDataSource() *DataSource {
	if x != nil {
		return x.DataSource
	}
	return nil
}

var File_cells_object_proto protoreflect.FileDescriptor

var file_cells_object_proto_rawDesc = []byte{
	0x0a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x1a, 0x1b, 0x62, 0x75,
	0x66, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x17, 0x0a, 0x15, 0x43, 0x6c, 0x65,
	0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x22, 0x4c, 0x0a, 0x16, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x22, 0xcb, 0x07, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12,
	0x1b, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xba,
	0x48, 0x04, 0x72, 0x02, 0x18, 0x22, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x60, 0x0a, 0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x53, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x48,
	0x6f, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x73, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73,
	0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x2c, 0x0a, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x61, 0x73, 0x65,
	0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x42, 0x61, 0x73, 0x65, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x70, 0x69, 0x53, 0x65,
	0x63, 0x72, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x41, 0x70, 0x69, 0x53,
	0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a,
	0x0b, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x52, 0x65, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x53, 0x6b, 0x69, 0x70,
	0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3e, 0x0a,
	0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x45,
	0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x14, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e,
	0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x14, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x17, 0x4c,
	0x61, 0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x17, 0x4c, 0x61,
	0x73, 0x74, 0x53, 0x79, 0x6e, 0x63, 0x68, 0x72, 0x6f, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x61, 0x74, 0x65, 0x1a, 0x47, 0x0a, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x8a,
	0x04, 0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x35, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e,
	0x6e, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x52,
	0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x63, 0x75, 0x72,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x72, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x50,
	0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x70, 0x69, 0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x41,
	0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x41, 0x70, 0x69, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x61, 0x0a, 0x14, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x14, 0x47, 0x61,
	0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x47, 0x0a, 0x19, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd8, 0x01, 0x0a, 0x0f,
	0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x37, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x44, 0x53, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x06,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x06, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x4c, 0x0a, 0x0b, 0x44, 0x53, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54,
	0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x45,
	0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x49, 0x53, 0x41,
	0x42, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x22, 0x92, 0x05, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x46, 0x6c, 0x61, 0x74, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x6e,
	0x63, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x11, 0x53, 0x6b, 0x69, 0x70, 0x53, 0x79, 0x6e, 0x63, 0x4f, 0x6e, 0x52, 0x65, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x73, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x49, 0x73, 0x45, 0x6e,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x45, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a,
	0x14, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x69, 0x6e, 0x67, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x3a, 0x0a, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x18, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3c, 0x0a,
	0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x19, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x4e, 0x6f, 0x74,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x4e, 0x6f, 0x74, 0x22, 0x17, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x22, 0x4f, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6f,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35,
	0x0a, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x4d, 0x69, 0x6e,
	0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0b, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x15, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x8f, 0x01, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x1a, 0x38, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x1c,
	0x0a, 0x1a, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x51, 0x0a, 0x1b,
	0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x0a, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x12, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x52, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2a,
	0x64, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09,
	0x0a, 0x05, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x53, 0x33, 0x10,
	0x01, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x4d, 0x42, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x45,
	0x4c, 0x4c, 0x53, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x5a, 0x55, 0x52, 0x45, 0x10, 0x05,
	0x12, 0x07, 0x0a, 0x03, 0x47, 0x43, 0x53, 0x10, 0x06, 0x12, 0x06, 0x0a, 0x02, 0x42, 0x32, 0x10,
	0x07, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x4e, 0x54, 0x41, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03,
	0x53, 0x49, 0x41, 0x10, 0x09, 0x2a, 0x3f, 0x0a, 0x0e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x4c, 0x45, 0x41, 0x52,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x55, 0x53, 0x45, 0x52,
	0x5f, 0x50, 0x57, 0x44, 0x10, 0x03, 0x2a, 0x35, 0x0a, 0x11, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4e, 0x59, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x46, 0x53, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x10, 0x02, 0x32, 0xb1, 0x01,
	0x0a, 0x0f, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x51, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x12, 0x1d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74,
	0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x4d,
	0x69, 0x6e, 0x69, 0x6f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x4b, 0x0a, 0x0c, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x73, 0x12, 0x1b, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1c, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x74, 0x61, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x32, 0x76, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x60, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x22,
	0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x23, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x32, 0x78, 0x0a, 0x17, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x65, 0x72, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x5d, 0x0a, 0x1a, 0x43, 0x6c, 0x65, 0x61, 0x6e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x42, 0x65, 0x66, 0x6f, 0x72, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x12, 0x1d, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6c, 0x65, 0x61,
	0x6e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x1e, 0x2e, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x2e, 0x43, 0x6c, 0x65, 0x61, 0x6e,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x76, 0x35,
	0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cells_object_proto_rawDescOnce sync.Once
	file_cells_object_proto_rawDescData = file_cells_object_proto_rawDesc
)

func file_cells_object_proto_rawDescGZIP() []byte {
	file_cells_object_proto_rawDescOnce.Do(func() {
		file_cells_object_proto_rawDescData = protoimpl.X.CompressGZIP(file_cells_object_proto_rawDescData)
	})
	return file_cells_object_proto_rawDescData
}

var file_cells_object_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_cells_object_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cells_object_proto_goTypes = []any{
	(StorageType)(0),                    // 0: object.StorageType
	(EncryptionMode)(0),                 // 1: object.EncryptionMode
	(StorageTypeFilter)(0),              // 2: object.StorageTypeFilter
	(DataSourceEvent_DSEventType)(0),    // 3: object.DataSourceEvent.DSEventType
	(*CleanResourcesRequest)(nil),       // 4: object.CleanResourcesRequest
	(*CleanResourcesResponse)(nil),      // 5: object.CleanResourcesResponse
	(*DataSource)(nil),                  // 6: object.DataSource
	(*MinioConfig)(nil),                 // 7: object.MinioConfig
	(*DataSourceEvent)(nil),             // 8: object.DataSourceEvent
	(*DataSourceSingleQuery)(nil),       // 9: object.DataSourceSingleQuery
	(*GetMinioConfigRequest)(nil),       // 10: object.GetMinioConfigRequest
	(*GetMinioConfigResponse)(nil),      // 11: object.GetMinioConfigResponse
	(*StorageStatsRequest)(nil),         // 12: object.StorageStatsRequest
	(*StorageStatsResponse)(nil),        // 13: object.StorageStatsResponse
	(*GetDataSourceConfigRequest)(nil),  // 14: object.GetDataSourceConfigRequest
	(*GetDataSourceConfigResponse)(nil), // 15: object.GetDataSourceConfigResponse
	nil,                                 // 16: object.DataSource.StorageConfigurationEntry
	nil,                                 // 17: object.MinioConfig.GatewayConfigurationEntry
	nil,                                 // 18: object.StorageStatsResponse.StatsEntry
}
var file_cells_object_proto_depIdxs = []int32{
	0,  // 0: object.DataSource.StorageType:type_name -> object.StorageType
	16, // 1: object.DataSource.StorageConfiguration:type_name -> object.DataSource.StorageConfigurationEntry
	1,  // 2: object.DataSource.EncryptionMode:type_name -> object.EncryptionMode
	0,  // 3: object.MinioConfig.StorageType:type_name -> object.StorageType
	17, // 4: object.MinioConfig.GatewayConfiguration:type_name -> object.MinioConfig.GatewayConfigurationEntry
	3,  // 5: object.DataSourceEvent.Type:type_name -> object.DataSourceEvent.DSEventType
	6,  // 6: object.DataSourceEvent.Config:type_name -> object.DataSource
	2,  // 7: object.DataSourceSingleQuery.StorageType:type_name -> object.StorageTypeFilter
	1,  // 8: object.DataSourceSingleQuery.EncryptionMode:type_name -> object.EncryptionMode
	7,  // 9: object.GetMinioConfigResponse.MinioConfig:type_name -> object.MinioConfig
	18, // 10: object.StorageStatsResponse.Stats:type_name -> object.StorageStatsResponse.StatsEntry
	6,  // 11: object.GetDataSourceConfigResponse.DataSource:type_name -> object.DataSource
	10, // 12: object.ObjectsEndpoint.GetMinioConfig:input_type -> object.GetMinioConfigRequest
	12, // 13: object.ObjectsEndpoint.StorageStats:input_type -> object.StorageStatsRequest
	14, // 14: object.DataSourceEndpoint.GetDataSourceConfig:input_type -> object.GetDataSourceConfigRequest
	4,  // 15: object.ResourceCleanerEndpoint.CleanResourcesBeforeDelete:input_type -> object.CleanResourcesRequest
	11, // 16: object.ObjectsEndpoint.GetMinioConfig:output_type -> object.GetMinioConfigResponse
	13, // 17: object.ObjectsEndpoint.StorageStats:output_type -> object.StorageStatsResponse
	15, // 18: object.DataSourceEndpoint.GetDataSourceConfig:output_type -> object.GetDataSourceConfigResponse
	5,  // 19: object.ResourceCleanerEndpoint.CleanResourcesBeforeDelete:output_type -> object.CleanResourcesResponse
	16, // [16:20] is the sub-list for method output_type
	12, // [12:16] is the sub-list for method input_type
	12, // [12:12] is the sub-list for extension type_name
	12, // [12:12] is the sub-list for extension extendee
	0,  // [0:12] is the sub-list for field type_name
}

func init() { file_cells_object_proto_init() }
func file_cells_object_proto_init() {
	if File_cells_object_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cells_object_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CleanResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CleanResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DataSource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*MinioConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceSingleQuery); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*GetMinioConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*GetMinioConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*StorageStatsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*StorageStatsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataSourceConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cells_object_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*GetDataSourceConfigResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cells_object_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_cells_object_proto_goTypes,
		DependencyIndexes: file_cells_object_proto_depIdxs,
		EnumInfos:         file_cells_object_proto_enumTypes,
		MessageInfos:      file_cells_object_proto_msgTypes,
	}.Build()
	File_cells_object_proto = out.File
	file_cells_object_proto_rawDesc = nil
	file_cells_object_proto_goTypes = nil
	file_cells_object_proto_depIdxs = nil
}
