// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        (unknown)
// source: cellsapi-share.proto

package rest

import (
	_ "github.com/mwitkow/go-proto-validators"
	idm "github.com/pydio/cells/v4/common/proto/idm"
	service "github.com/pydio/cells/v4/common/proto/service"
	tree "github.com/pydio/cells/v4/common/proto/tree"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Known values for link permissions
type ShareLinkAccessType int32

const (
	ShareLinkAccessType_NoAccess ShareLinkAccessType = 0
	ShareLinkAccessType_Preview  ShareLinkAccessType = 1
	ShareLinkAccessType_Download ShareLinkAccessType = 2
	ShareLinkAccessType_Upload   ShareLinkAccessType = 3
)

// Enum value maps for ShareLinkAccessType.
var (
	ShareLinkAccessType_name = map[int32]string{
		0: "NoAccess",
		1: "Preview",
		2: "Download",
		3: "Upload",
	}
	ShareLinkAccessType_value = map[string]int32{
		"NoAccess": 0,
		"Preview":  1,
		"Download": 2,
		"Upload":   3,
	}
)

func (x ShareLinkAccessType) Enum() *ShareLinkAccessType {
	p := new(ShareLinkAccessType)
	*p = x
	return p
}

func (x ShareLinkAccessType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ShareLinkAccessType) Descriptor() protoreflect.EnumDescriptor {
	return file_cellsapi_share_proto_enumTypes[0].Descriptor()
}

func (ShareLinkAccessType) Type() protoreflect.EnumType {
	return &file_cellsapi_share_proto_enumTypes[0]
}

func (x ShareLinkAccessType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ShareLinkAccessType.Descriptor instead.
func (ShareLinkAccessType) EnumDescriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{0}
}

type ListSharedResourcesRequest_ListShareType int32

const (
	ListSharedResourcesRequest_ANY   ListSharedResourcesRequest_ListShareType = 0
	ListSharedResourcesRequest_LINKS ListSharedResourcesRequest_ListShareType = 1
	ListSharedResourcesRequest_CELLS ListSharedResourcesRequest_ListShareType = 2
)

// Enum value maps for ListSharedResourcesRequest_ListShareType.
var (
	ListSharedResourcesRequest_ListShareType_name = map[int32]string{
		0: "ANY",
		1: "LINKS",
		2: "CELLS",
	}
	ListSharedResourcesRequest_ListShareType_value = map[string]int32{
		"ANY":   0,
		"LINKS": 1,
		"CELLS": 2,
	}
)

func (x ListSharedResourcesRequest_ListShareType) Enum() *ListSharedResourcesRequest_ListShareType {
	p := new(ListSharedResourcesRequest_ListShareType)
	*p = x
	return p
}

func (x ListSharedResourcesRequest_ListShareType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListSharedResourcesRequest_ListShareType) Descriptor() protoreflect.EnumDescriptor {
	return file_cellsapi_share_proto_enumTypes[1].Descriptor()
}

func (ListSharedResourcesRequest_ListShareType) Type() protoreflect.EnumType {
	return &file_cellsapi_share_proto_enumTypes[1]
}

func (x ListSharedResourcesRequest_ListShareType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListSharedResourcesRequest_ListShareType.Descriptor instead.
func (ListSharedResourcesRequest_ListShareType) EnumDescriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{12, 0}
}

// Group collected acls by subjects
type CellAcl struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Associated Role ID
	RoleId string `protobuf:"bytes,1,opt,name=RoleId,proto3" json:"RoleId,omitempty"`
	// List of Acl Actions and their effect
	Actions []*idm.ACLAction `protobuf:"bytes,2,rep,name=Actions,proto3" json:"Actions,omitempty"`
	// Flag for detecting if it's a user role or not
	IsUserRole bool `protobuf:"varint,3,opt,name=IsUserRole,proto3" json:"IsUserRole,omitempty"`
	// Associated User
	User *idm.User `protobuf:"bytes,4,opt,name=User,proto3" json:"User,omitempty"`
	// Associated Group
	Group *idm.User `protobuf:"bytes,5,opt,name=Group,proto3" json:"Group,omitempty"`
	// Associated Role
	Role *idm.Role `protobuf:"bytes,6,opt,name=Role,proto3" json:"Role,omitempty"`
}

func (x *CellAcl) Reset() {
	*x = CellAcl{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CellAcl) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CellAcl) ProtoMessage() {}

func (x *CellAcl) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CellAcl.ProtoReflect.Descriptor instead.
func (*CellAcl) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{0}
}

func (x *CellAcl) GetRoleId() string {
	if x != nil {
		return x.RoleId
	}
	return ""
}

func (x *CellAcl) GetActions() []*idm.ACLAction {
	if x != nil {
		return x.Actions
	}
	return nil
}

func (x *CellAcl) GetIsUserRole() bool {
	if x != nil {
		return x.IsUserRole
	}
	return false
}

func (x *CellAcl) GetUser() *idm.User {
	if x != nil {
		return x.User
	}
	return nil
}

func (x *CellAcl) GetGroup() *idm.User {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *CellAcl) GetRole() *idm.Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// Model for representing a Cell
type Cell struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique Id of the Cell
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Label of the Cell (max 500 chars)
	Label string `protobuf:"bytes,2,opt,name=Label,proto3" json:"Label,omitempty"`
	// Long description of the Cell (max 1000 chars)
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Nodes attached as roots to this Cell
	RootNodes []*tree.Node `protobuf:"bytes,4,rep,name=RootNodes,proto3" json:"RootNodes,omitempty"`
	// Access control for this Cell
	ACLs map[string]*CellAcl `protobuf:"bytes,5,rep,name=ACLs,proto3" json:"ACLs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Timestamp after which the share is disabled
	AccessEnd int64 `protobuf:"varint,8,opt,name=AccessEnd,proto3" json:"AccessEnd,omitempty"`
	// Associated access policies
	Policies []*service.ResourcePolicy `protobuf:"bytes,6,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Whether these policies are currently editable
	PoliciesContextEditable bool `protobuf:"varint,7,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *Cell) Reset() {
	*x = Cell{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Cell) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cell) ProtoMessage() {}

func (x *Cell) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cell.ProtoReflect.Descriptor instead.
func (*Cell) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{1}
}

func (x *Cell) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Cell) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *Cell) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cell) GetRootNodes() []*tree.Node {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *Cell) GetACLs() map[string]*CellAcl {
	if x != nil {
		return x.ACLs
	}
	return nil
}

func (x *Cell) GetAccessEnd() int64 {
	if x != nil {
		return x.AccessEnd
	}
	return 0
}

func (x *Cell) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *Cell) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

type ShareLinkTargetUser struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Display       string `protobuf:"bytes,1,opt,name=Display,proto3" json:"Display,omitempty"`
	DownloadCount int32  `protobuf:"varint,2,opt,name=DownloadCount,proto3" json:"DownloadCount,omitempty"`
}

func (x *ShareLinkTargetUser) Reset() {
	*x = ShareLinkTargetUser{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareLinkTargetUser) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareLinkTargetUser) ProtoMessage() {}

func (x *ShareLinkTargetUser) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareLinkTargetUser.ProtoReflect.Descriptor instead.
func (*ShareLinkTargetUser) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{2}
}

func (x *ShareLinkTargetUser) GetDisplay() string {
	if x != nil {
		return x.Display
	}
	return ""
}

func (x *ShareLinkTargetUser) GetDownloadCount() int32 {
	if x != nil {
		return x.DownloadCount
	}
	return 0
}

// Model for representing a public link
type ShareLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Internal identifier of the link
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// Unique Hash for accessing the link
	LinkHash string `protobuf:"bytes,2,opt,name=LinkHash,proto3" json:"LinkHash,omitempty"`
	// Full URL for accessing the link
	LinkUrl string `protobuf:"bytes,3,opt,name=LinkUrl,proto3" json:"LinkUrl,omitempty"`
	// Label of the Link (max 500 chars)
	Label string `protobuf:"bytes,4,opt,name=Label,proto3" json:"Label,omitempty"`
	// Description of the Link (max 1000 chars)
	Description string `protobuf:"bytes,5,opt,name=Description,proto3" json:"Description,omitempty"`
	// Temporary user Uuid used to login automatically when accessing this link
	UserUuid string `protobuf:"bytes,6,opt,name=UserUuid,proto3" json:"UserUuid,omitempty"`
	// Temporary user Login used to login automatically when accessing this link
	UserLogin string `protobuf:"bytes,7,opt,name=UserLogin,proto3" json:"UserLogin,omitempty"`
	// Whether a password is required or not to access the link
	PasswordRequired bool `protobuf:"varint,8,opt,name=PasswordRequired,proto3" json:"PasswordRequired,omitempty"`
	// Timestamp of start date for enabling the share (not implemented yet)
	AccessStart int64 `protobuf:"varint,9,opt,name=AccessStart,proto3" json:"AccessStart,omitempty"`
	// Timestamp after which the share is disabled
	AccessEnd int64 `protobuf:"varint,10,opt,name=AccessEnd,proto3" json:"AccessEnd,omitempty"`
	// Maximum number of downloads until expiration
	MaxDownloads int64 `protobuf:"varint,11,opt,name=MaxDownloads,proto3" json:"MaxDownloads,omitempty"`
	// Current number of downloads
	CurrentDownloads int64 `protobuf:"varint,12,opt,name=CurrentDownloads,proto3" json:"CurrentDownloads,omitempty"`
	// Display Template for loading the public link
	ViewTemplateName string `protobuf:"bytes,13,opt,name=ViewTemplateName,proto3" json:"ViewTemplateName,omitempty"`
	// TargetUsers can be used to restrict access
	TargetUsers map[string]*ShareLinkTargetUser `protobuf:"bytes,14,rep,name=TargetUsers,proto3" json:"TargetUsers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// RestrictToTargetUsers enable users restriction
	RestrictToTargetUsers bool `protobuf:"varint,15,opt,name=RestrictToTargetUsers,proto3" json:"RestrictToTargetUsers,omitempty"`
	// Nodes in the tree that serve as root to this link
	RootNodes []*tree.Node `protobuf:"bytes,16,rep,name=RootNodes,proto3" json:"RootNodes,omitempty"`
	// Specific permissions for public links
	Permissions []ShareLinkAccessType `protobuf:"varint,17,rep,packed,name=Permissions,proto3,enum=rest.ShareLinkAccessType" json:"Permissions,omitempty"`
	// Security policies
	Policies []*service.ResourcePolicy `protobuf:"bytes,18,rep,name=Policies,proto3" json:"Policies,omitempty"`
	// Whether policies are currently editable or not
	PoliciesContextEditable bool `protobuf:"varint,19,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *ShareLink) Reset() {
	*x = ShareLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ShareLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShareLink) ProtoMessage() {}

func (x *ShareLink) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShareLink.ProtoReflect.Descriptor instead.
func (*ShareLink) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{3}
}

func (x *ShareLink) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ShareLink) GetLinkHash() string {
	if x != nil {
		return x.LinkHash
	}
	return ""
}

func (x *ShareLink) GetLinkUrl() string {
	if x != nil {
		return x.LinkUrl
	}
	return ""
}

func (x *ShareLink) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ShareLink) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ShareLink) GetUserUuid() string {
	if x != nil {
		return x.UserUuid
	}
	return ""
}

func (x *ShareLink) GetUserLogin() string {
	if x != nil {
		return x.UserLogin
	}
	return ""
}

func (x *ShareLink) GetPasswordRequired() bool {
	if x != nil {
		return x.PasswordRequired
	}
	return false
}

func (x *ShareLink) GetAccessStart() int64 {
	if x != nil {
		return x.AccessStart
	}
	return 0
}

func (x *ShareLink) GetAccessEnd() int64 {
	if x != nil {
		return x.AccessEnd
	}
	return 0
}

func (x *ShareLink) GetMaxDownloads() int64 {
	if x != nil {
		return x.MaxDownloads
	}
	return 0
}

func (x *ShareLink) GetCurrentDownloads() int64 {
	if x != nil {
		return x.CurrentDownloads
	}
	return 0
}

func (x *ShareLink) GetViewTemplateName() string {
	if x != nil {
		return x.ViewTemplateName
	}
	return ""
}

func (x *ShareLink) GetTargetUsers() map[string]*ShareLinkTargetUser {
	if x != nil {
		return x.TargetUsers
	}
	return nil
}

func (x *ShareLink) GetRestrictToTargetUsers() bool {
	if x != nil {
		return x.RestrictToTargetUsers
	}
	return false
}

func (x *ShareLink) GetRootNodes() []*tree.Node {
	if x != nil {
		return x.RootNodes
	}
	return nil
}

func (x *ShareLink) GetPermissions() []ShareLinkAccessType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

func (x *ShareLink) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *ShareLink) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

// Request for creating a Cell
type PutCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content of the Cell (Room is legacy name)
	Room *Cell `protobuf:"bytes,1,opt,name=Room,proto3" json:"Room,omitempty"`
	// Whether to create a dedicated folder for this cell at creation
	CreateEmptyRoot bool `protobuf:"varint,2,opt,name=CreateEmptyRoot,proto3" json:"CreateEmptyRoot,omitempty"`
}

func (x *PutCellRequest) Reset() {
	*x = PutCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutCellRequest) ProtoMessage() {}

func (x *PutCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutCellRequest.ProtoReflect.Descriptor instead.
func (*PutCellRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{4}
}

func (x *PutCellRequest) GetRoom() *Cell {
	if x != nil {
		return x.Room
	}
	return nil
}

func (x *PutCellRequest) GetCreateEmptyRoot() bool {
	if x != nil {
		return x.CreateEmptyRoot
	}
	return false
}

// Load a Cell request
type GetCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cell Uuid
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *GetCellRequest) Reset() {
	*x = GetCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCellRequest) ProtoMessage() {}

func (x *GetCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCellRequest.ProtoReflect.Descriptor instead.
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{5}
}

func (x *GetCellRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Request for deleting a Cell
type DeleteCellRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cell Uuid
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *DeleteCellRequest) Reset() {
	*x = DeleteCellRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCellRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellRequest) ProtoMessage() {}

func (x *DeleteCellRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellRequest.ProtoReflect.Descriptor instead.
func (*DeleteCellRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteCellRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type DeleteCellResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Delete result
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DeleteCellResponse) Reset() {
	*x = DeleteCellResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteCellResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteCellResponse) ProtoMessage() {}

func (x *DeleteCellResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteCellResponse.ProtoReflect.Descriptor instead.
func (*DeleteCellResponse) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteCellResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type GetShareLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Link Uuid
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *GetShareLinkRequest) Reset() {
	*x = GetShareLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetShareLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetShareLinkRequest) ProtoMessage() {}

func (x *GetShareLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetShareLinkRequest.ProtoReflect.Descriptor instead.
func (*GetShareLinkRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{8}
}

func (x *GetShareLinkRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Request for create/update a link
type PutShareLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Content of the link to create
	ShareLink *ShareLink `protobuf:"bytes,1,opt,name=ShareLink,proto3" json:"ShareLink,omitempty"`
	// Whether it has Password enabled
	PasswordEnabled bool `protobuf:"varint,2,opt,name=PasswordEnabled,proto3" json:"PasswordEnabled,omitempty"`
	// Set if switching from no password to password
	CreatePassword string `protobuf:"bytes,3,opt,name=CreatePassword,proto3" json:"CreatePassword,omitempty"`
	// Set if updating an existing password
	UpdatePassword string `protobuf:"bytes,4,opt,name=UpdatePassword,proto3" json:"UpdatePassword,omitempty"`
	// Change the ShareLink Hash with a custom value
	UpdateCustomHash string `protobuf:"bytes,5,opt,name=UpdateCustomHash,proto3" json:"UpdateCustomHash,omitempty"`
}

func (x *PutShareLinkRequest) Reset() {
	*x = PutShareLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutShareLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutShareLinkRequest) ProtoMessage() {}

func (x *PutShareLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutShareLinkRequest.ProtoReflect.Descriptor instead.
func (*PutShareLinkRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{9}
}

func (x *PutShareLinkRequest) GetShareLink() *ShareLink {
	if x != nil {
		return x.ShareLink
	}
	return nil
}

func (x *PutShareLinkRequest) GetPasswordEnabled() bool {
	if x != nil {
		return x.PasswordEnabled
	}
	return false
}

func (x *PutShareLinkRequest) GetCreatePassword() string {
	if x != nil {
		return x.CreatePassword
	}
	return ""
}

func (x *PutShareLinkRequest) GetUpdatePassword() string {
	if x != nil {
		return x.UpdatePassword
	}
	return ""
}

func (x *PutShareLinkRequest) GetUpdateCustomHash() string {
	if x != nil {
		return x.UpdateCustomHash
	}
	return ""
}

// Request for deleting a link
type DeleteShareLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Id of Link to delete
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *DeleteShareLinkRequest) Reset() {
	*x = DeleteShareLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShareLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShareLinkRequest) ProtoMessage() {}

func (x *DeleteShareLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShareLinkRequest.ProtoReflect.Descriptor instead.
func (*DeleteShareLinkRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{10}
}

func (x *DeleteShareLinkRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Response for deleting a share link
type DeleteShareLinkResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If delete sucess or failed
	Success bool `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
}

func (x *DeleteShareLinkResponse) Reset() {
	*x = DeleteShareLinkResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteShareLinkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteShareLinkResponse) ProtoMessage() {}

func (x *DeleteShareLinkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteShareLinkResponse.ProtoReflect.Descriptor instead.
func (*DeleteShareLinkResponse) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{11}
}

func (x *DeleteShareLinkResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

type ListSharedResourcesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Filter output to a given type
	ShareType ListSharedResourcesRequest_ListShareType `protobuf:"varint,1,opt,name=ShareType,proto3,enum=rest.ListSharedResourcesRequest_ListShareType" json:"ShareType,omitempty"`
	// Will restrict the list to the shares readable by a specific subject.
	// In user-context, current user is used by default. In admin-context, this can
	// be any resource policy subject
	Subject string `protobuf:"bytes,3,opt,name=Subject,proto3" json:"Subject,omitempty"`
	// If true, will also check filter the output to shares actually owned by subject
	OwnedBySubject bool `protobuf:"varint,4,opt,name=OwnedBySubject,proto3" json:"OwnedBySubject,omitempty"`
	// Start listing at a given offset
	Offset int32 `protobuf:"varint,5,opt,name=Offset,proto3" json:"Offset,omitempty"`
	// Limit number of results
	Limit int32 `protobuf:"varint,6,opt,name=Limit,proto3" json:"Limit,omitempty"`
}

func (x *ListSharedResourcesRequest) Reset() {
	*x = ListSharedResourcesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharedResourcesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResourcesRequest) ProtoMessage() {}

func (x *ListSharedResourcesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResourcesRequest.ProtoReflect.Descriptor instead.
func (*ListSharedResourcesRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{12}
}

func (x *ListSharedResourcesRequest) GetShareType() ListSharedResourcesRequest_ListShareType {
	if x != nil {
		return x.ShareType
	}
	return ListSharedResourcesRequest_ANY
}

func (x *ListSharedResourcesRequest) GetSubject() string {
	if x != nil {
		return x.Subject
	}
	return ""
}

func (x *ListSharedResourcesRequest) GetOwnedBySubject() bool {
	if x != nil {
		return x.OwnedBySubject
	}
	return false
}

func (x *ListSharedResourcesRequest) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSharedResourcesRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type ListSharedResourcesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Actual results
	Resources []*ListSharedResourcesResponse_SharedResource `protobuf:"bytes,1,rep,name=Resources,proto3" json:"Resources,omitempty"`
	// Cursor informations
	Offset int32 `protobuf:"varint,2,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit  int32 `protobuf:"varint,3,opt,name=Limit,proto3" json:"Limit,omitempty"`
	Total  int32 `protobuf:"varint,4,opt,name=Total,proto3" json:"Total,omitempty"`
}

func (x *ListSharedResourcesResponse) Reset() {
	*x = ListSharedResourcesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharedResourcesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResourcesResponse) ProtoMessage() {}

func (x *ListSharedResourcesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResourcesResponse.ProtoReflect.Descriptor instead.
func (*ListSharedResourcesResponse) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{13}
}

func (x *ListSharedResourcesResponse) GetResources() []*ListSharedResourcesResponse_SharedResource {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *ListSharedResourcesResponse) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ListSharedResourcesResponse) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ListSharedResourcesResponse) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type UpdateSharePoliciesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cell or Link UUID
	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	// List of policies to update
	Policies []*service.ResourcePolicy `protobuf:"bytes,2,rep,name=Policies,proto3" json:"Policies,omitempty"`
}

func (x *UpdateSharePoliciesRequest) Reset() {
	*x = UpdateSharePoliciesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharePoliciesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharePoliciesRequest) ProtoMessage() {}

func (x *UpdateSharePoliciesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharePoliciesRequest.ProtoReflect.Descriptor instead.
func (*UpdateSharePoliciesRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{14}
}

func (x *UpdateSharePoliciesRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpdateSharePoliciesRequest) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

type UpdateSharePoliciesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success                 bool                      `protobuf:"varint,1,opt,name=Success,proto3" json:"Success,omitempty"`
	Policies                []*service.ResourcePolicy `protobuf:"bytes,2,rep,name=Policies,proto3" json:"Policies,omitempty"`
	PoliciesContextEditable bool                      `protobuf:"varint,3,opt,name=PoliciesContextEditable,proto3" json:"PoliciesContextEditable,omitempty"`
}

func (x *UpdateSharePoliciesResponse) Reset() {
	*x = UpdateSharePoliciesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSharePoliciesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSharePoliciesResponse) ProtoMessage() {}

func (x *UpdateSharePoliciesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSharePoliciesResponse.ProtoReflect.Descriptor instead.
func (*UpdateSharePoliciesResponse) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateSharePoliciesResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *UpdateSharePoliciesResponse) GetPolicies() []*service.ResourcePolicy {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *UpdateSharePoliciesResponse) GetPoliciesContextEditable() bool {
	if x != nil {
		return x.PoliciesContextEditable
	}
	return false
}

// Container for ShareLink or Cell
type ListSharedResourcesResponse_SharedResource struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Node  *tree.Node `protobuf:"bytes,1,opt,name=Node,proto3" json:"Node,omitempty"`
	Link  *ShareLink `protobuf:"bytes,2,opt,name=Link,proto3" json:"Link,omitempty"`
	Cells []*Cell    `protobuf:"bytes,3,rep,name=Cells,proto3" json:"Cells,omitempty"`
}

func (x *ListSharedResourcesResponse_SharedResource) Reset() {
	*x = ListSharedResourcesResponse_SharedResource{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_share_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListSharedResourcesResponse_SharedResource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSharedResourcesResponse_SharedResource) ProtoMessage() {}

func (x *ListSharedResourcesResponse_SharedResource) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_share_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSharedResourcesResponse_SharedResource.ProtoReflect.Descriptor instead.
func (*ListSharedResourcesResponse_SharedResource) Descriptor() ([]byte, []int) {
	return file_cellsapi_share_proto_rawDescGZIP(), []int{13, 0}
}

func (x *ListSharedResourcesResponse_SharedResource) GetNode() *tree.Node {
	if x != nil {
		return x.Node
	}
	return nil
}

func (x *ListSharedResourcesResponse_SharedResource) GetLink() *ShareLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *ListSharedResourcesResponse_SharedResource) GetCells() []*Cell {
	if x != nil {
		return x.Cells
	}
	return nil
}

var File_cellsapi_share_proto protoreflect.FileDescriptor

var file_cellsapi_share_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x36, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x6d, 0x77, 0x69, 0x74, 0x6b, 0x6f, 0x77, 0x2f, 0x67, 0x6f, 0x2d, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x2f, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x01, 0x0a,
	0x07, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x28, 0x0a, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0e, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x41, 0x43, 0x4c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x73,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x49, 0x73, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x1d, 0x0a, 0x04, 0x52, 0x6f,
	0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x52, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x22, 0x8d, 0x03, 0x0a, 0x04, 0x43, 0x65,
	0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xf4, 0x03, 0x52, 0x05,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03,
	0x78, 0xe8, 0x07, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x28, 0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52,
	0x09, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x28, 0x0a, 0x04, 0x41, 0x43,
	0x4c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x43, 0x65, 0x6c, 0x6c, 0x2e, 0x41, 0x43, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04,
	0x41, 0x43, 0x4c, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e,
	0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x45,
	0x6e, 0x64, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x06,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x1a, 0x46, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x23, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0d, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x41, 0x63, 0x6c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x55, 0x0a, 0x13, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x12, 0x18, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x6f,
	0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0xec, 0x06, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x12,
	0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4c, 0x69, 0x6e, 0x6b, 0x48, 0x61, 0x73, 0x68, 0x12, 0x18,
	0x0a, 0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x72, 0x6c, 0x12, 0x1d, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf, 0x1f, 0x03, 0x78, 0xf4, 0x03,
	0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x29, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xe2, 0xdf,
	0x1f, 0x03, 0x78, 0xe8, 0x07, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x55, 0x75, 0x69, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x55, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x2a, 0x0a, 0x10,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x45, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x61, 0x78, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x4d, 0x61, 0x78, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x10, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x56, 0x69, 0x65, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x56, 0x69, 0x65, 0x77, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x54, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x73, 0x74,
	0x72, 0x69, 0x63, 0x74, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72,
	0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x54, 0x6f, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x28,
	0x0a, 0x09, 0x52, 0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x52,
	0x6f, 0x6f, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x52, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x1a, 0x59, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0x5a, 0x0a, 0x0e, 0x50, 0x75, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1e, 0x0a, 0x04, 0x52, 0x6f, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x04, 0x52, 0x6f, 0x6f,
	0x6d, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x6f, 0x6f, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x6f, 0x6f, 0x74, 0x22, 0x24, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x22, 0x27, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0x2e, 0x0a, 0x12, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x29, 0x0a, 0x13, 0x47, 0x65,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0xea, 0x01, 0x0a, 0x13, 0x50, 0x75, 0x74, 0x53, 0x68, 0x61,
	0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a,
	0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26,
	0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x61,
	0x73, 0x68, 0x22, 0x2c, 0x0a, 0x16, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72,
	0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64,
	0x22, 0x33, 0x0a, 0x17, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x8a, 0x02, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x75, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x4f, 0x77, 0x6e, 0x65, 0x64, 0x42, 0x79, 0x53, 0x75, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x22, 0x2e, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05,
	0x4c, 0x49, 0x4e, 0x4b, 0x53, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x45, 0x4c, 0x4c, 0x53,
	0x10, 0x02, 0x22, 0xaa, 0x02, 0x0a, 0x1b, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4e, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x1a, 0x77, 0x0a, 0x0e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68,
	0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x20, 0x0a,
	0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x6c, 0x6c, 0x52, 0x05, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x22,
	0x65, 0x0a, 0x1a, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x22, 0xa6, 0x01, 0x0a, 0x1b, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x68, 0x61, 0x72, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x12, 0x33, 0x0a, 0x08, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x08, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x45, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x2a,
	0x4a, 0x0a, 0x13, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x10,
	0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x6f, 0x77, 0x6e, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x02, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x10, 0x03, 0x42, 0x2a, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f, 0x2f,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellsapi_share_proto_rawDescOnce sync.Once
	file_cellsapi_share_proto_rawDescData = file_cellsapi_share_proto_rawDesc
)

func file_cellsapi_share_proto_rawDescGZIP() []byte {
	file_cellsapi_share_proto_rawDescOnce.Do(func() {
		file_cellsapi_share_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellsapi_share_proto_rawDescData)
	})
	return file_cellsapi_share_proto_rawDescData
}

var file_cellsapi_share_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cellsapi_share_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cellsapi_share_proto_goTypes = []interface{}{
	(ShareLinkAccessType)(0),                           // 0: rest.ShareLinkAccessType
	(ListSharedResourcesRequest_ListShareType)(0),      // 1: rest.ListSharedResourcesRequest.ListShareType
	(*CellAcl)(nil),                                    // 2: rest.CellAcl
	(*Cell)(nil),                                       // 3: rest.Cell
	(*ShareLinkTargetUser)(nil),                        // 4: rest.ShareLinkTargetUser
	(*ShareLink)(nil),                                  // 5: rest.ShareLink
	(*PutCellRequest)(nil),                             // 6: rest.PutCellRequest
	(*GetCellRequest)(nil),                             // 7: rest.GetCellRequest
	(*DeleteCellRequest)(nil),                          // 8: rest.DeleteCellRequest
	(*DeleteCellResponse)(nil),                         // 9: rest.DeleteCellResponse
	(*GetShareLinkRequest)(nil),                        // 10: rest.GetShareLinkRequest
	(*PutShareLinkRequest)(nil),                        // 11: rest.PutShareLinkRequest
	(*DeleteShareLinkRequest)(nil),                     // 12: rest.DeleteShareLinkRequest
	(*DeleteShareLinkResponse)(nil),                    // 13: rest.DeleteShareLinkResponse
	(*ListSharedResourcesRequest)(nil),                 // 14: rest.ListSharedResourcesRequest
	(*ListSharedResourcesResponse)(nil),                // 15: rest.ListSharedResourcesResponse
	(*UpdateSharePoliciesRequest)(nil),                 // 16: rest.UpdateSharePoliciesRequest
	(*UpdateSharePoliciesResponse)(nil),                // 17: rest.UpdateSharePoliciesResponse
	nil,                                                // 18: rest.Cell.ACLsEntry
	nil,                                                // 19: rest.ShareLink.TargetUsersEntry
	(*ListSharedResourcesResponse_SharedResource)(nil), // 20: rest.ListSharedResourcesResponse.SharedResource
	(*idm.ACLAction)(nil),                              // 21: idm.ACLAction
	(*idm.User)(nil),                                   // 22: idm.User
	(*idm.Role)(nil),                                   // 23: idm.Role
	(*tree.Node)(nil),                                  // 24: tree.Node
	(*service.ResourcePolicy)(nil),                     // 25: service.ResourcePolicy
}
var file_cellsapi_share_proto_depIdxs = []int32{
	21, // 0: rest.CellAcl.Actions:type_name -> idm.ACLAction
	22, // 1: rest.CellAcl.User:type_name -> idm.User
	22, // 2: rest.CellAcl.Group:type_name -> idm.User
	23, // 3: rest.CellAcl.Role:type_name -> idm.Role
	24, // 4: rest.Cell.RootNodes:type_name -> tree.Node
	18, // 5: rest.Cell.ACLs:type_name -> rest.Cell.ACLsEntry
	25, // 6: rest.Cell.Policies:type_name -> service.ResourcePolicy
	19, // 7: rest.ShareLink.TargetUsers:type_name -> rest.ShareLink.TargetUsersEntry
	24, // 8: rest.ShareLink.RootNodes:type_name -> tree.Node
	0,  // 9: rest.ShareLink.Permissions:type_name -> rest.ShareLinkAccessType
	25, // 10: rest.ShareLink.Policies:type_name -> service.ResourcePolicy
	3,  // 11: rest.PutCellRequest.Room:type_name -> rest.Cell
	5,  // 12: rest.PutShareLinkRequest.ShareLink:type_name -> rest.ShareLink
	1,  // 13: rest.ListSharedResourcesRequest.ShareType:type_name -> rest.ListSharedResourcesRequest.ListShareType
	20, // 14: rest.ListSharedResourcesResponse.Resources:type_name -> rest.ListSharedResourcesResponse.SharedResource
	25, // 15: rest.UpdateSharePoliciesRequest.Policies:type_name -> service.ResourcePolicy
	25, // 16: rest.UpdateSharePoliciesResponse.Policies:type_name -> service.ResourcePolicy
	2,  // 17: rest.Cell.ACLsEntry.value:type_name -> rest.CellAcl
	4,  // 18: rest.ShareLink.TargetUsersEntry.value:type_name -> rest.ShareLinkTargetUser
	24, // 19: rest.ListSharedResourcesResponse.SharedResource.Node:type_name -> tree.Node
	5,  // 20: rest.ListSharedResourcesResponse.SharedResource.Link:type_name -> rest.ShareLink
	3,  // 21: rest.ListSharedResourcesResponse.SharedResource.Cells:type_name -> rest.Cell
	22, // [22:22] is the sub-list for method output_type
	22, // [22:22] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_cellsapi_share_proto_init() }
func file_cellsapi_share_proto_init() {
	if File_cellsapi_share_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cellsapi_share_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CellAcl); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Cell); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareLinkTargetUser); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ShareLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCellRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteCellResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetShareLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutShareLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShareLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteShareLinkResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharedResourcesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharedResourcesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharePoliciesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSharePoliciesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_share_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListSharedResourcesResponse_SharedResource); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellsapi_share_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cellsapi_share_proto_goTypes,
		DependencyIndexes: file_cellsapi_share_proto_depIdxs,
		EnumInfos:         file_cellsapi_share_proto_enumTypes,
		MessageInfos:      file_cellsapi_share_proto_msgTypes,
	}.Build()
	File_cellsapi_share_proto = out.File
	file_cellsapi_share_proto_rawDesc = nil
	file_cellsapi_share_proto_goTypes = nil
	file_cellsapi_share_proto_depIdxs = nil
}
