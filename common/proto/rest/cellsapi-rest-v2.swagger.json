{
  "consumes": [
    "application/json"
  ],
  "definitions": {
    "MetaUpdateOp": {
      "default": "PUT",
      "enum": [
        "PUT",
        "DELETE"
      ],
      "type": "string"
    },
    "activityObject": {
      "properties": {
        "@context": {
          "type": "string"
        },
        "accuracy": {
          "format": "float",
          "title": "Place Properties",
          "type": "number"
        },
        "actor": {
          "$ref": "#/definitions/activityObject",
          "title": "Activity Properties"
        },
        "altitude": {
          "format": "float",
          "type": "number"
        },
        "anyOf": {
          "$ref": "#/definitions/activityObject"
        },
        "attachment": {
          "$ref": "#/definitions/activityObject"
        },
        "attributedTo": {
          "$ref": "#/definitions/activityObject"
        },
        "audience": {
          "$ref": "#/definitions/activityObject"
        },
        "bcc": {
          "$ref": "#/definitions/activityObject"
        },
        "bto": {
          "$ref": "#/definitions/activityObject"
        },
        "cc": {
          "$ref": "#/definitions/activityObject"
        },
        "closed": {
          "format": "date-time",
          "type": "string"
        },
        "content": {
          "$ref": "#/definitions/activityObject"
        },
        "current": {
          "$ref": "#/definitions/activityObject"
        },
        "deleted": {
          "format": "date-time",
          "type": "string"
        },
        "duration": {
          "format": "date-time",
          "type": "string"
        },
        "endTime": {
          "format": "date-time",
          "type": "string"
        },
        "first": {
          "$ref": "#/definitions/activityObject"
        },
        "formerType": {
          "$ref": "#/definitions/activityObjectType",
          "title": "Tombstone Properties"
        },
        "generator": {
          "$ref": "#/definitions/activityObject"
        },
        "height": {
          "format": "int32",
          "type": "integer"
        },
        "href": {
          "title": "Link Properties",
          "type": "string"
        },
        "hreflang": {
          "type": "string"
        },
        "icon": {
          "$ref": "#/definitions/activityObject"
        },
        "id": {
          "type": "string"
        },
        "image": {
          "$ref": "#/definitions/activityObject"
        },
        "inReplyTo": {
          "$ref": "#/definitions/activityObject"
        },
        "instrument": {
          "$ref": "#/definitions/activityObject"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/activityObject",
            "type": "object"
          },
          "title": "Collection Properties",
          "type": "array"
        },
        "last": {
          "$ref": "#/definitions/activityObject"
        },
        "latitude": {
          "format": "float",
          "type": "number"
        },
        "location": {
          "$ref": "#/definitions/activityObject"
        },
        "longitude": {
          "format": "float",
          "type": "number"
        },
        "markdown": {
          "title": "Object objectContext = 5;",
          "type": "string"
        },
        "mediaType": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "next": {
          "$ref": "#/definitions/activityObject"
        },
        "object": {
          "$ref": "#/definitions/activityObject"
        },
        "oneOf": {
          "$ref": "#/definitions/activityObject",
          "title": "Question Properties"
        },
        "origin": {
          "$ref": "#/definitions/activityObject"
        },
        "partOf": {
          "$ref": "#/definitions/activityObject"
        },
        "prev": {
          "$ref": "#/definitions/activityObject"
        },
        "preview": {
          "$ref": "#/definitions/activityObject"
        },
        "published": {
          "format": "date-time",
          "type": "string"
        },
        "radius": {
          "format": "float",
          "type": "number"
        },
        "rel": {
          "type": "string"
        },
        "relationship": {
          "$ref": "#/definitions/activityObject"
        },
        "replies": {
          "$ref": "#/definitions/activityObject"
        },
        "result": {
          "$ref": "#/definitions/activityObject"
        },
        "startTime": {
          "format": "date-time",
          "type": "string"
        },
        "subject": {
          "$ref": "#/definitions/activityObject",
          "title": "Relationship Properties"
        },
        "summary": {
          "type": "string"
        },
        "tag": {
          "$ref": "#/definitions/activityObject"
        },
        "target": {
          "$ref": "#/definitions/activityObject"
        },
        "to": {
          "$ref": "#/definitions/activityObject"
        },
        "totalItems": {
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "$ref": "#/definitions/activityObjectType"
        },
        "units": {
          "type": "string"
        },
        "updated": {
          "format": "date-time",
          "type": "string"
        },
        "url": {
          "$ref": "#/definitions/activityObject"
        },
        "width": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "activityObjectType": {
      "default": "BaseObject",
      "enum": [
        "BaseObject",
        "Activity",
        "Link",
        "Mention",
        "Collection",
        "OrderedCollection",
        "CollectionPage",
        "OrderedCollectionPage",
        "Application",
        "Group",
        "Organization",
        "Person",
        "Service",
        "Article",
        "Audio",
        "Document",
        "Event",
        "Image",
        "Note",
        "Page",
        "Place",
        "Profile",
        "Relationship",
        "Tombstone",
        "Video",
        "Accept",
        "Add",
        "Announce",
        "Arrive",
        "Block",
        "Create",
        "Delete",
        "Dislike",
        "Flag",
        "Follow",
        "Ignore",
        "Invite",
        "Join",
        "Leave",
        "Like",
        "Listen",
        "Move",
        "Offer",
        "Question",
        "Reject",
        "Read",
        "Remove",
        "TentativeReject",
        "TentativeAccept",
        "Travel",
        "Undo",
        "Update",
        "UpdateComment",
        "UpdateMeta",
        "View",
        "Workspace",
        "Digest",
        "Folder",
        "Cell",
        "Share"
      ],
      "title": "- Collection: CollectionTypes\n - Application: Actor Types\n - Article: Objects Types\n - Accept: Activity Types\n - Workspace: Pydio Types",
      "type": "string"
    },
    "activityOwnerType": {
      "default": "NODE",
      "enum": [
        "NODE",
        "USER"
      ],
      "type": "string"
    },
    "activitySubscription": {
      "properties": {
        "Events": {
          "items": {
            "type": "string"
          },
          "title": "List of events to listen to",
          "type": "array"
        },
        "ObjectId": {
          "title": "If of the owner",
          "type": "string"
        },
        "ObjectType": {
          "$ref": "#/definitions/activityOwnerType",
          "title": "Type of owner"
        },
        "UserId": {
          "title": "Id of the user for this subscription",
          "type": "string"
        }
      },
      "type": "object"
    },
    "idmSearchUserMetaRequest": {
      "properties": {
        "MetaUuids": {
          "items": {
            "type": "string"
          },
          "title": "Look for meta by their unique identifier",
          "type": "array"
        },
        "Namespace": {
          "title": "Filter meta by their namespace",
          "type": "string"
        },
        "NodeUuids": {
          "items": {
            "type": "string"
          },
          "title": "Look for all meta for a list of nodes",
          "type": "array"
        },
        "ResourceQuery": {
          "$ref": "#/definitions/serviceResourcePolicyQuery",
          "title": "Filter meta by policies query"
        },
        "ResourceSubjectOwner": {
          "title": "Filter meta by owner (in the sense of the policies)",
          "type": "string"
        }
      },
      "title": "Request for searching UserMeta by NodeUuid or by Namespace",
      "type": "object"
    },
    "idmUserMetaNamespace": {
      "properties": {
        "Indexable": {
          "title": "Whether a modification of a metadata value for this namespace should trigger an indexation by the search engine",
          "type": "boolean"
        },
        "JsonDefinition": {
          "title": "Json-encoded type to provide accurate interface for edition",
          "type": "string"
        },
        "Label": {
          "title": "Human-readable Label",
          "type": "string"
        },
        "Namespace": {
          "title": "Namespace identifier, must be unique",
          "type": "string"
        },
        "Order": {
          "format": "int32",
          "title": "Order is used for sorting lists of namesapces",
          "type": "integer"
        },
        "Policies": {
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy",
            "type": "object"
          },
          "title": "Policies securing this namespace",
          "type": "array"
        },
        "PoliciesContextEditable": {
          "title": "Context-resolved to quickly check if this meta is editable or not",
          "type": "boolean"
        }
      },
      "title": "Globally declared Namespace with associated policies",
      "type": "object"
    },
    "idmWorkspaceScope": {
      "default": "ANY",
      "enum": [
        "ANY",
        "ADMIN",
        "ROOM",
        "LINK"
      ],
      "type": "string"
    },
    "jobsCommand": {
      "default": "None",
      "enum": [
        "None",
        "Pause",
        "Resume",
        "Stop",
        "Delete",
        "RunOnce",
        "Inactive",
        "Active"
      ],
      "type": "string"
    },
    "jobsCtrlCommand": {
      "properties": {
        "Cmd": {
          "$ref": "#/definitions/jobsCommand",
          "title": "Type of command to send (None, Pause, Resume, Stop, Delete, RunOnce, Inactive, Active)"
        },
        "JobId": {
          "title": "Id of the job",
          "type": "string"
        },
        "OwnerId": {
          "title": "Owner of the job",
          "type": "string"
        },
        "RunParameters": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Parameters used for RunOnce command",
          "type": "object"
        },
        "TaskId": {
          "title": "Id of the associated task",
          "type": "string"
        }
      },
      "title": "Command sent to control a job or a task",
      "type": "object"
    },
    "jobsTaskStatus": {
      "default": "Unknown",
      "enum": [
        "Unknown",
        "Idle",
        "Running",
        "Finished",
        "Interrupted",
        "Paused",
        "Any",
        "Error",
        "Queued"
      ],
      "title": "Known statuses",
      "type": "string"
    },
    "protobufAny": {
      "additionalProperties": {},
      "description": "`Any` contains an arbitrary serialized protocol buffer message along with a\nURL that describes the type of the serialized message.\n\nProtobuf library provides support to pack/unpack Any values in the form\nof utility functions or additional generated methods of the Any type.\n\nExample 1: Pack and unpack a message in C++.\n\n    Foo foo = ...;\n    Any any;\n    any.PackFrom(foo);\n    ...\n    if (any.UnpackTo(\u0026foo)) {\n      ...\n    }\n\nExample 2: Pack and unpack a message in Java.\n\n    Foo foo = ...;\n    Any any = Any.pack(foo);\n    ...\n    if (any.is(Foo.class)) {\n      foo = any.unpack(Foo.class);\n    }\n    // or ...\n    if (any.isSameTypeAs(Foo.getDefaultInstance())) {\n      foo = any.unpack(Foo.getDefaultInstance());\n    }\n\n Example 3: Pack and unpack a message in Python.\n\n    foo = Foo(...)\n    any = Any()\n    any.Pack(foo)\n    ...\n    if any.Is(Foo.DESCRIPTOR):\n      any.Unpack(foo)\n      ...\n\n Example 4: Pack and unpack a message in Go\n\n     foo := \u0026pb.Foo{...}\n     any, err := anypb.New(foo)\n     if err != nil {\n       ...\n     }\n     ...\n     foo := \u0026pb.Foo{}\n     if err := any.UnmarshalTo(foo); err != nil {\n       ...\n     }\n\nThe pack methods provided by protobuf library will by default use\n'type.googleapis.com/full.type.name' as the type URL and the unpack\nmethods only use the fully qualified type name after the last '/'\nin the type URL, for example \"foo.bar.com/x/y.z\" will yield type\nname \"y.z\".\n\nJSON\n====\nThe JSON representation of an `Any` value uses the regular\nrepresentation of the deserialized, embedded message, with an\nadditional field `@type` which contains the type URL. Example:\n\n    package google.profile;\n    message Person {\n      string first_name = 1;\n      string last_name = 2;\n    }\n\n    {\n      \"@type\": \"type.googleapis.com/google.profile.Person\",\n      \"firstName\": \u003cstring\u003e,\n      \"lastName\": \u003cstring\u003e\n    }\n\nIf the embedded message type is well-known and has a custom JSON\nrepresentation, that representation will be embedded adding a field\n`value` which holds the custom JSON in addition to the `@type`\nfield. Example (for message [google.protobuf.Duration][]):\n\n    {\n      \"@type\": \"type.googleapis.com/google.protobuf.Duration\",\n      \"value\": \"1.212s\"\n    }",
      "properties": {
        "@type": {
          "description": "A URL/resource name that uniquely identifies the type of the serialized\nprotocol buffer message. This string must contain at least\none \"/\" character. The last segment of the URL's path must represent\nthe fully qualified name of the type (as in\n`path/google.protobuf.Duration`). The name should be in a canonical form\n(e.g., leading \".\" is not accepted).\n\nIn practice, teams usually precompile into the binary all types that they\nexpect it to use in the context of Any. However, for URLs which use the\nscheme `http`, `https`, or no scheme, one can optionally set up a type\nserver that maps type URLs to message definitions as follows:\n\n* If no scheme is provided, `https` is assumed.\n* An HTTP GET on the URL must yield a [google.protobuf.Type][]\n  value in binary format, or produce an error.\n* Applications are allowed to cache lookup results based on the\n  URL, or have them precompiled into a binary to avoid any\n  lookup. Therefore, binary compatibility needs to be preserved\n  on changes to types. (Use versioned type names to manage\n  breaking changes.)\n\nNote: this functionality is not currently available in the official\nprotobuf release, and it is not used for type URLs beginning with\ntype.googleapis.com. As of May 2023, there are no widely used type server\nimplementations and no plans to implement one.\n\nSchemes other than `http`, `https` (or the empty scheme) might be\nused with implementation specific semantics.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "restActionParameters": {
      "properties": {
        "AwaitStatus": {
          "$ref": "#/definitions/jobsTaskStatus",
          "title": "Optionally wait for the task to exist with a specific status"
        },
        "AwaitTimeout": {
          "title": "Define a golang duration to wait for",
          "type": "string"
        },
        "JsonParameters": {
          "type": "string"
        },
        "Nodes": {
          "items": {
            "$ref": "#/definitions/restNodeLocator",
            "type": "object"
          },
          "type": "array"
        },
        "SelectionUuid": {
          "type": "string"
        },
        "TargetNode": {
          "$ref": "#/definitions/restNodeLocator"
        }
      },
      "title": "Parameters used by actions. Some may use Nodes/TargetNode, but not necessarily",
      "type": "object"
    },
    "restActionStatus": {
      "default": "Performed",
      "enum": [
        "Performed",
        "Background"
      ],
      "title": "Used in an PerformActionResponse - currently always Background",
      "type": "string"
    },
    "restBackgroundAction": {
      "properties": {
        "CanPause": {
          "title": "Can be paused/resumed",
          "type": "boolean"
        },
        "CanStop": {
          "title": "Can be interrupted",
          "type": "boolean"
        },
        "EndTime": {
          "format": "int32",
          "type": "integer"
        },
        "HasProgress": {
          "title": "Task publishes a progress",
          "type": "boolean"
        },
        "JobUuid": {
          "type": "string"
        },
        "Label": {
          "type": "string"
        },
        "Name": {
          "type": "string"
        },
        "Progress": {
          "format": "float",
          "title": "Float value of the progress between 0 and 1",
          "type": "number"
        },
        "StartTime": {
          "format": "int32",
          "type": "integer"
        },
        "Status": {
          "$ref": "#/definitions/jobsTaskStatus"
        },
        "StatusMessage": {
          "type": "string"
        }
      },
      "required": [
        "Name",
        "JobUuid"
      ],
      "title": "Publishes a status about a background action",
      "type": "object"
    },
    "restBatchUpdateMetaList": {
      "properties": {
        "Updates": {
          "items": {
            "$ref": "#/definitions/restMetaUpdate",
            "type": "object"
          },
          "type": "array"
        }
      },
      "required": [
        "Updates"
      ],
      "title": "Update directly metadata in batch",
      "type": "object"
    },
    "restContextWorkspace": {
      "description": "Current workspace information, maybe published on the root node of a workspace",
      "properties": {
        "Description": {
          "type": "string"
        },
        "IsRoot": {
          "type": "boolean"
        },
        "IsVirtualRoot": {
          "type": "boolean"
        },
        "Label": {
          "type": "string"
        },
        "Permissions": {
          "type": "string"
        },
        "Quota": {
          "format": "int64",
          "type": "string"
        },
        "QuotaUsage": {
          "format": "int64",
          "type": "string"
        },
        "Scope": {
          "$ref": "#/definitions/idmWorkspaceScope"
        },
        "SkipRecycle": {
          "type": "boolean"
        },
        "Slug": {
          "type": "string"
        },
        "Syncable": {
          "type": "boolean"
        },
        "Uuid": {
          "type": "string"
        }
      },
      "required": [
        "Uuid",
        "Slug"
      ],
      "title": "ContextWorkspace",
      "type": "object"
    },
    "restCountMeta": {
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "Value": {
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Namespace",
        "Value"
      ],
      "title": "Open definition for a key/value metadata, value is a number\nUsing int32 to avoid json strings (for int64)",
      "type": "object"
    },
    "restCreateRequest": {
      "properties": {
        "Inputs": {
          "items": {
            "$ref": "#/definitions/restIncomingNode",
            "type": "object"
          },
          "type": "array"
        },
        "Recursive": {
          "type": "boolean"
        }
      },
      "required": [
        "Inputs"
      ],
      "title": "Request for creating nodes",
      "type": "object"
    },
    "restDataSourceFeatures": {
      "properties": {
        "Encrypted": {
          "type": "boolean"
        },
        "Versioned": {
          "type": "boolean"
        }
      },
      "title": "Current datasource features",
      "type": "object"
    },
    "restError": {
      "properties": {
        "Code": {
          "title": "Unique ID of the error",
          "type": "string"
        },
        "Detail": {
          "title": "Human-readable, longer description",
          "type": "string"
        },
        "Meta": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "Additional Metadata",
          "type": "object"
        },
        "Source": {
          "title": "Cells service name or other quickly useful info",
          "type": "string"
        },
        "Title": {
          "title": "Human-readable, short label",
          "type": "string"
        }
      },
      "title": "Generic error message",
      "type": "object"
    },
    "restFilePreview": {
      "properties": {
        "ContentType": {
          "type": "string"
        },
        "Dimension": {
          "format": "int32",
          "type": "integer"
        },
        "Processing": {
          "type": "boolean"
        },
        "Url": {
          "type": "string"
        }
      },
      "title": "Description of an available preview",
      "type": "object"
    },
    "restImageMeta": {
      "properties": {
        "Height": {
          "format": "int32",
          "type": "integer"
        },
        "JsonEXIF": {
          "type": "string"
        },
        "Orientation": {
          "format": "int32",
          "type": "integer"
        },
        "Width": {
          "format": "int32",
          "type": "integer"
        }
      },
      "title": "If file is an image, extracted information about this image",
      "type": "object"
    },
    "restIncomingNode": {
      "properties": {
        "ContentType": {
          "type": "string"
        },
        "Locator": {
          "$ref": "#/definitions/restNodeLocator"
        },
        "TemplateUuid": {
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType"
        }
      },
      "required": [
        "Locator",
        "Type"
      ],
      "title": "Lightweight node representation for creation, exposing a NodeLocator and additional data",
      "type": "object"
    },
    "restJsonMeta": {
      "properties": {
        "Namespace": {
          "type": "string"
        },
        "Value": {
          "type": "string"
        }
      },
      "required": [
        "Namespace",
        "Value"
      ],
      "title": "Open definition for a key/value metadata, value stored in json",
      "type": "object"
    },
    "restListTemplatesResponse": {
      "properties": {
        "Templates": {
          "items": {
            "$ref": "#/definitions/restTemplate",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "restLockInfo": {
      "properties": {
        "IsLocked": {
          "type": "boolean"
        },
        "Owner": {
          "type": "string"
        }
      },
      "title": "Info about content locking",
      "type": "object"
    },
    "restLookupRequest": {
      "properties": {
        "Limit": {
          "format": "int64",
          "type": "string"
        },
        "Locators": {
          "$ref": "#/definitions/restNodeLocators"
        },
        "Offset": {
          "format": "int64",
          "type": "string"
        },
        "Query": {
          "$ref": "#/definitions/treeQuery"
        },
        "SortDirDesc": {
          "type": "boolean"
        },
        "SortField": {
          "type": "string"
        },
        "StatFlags": {
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        }
      },
      "title": "Request for list/search. Accepts either\n- a list of Locators (using path/* will list a folder's first level children) to retrieve stats about nodes\n- a Query to search nodes in a more flexible way",
      "type": "object"
    },
    "restMetaToggle": {
      "properties": {
        "Value": {
          "type": "boolean"
        }
      },
      "required": [
        "Value"
      ],
      "title": "Boolean value used for special metadata (bookmark,content_lock)",
      "type": "object"
    },
    "restMetaUpdate": {
      "properties": {
        "Operation": {
          "$ref": "#/definitions/MetaUpdateOp"
        },
        "UserMeta": {
          "$ref": "#/definitions/restUserMeta"
        }
      },
      "required": [
        "Operation",
        "UserMeta"
      ],
      "title": "Update operation on Metadata",
      "type": "object"
    },
    "restMode": {
      "default": "Default",
      "enum": [
        "Default",
        "NodeReadOnly",
        "NodeWriteOnly",
        "LevelReadOnly"
      ],
      "title": "Special permission modes for Nodes",
      "type": "string"
    },
    "restNamespaceValuesOperation": {
      "properties": {
        "Operation": {
          "$ref": "#/definitions/restNsOp"
        },
        "Values": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "Operation",
        "Values"
      ],
      "title": "Operations on namespaces that can persist values (typically, tags known values)",
      "type": "object"
    },
    "restNamespaceValuesResponse": {
      "properties": {
        "Values": {
          "items": {
            "type": "string"
          },
          "title": "List of existing values",
          "type": "array"
        }
      },
      "title": "Response for Namespaces values",
      "type": "object"
    },
    "restNode": {
      "description": "Representation of a file or folder",
      "properties": {
        "Activities": {
          "items": {
            "$ref": "#/definitions/activityObject",
            "type": "object"
          },
          "title": "All file activities",
          "type": "array"
        },
        "ContentLock": {
          "$ref": "#/definitions/restLockInfo",
          "title": "Flag set if a file is manually locked by a user"
        },
        "ContentType": {
          "title": "ContentType in the form of application/mime",
          "type": "string"
        },
        "ContentsHash": {
          "title": "ContentsHash is a server-computed file signature",
          "type": "string"
        },
        "ContextWorkspace": {
          "$ref": "#/definitions/restContextWorkspace",
          "title": "Additional information about the current workspace. Only published on the root node of a workspace/cell"
        },
        "DataSourceFeatures": {
          "$ref": "#/definitions/restDataSourceFeatures",
          "title": "Additional features set at the datasource level"
        },
        "FolderMeta": {
          "items": {
            "$ref": "#/definitions/restCountMeta",
            "type": "object"
          },
          "title": "Open map of integers metadata published on folders",
          "type": "array"
        },
        "HashingMethod": {
          "title": "HashingMethod refers to the method used for computing ContentsHash",
          "type": "string"
        },
        "ImageMeta": {
          "$ref": "#/definitions/restImageMeta",
          "title": "Additional metadata extracted by the server if file is an image"
        },
        "IsBookmarked": {
          "title": "This node is bookmarked by the user",
          "type": "boolean"
        },
        "IsRecycleBin": {
          "title": "If this node is a RecycleBin folder",
          "type": "boolean"
        },
        "IsRecycled": {
          "title": "If this node is *inside* a RecycleBin folder",
          "type": "boolean"
        },
        "Metadata": {
          "items": {
            "$ref": "#/definitions/restJsonMeta",
            "type": "object"
          },
          "title": "Open map of metadata, values are JSON-encoded",
          "type": "array"
        },
        "Mode": {
          "$ref": "#/definitions/restMode",
          "title": "Default is read/write, Mode can provide additional restrictions"
        },
        "Modified": {
          "description": "Date instead of TS ?",
          "format": "int64",
          "title": "Last modification date",
          "type": "string"
        },
        "Path": {
          "title": "Node Path - Always starting with a workspace slug",
          "type": "string"
        },
        "Previews": {
          "items": {
            "$ref": "#/definitions/restFilePreview",
            "type": "object"
          },
          "title": "List of available previews generated server-side",
          "type": "array"
        },
        "RevisionMeta": {
          "$ref": "#/definitions/restRevisionMeta",
          "title": "Additional metadata attached to a Version node"
        },
        "Shares": {
          "items": {
            "$ref": "#/definitions/restShareLink",
            "type": "object"
          },
          "title": "List of public links created on this file. Should be one but server supports multiple links",
          "type": "array"
        },
        "Size": {
          "format": "int64",
          "title": "Known contents size",
          "type": "string"
        },
        "StorageETag": {
          "title": "StorageEtag refers to the storage underlying hash",
          "type": "string"
        },
        "Subscriptions": {
          "items": {
            "$ref": "#/definitions/activitySubscription",
            "type": "object"
          },
          "title": "File subscriptions (watches)",
          "type": "array"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType",
          "title": "Whether it's a folder ('COLLECTION') or a file ('LEAF')"
        },
        "UserMetadata": {
          "items": {
            "$ref": "#/definitions/restUserMeta",
            "type": "object"
          },
          "title": "User-defined metadata",
          "type": "array"
        },
        "Uuid": {
          "title": "Unique Identifier",
          "type": "string"
        }
      },
      "required": [
        "Uuid",
        "Path"
      ],
      "title": "Node",
      "type": "object"
    },
    "restNodeCollection": {
      "properties": {
        "Facets": {
          "items": {
            "$ref": "#/definitions/treeSearchFacet",
            "type": "object"
          },
          "type": "array"
        },
        "Nodes": {
          "items": {
            "$ref": "#/definitions/restNode",
            "type": "object"
          },
          "type": "array"
        },
        "Pagination": {
          "$ref": "#/definitions/restPagination"
        }
      },
      "required": [
        "Nodes"
      ],
      "title": "List of nodes, as returned by list/search operations. Facets and Pagination may be empty",
      "type": "object"
    },
    "restNodeLocator": {
      "properties": {
        "Path": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      },
      "title": "Simple Uuid/Path discriminator to locate a node",
      "type": "object"
    },
    "restNodeLocators": {
      "properties": {
        "Many": {
          "items": {
            "$ref": "#/definitions/restNodeLocator",
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "restNodeUpdates": {
      "properties": {
        "Bookmark": {
          "$ref": "#/definitions/restMetaToggle",
          "title": "Shortcut to special \"bookmark\" usermeta"
        },
        "ContentLock": {
          "$ref": "#/definitions/restMetaToggle",
          "title": "Shortcut to special \"content_lock\" usermeta"
        },
        "MetaUpdates": {
          "items": {
            "$ref": "#/definitions/restMetaUpdate",
            "type": "object"
          },
          "title": "Updates to metadata",
          "type": "array"
        }
      },
      "title": "Set of updates to apply to metadata",
      "type": "object"
    },
    "restNsOp": {
      "default": "PUT",
      "enum": [
        "PUT",
        "DELETE"
      ],
      "title": "Operation on namespaces",
      "type": "string"
    },
    "restPagination": {
      "properties": {
        "CurrentOffset": {
          "format": "int32",
          "title": "Current Offset value",
          "type": "integer"
        },
        "CurrentPage": {
          "format": "int32",
          "title": "Current number of Page",
          "type": "integer"
        },
        "Limit": {
          "format": "int32",
          "title": "Current Limit parameter, either passed by request or default value",
          "type": "integer"
        },
        "NextOffset": {
          "format": "int32",
          "title": "Offset value for next page if there is one",
          "type": "integer"
        },
        "PrevOffset": {
          "format": "int32",
          "title": "Offset value for previous page, if there is one",
          "type": "integer"
        },
        "Total": {
          "format": "int32",
          "title": "Total number of records",
          "type": "integer"
        },
        "TotalPages": {
          "format": "int32",
          "title": "Number of detected pages",
          "type": "integer"
        }
      },
      "title": "Generic container for responses sending pagination information",
      "type": "object"
    },
    "restPerformActionResponse": {
      "properties": {
        "AffectedNodes": {
          "items": {
            "$ref": "#/definitions/restNode",
            "type": "object"
          },
          "type": "array"
        },
        "BackgroundActions": {
          "items": {
            "$ref": "#/definitions/restBackgroundAction",
            "type": "object"
          },
          "type": "array"
        },
        "Status": {
          "$ref": "#/definitions/restActionStatus"
        }
      },
      "title": "Response to an action triggered",
      "type": "object"
    },
    "restPublicLinkDeleteSuccess": {
      "properties": {
        "Message": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      },
      "title": "Response to public link deletion",
      "type": "object"
    },
    "restPublicLinkRequest": {
      "properties": {
        "CreatePassword": {
          "title": "Set if switching from no password to password",
          "type": "string"
        },
        "Link": {
          "$ref": "#/definitions/restShareLink",
          "title": "Public link definition"
        },
        "PasswordEnabled": {
          "title": "Whether it has Password enabled",
          "type": "boolean"
        },
        "UpdateCustomHash": {
          "title": "Change the ShareLink Hash with a custom value",
          "type": "string"
        },
        "UpdatePassword": {
          "title": "Set if updating an existing password",
          "type": "string"
        }
      },
      "required": [
        "Link"
      ],
      "title": "Create or update a public link on a node",
      "type": "object"
    },
    "restRevisionMeta": {
      "properties": {
        "Description": {
          "type": "string"
        },
        "Uuid": {
          "type": "string"
        }
      },
      "required": [
        "Uuid"
      ],
      "type": "object"
    },
    "restSelection": {
      "description": "Request to create a selection from a list of nodes.",
      "properties": {
        "Nodes": {
          "items": {
            "$ref": "#/definitions/restNode",
            "type": "object"
          },
          "type": "array"
        },
        "Uuid": {
          "readOnly": true,
          "type": "string"
        }
      },
      "required": [
        "Nodes"
      ],
      "type": "object"
    },
    "restShareLink": {
      "properties": {
        "AccessEnd": {
          "format": "int64",
          "title": "Timestamp after which the share is disabled",
          "type": "string"
        },
        "AccessStart": {
          "format": "int64",
          "title": "Timestamp of start date for enabling the share (not implemented yet)",
          "type": "string"
        },
        "CurrentDownloads": {
          "format": "int64",
          "title": "Current number of downloads",
          "type": "string"
        },
        "Description": {
          "title": "Description of the Link (max 1000 chars)",
          "type": "string"
        },
        "Label": {
          "title": "Label of the Link (max 500 chars)",
          "type": "string"
        },
        "LinkHash": {
          "title": "Unique Hash for accessing the link",
          "type": "string"
        },
        "LinkUrl": {
          "title": "Full URL for accessing the link",
          "type": "string"
        },
        "MaxDownloads": {
          "format": "int64",
          "title": "Maximum number of downloads until expiration",
          "type": "string"
        },
        "PasswordRequired": {
          "title": "Whether a password is required or not to access the link",
          "type": "boolean"
        },
        "Permissions": {
          "items": {
            "$ref": "#/definitions/restShareLinkAccessType"
          },
          "title": "Specific permissions for public links",
          "type": "array"
        },
        "Policies": {
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy",
            "type": "object"
          },
          "title": "Security policies",
          "type": "array"
        },
        "PoliciesContextEditable": {
          "title": "Whether policies are currently editable or not",
          "type": "boolean"
        },
        "RestrictToTargetUsers": {
          "title": "RestrictToTargetUsers enable users restriction",
          "type": "boolean"
        },
        "RootNodes": {
          "items": {
            "$ref": "#/definitions/treeNode",
            "type": "object"
          },
          "title": "Nodes in the tree that serve as root to this link",
          "type": "array"
        },
        "TargetUsers": {
          "additionalProperties": {
            "$ref": "#/definitions/restShareLinkTargetUser"
          },
          "title": "TargetUsers can be used to restrict access",
          "type": "object"
        },
        "UserLogin": {
          "title": "Temporary user Login used to login automatically when accessing this link",
          "type": "string"
        },
        "UserUuid": {
          "title": "Temporary user Uuid used to login automatically when accessing this link",
          "type": "string"
        },
        "Uuid": {
          "title": "Internal identifier of the link",
          "type": "string"
        },
        "ViewTemplateName": {
          "title": "Display Template for loading the public link",
          "type": "string"
        }
      },
      "title": "Model for representing a public link",
      "type": "object"
    },
    "restShareLinkAccessType": {
      "default": "NoAccess",
      "enum": [
        "NoAccess",
        "Preview",
        "Download",
        "Upload"
      ],
      "title": "Known values for link permissions",
      "type": "string"
    },
    "restShareLinkTargetUser": {
      "properties": {
        "Display": {
          "type": "string"
        },
        "DownloadCount": {
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "restTemplate": {
      "properties": {
        "Editable": {
          "title": "Whether this template can be edited or not",
          "type": "boolean"
        },
        "Label": {
          "title": "Human friendly label",
          "type": "string"
        },
        "Node": {
          "$ref": "#/definitions/restTemplateNode",
          "title": "Template node, can be a file or a tree of folders"
        },
        "Policies": {
          "items": {
            "$ref": "#/definitions/serviceResourcePolicy",
            "type": "object"
          },
          "title": "Associated policies",
          "type": "array"
        },
        "UUID": {
          "title": "Unique identifier for this template",
          "type": "string"
        }
      },
      "title": "A template can be used to create files or tree from scratch",
      "type": "object"
    },
    "restTemplateNode": {
      "properties": {
        "Children": {
          "additionalProperties": {
            "$ref": "#/definitions/treeNode"
          },
          "title": "One or more children",
          "type": "object"
        },
        "Node": {
          "$ref": "#/definitions/treeNode",
          "title": "Whether it's a file or a folder"
        }
      },
      "title": "A template node is representing a file or a folder",
      "type": "object"
    },
    "restUserActionType": {
      "default": "delete",
      "enum": [
        "delete",
        "restore",
        "copy",
        "move",
        "extract",
        "compress"
      ],
      "title": "Authorized actions that user can trigger",
      "type": "string"
    },
    "restUserMeta": {
      "properties": {
        "Editable": {
          "type": "boolean"
        },
        "JsonValue": {
          "type": "string"
        },
        "Namespace": {
          "type": "string"
        },
        "NodeUuid": {
          "type": "string"
        }
      },
      "required": [
        "Namespace",
        "JsonValue"
      ],
      "title": "Userspace metadata (namespaces are defined by admin)",
      "type": "object"
    },
    "restUserMetaList": {
      "properties": {
        "UserMeta": {
          "items": {
            "$ref": "#/definitions/restUserMeta",
            "type": "object"
          },
          "type": "array"
        }
      },
      "title": "List of UserMeta",
      "type": "object"
    },
    "restUserMetaNamespaceCollection": {
      "properties": {
        "Namespaces": {
          "items": {
            "$ref": "#/definitions/idmUserMetaNamespace",
            "type": "object"
          },
          "title": "List of user meta Namespaces",
          "type": "array"
        }
      },
      "title": "Collection of Meta Namespaces",
      "type": "object"
    },
    "serviceResourcePolicy": {
      "properties": {
        "Action": {
          "$ref": "#/definitions/serviceResourcePolicyAction"
        },
        "Effect": {
          "$ref": "#/definitions/serviceResourcePolicyPolicyEffect"
        },
        "JsonConditions": {
          "type": "string"
        },
        "Resource": {
          "type": "string"
        },
        "Subject": {
          "type": "string"
        },
        "id": {
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "serviceResourcePolicyAction": {
      "default": "ANY",
      "enum": [
        "ANY",
        "OWNER",
        "READ",
        "WRITE",
        "EDIT_RULES"
      ],
      "type": "string"
    },
    "serviceResourcePolicyPolicyEffect": {
      "default": "deny",
      "enum": [
        "deny",
        "allow"
      ],
      "type": "string"
    },
    "serviceResourcePolicyQuery": {
      "properties": {
        "Action": {
          "$ref": "#/definitions/serviceResourcePolicyAction"
        },
        "Any": {
          "type": "boolean"
        },
        "Empty": {
          "type": "boolean"
        },
        "LeftIdentifier": {
          "type": "string"
        },
        "Subjects": {
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "treeChangeLog": {
      "properties": {
        "Data": {
          "format": "byte",
          "title": "Arbitrary additional data",
          "type": "string"
        },
        "Description": {
          "title": "Human-readable description of what happened",
          "type": "string"
        },
        "Event": {
          "$ref": "#/definitions/treeNodeChangeEvent",
          "title": "Event that triggered this change"
        },
        "Location": {
          "$ref": "#/definitions/treeNode",
          "title": "Actual location of the stored version"
        },
        "MTime": {
          "format": "int64",
          "title": "Unix Timestamp",
          "type": "string"
        },
        "OwnerUuid": {
          "title": "Who performed this action",
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "title": "Content Size at that moment",
          "type": "string"
        },
        "Uuid": {
          "title": "Unique commit ID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "treeGeoPoint": {
      "properties": {
        "Lat": {
          "format": "double",
          "type": "number"
        },
        "Lon": {
          "format": "double",
          "type": "number"
        }
      },
      "type": "object"
    },
    "treeGeoQuery": {
      "properties": {
        "BottomRight": {
          "$ref": "#/definitions/treeGeoPoint"
        },
        "Center": {
          "$ref": "#/definitions/treeGeoPoint",
          "title": "Either use a center point and a distance"
        },
        "Distance": {
          "description": "Example formats supported:\n\"5in\" \"5inch\" \"7yd\" \"7yards\" \"9ft\" \"9feet\" \"11km\" \"11kilometers\"\n\"3nm\" \"3nauticalmiles\" \"13mm\" \"13millimeters\" \"15cm\" \"15centimeters\"\n\"17mi\" \"17miles\" \"19m\" \"19meters\"\nIf the unit cannot be determined, the entire string is parsed and the\nunit of meters is assumed.",
          "type": "string"
        },
        "TopLeft": {
          "$ref": "#/definitions/treeGeoPoint",
          "title": "Or use a bounding box with TopLeft and BottomRight points"
        }
      },
      "type": "object"
    },
    "treeNode": {
      "properties": {
        "AppearsIn": {
          "items": {
            "$ref": "#/definitions/treeWorkspaceRelativePath",
            "type": "object"
          },
          "title": "Can be used for output when node is appearing in multiple workspaces",
          "type": "array"
        },
        "Commits": {
          "items": {
            "$ref": "#/definitions/treeChangeLog",
            "type": "object"
          },
          "title": "List of successive commits",
          "type": "array"
        },
        "Etag": {
          "title": "Hash of the content if node is a LEAF, Uuid or",
          "type": "string"
        },
        "MTime": {
          "format": "int64",
          "title": "Last modification Timestamp",
          "type": "string"
        },
        "MetaStore": {
          "additionalProperties": {
            "type": "string"
          },
          "title": "------------------------------------\nThen a free K =\u003e V representation of any kind of metadata\n------------------------------------",
          "type": "object"
        },
        "Mode": {
          "description": "Permission mode, like 0777. Stored as string using custom ModeString field.",
          "format": "int32",
          "type": "integer"
        },
        "ModeString": {
          "title": "String representation of Mode",
          "type": "string"
        },
        "Path": {
          "type": "string"
        },
        "Size": {
          "format": "int64",
          "title": "Size of the file, or cumulated size of folder",
          "type": "string"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType"
        },
        "Uuid": {
          "title": "------------------------------------\nCore identification of the node\n------------------------------------",
          "type": "string"
        }
      },
      "type": "object"
    },
    "treeNodeChangeEvent": {
      "properties": {
        "Metadata": {
          "additionalProperties": {
            "type": "string"
          },
          "type": "object"
        },
        "Optimistic": {
          "type": "boolean"
        },
        "Silent": {
          "type": "boolean"
        },
        "Source": {
          "$ref": "#/definitions/treeNode"
        },
        "Target": {
          "$ref": "#/definitions/treeNode"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeChangeEventEventType"
        }
      },
      "type": "object"
    },
    "treeNodeChangeEventEventType": {
      "default": "CREATE",
      "enum": [
        "CREATE",
        "READ",
        "UPDATE_PATH",
        "UPDATE_CONTENT",
        "UPDATE_META",
        "UPDATE_USER_META",
        "DELETE"
      ],
      "type": "string"
    },
    "treeNodeType": {
      "default": "UNKNOWN",
      "enum": [
        "UNKNOWN",
        "LEAF",
        "COLLECTION"
      ],
      "title": "==========================================================\n* Standard Messages\n==========================================================",
      "type": "string"
    },
    "treeQuery": {
      "properties": {
        "Content": {
          "title": "Search in textual content (if search engine has this feature enabled)",
          "type": "string"
        },
        "DurationDate": {
          "title": "Compute MinDate/MaxDate with a Golang duration with a leading comparator (\u003e or \u003c)\nDuration may contain \"s\" second, \"m\" minute, \"d\" day.\nExample: \"\u003e10m\" for files modified before 10minutes ago",
          "type": "string"
        },
        "ETag": {
          "title": "Look for a specific ETag value, may only be useful to lookup for files with __temporary__ ETag",
          "type": "string"
        },
        "Extension": {
          "title": "Search files by their extension, use pipe symbol | if you wish to allow many extensions.\nExample png|pdf|jpg",
          "type": "string"
        },
        "FileName": {
          "title": "Lookup by file basename",
          "type": "string"
        },
        "FileNameOrContent": {
          "title": "Search in either filename or content (if search engine has this feature enabled)",
          "type": "string"
        },
        "FreeString": {
          "description": "Bleve-like search query to search for a specific metadata value.\nWhen querying nodes, this will redirect this query to the Search Engine. When filtering an input, this will load an in-memory bleve engine to evaluate the node.\n\nBleve query string format is a space separated list of `[+-]key:value`, where node meta keys must be prepended with \"Meta.\"\nFor Example, for tags: `+Meta.usermeta-tags:myvalue`",
          "type": "string"
        },
        "GeoQuery": {
          "$ref": "#/definitions/treeGeoQuery",
          "title": "Search geographically"
        },
        "MaxDate": {
          "format": "int64",
          "title": "Range for modification date - node was modified before this date",
          "type": "string"
        },
        "MaxSize": {
          "format": "int64",
          "title": "Range for file size - size is smaller than",
          "type": "string"
        },
        "MinDate": {
          "format": "int64",
          "title": "Range for modification date - node was modified after this date",
          "type": "string"
        },
        "MinSize": {
          "format": "int64",
          "title": "Range for file size - size bigger than",
          "type": "string"
        },
        "Not": {
          "title": "Negate this query",
          "type": "boolean"
        },
        "PathDepth": {
          "format": "int32",
          "title": "Restrict recursive listing to a given level of the tree starting from root.\nSpecial value \"-1\" should list only one level in the folder defined by PathPrefix",
          "type": "integer"
        },
        "PathPrefix": {
          "items": {
            "type": "string"
          },
          "title": "Recursive listing of nodes below a given path. Combine with the PathDepth parameter to limit request results",
          "type": "array"
        },
        "Paths": {
          "items": {
            "type": "string"
          },
          "title": "List of nodes paths, exactly matching",
          "type": "array"
        },
        "Type": {
          "$ref": "#/definitions/treeNodeType",
          "title": "Limit to a given node type (file or folder)"
        },
        "UUIDs": {
          "items": {
            "type": "string"
          },
          "title": "Preset list of specific node defined by their UUIDs",
          "type": "array"
        }
      },
      "title": "Search Queries",
      "type": "object"
    },
    "treeSearchFacet": {
      "properties": {
        "Count": {
          "format": "int32",
          "title": "Segment results count",
          "type": "integer"
        },
        "End": {
          "format": "int32",
          "type": "integer"
        },
        "FieldName": {
          "title": "Facet field name",
          "type": "string"
        },
        "Label": {
          "title": "Segment Label",
          "type": "string"
        },
        "Max": {
          "format": "int64",
          "type": "string"
        },
        "Min": {
          "format": "int64",
          "title": "For NumericRange facets, min/max values",
          "type": "string"
        },
        "Start": {
          "format": "int32",
          "title": "For DateRange facets, start/end values",
          "type": "integer"
        },
        "Term": {
          "title": "For string facets, term value",
          "type": "string"
        }
      },
      "type": "object"
    },
    "treeWorkspaceRelativePath": {
      "properties": {
        "Path": {
          "title": "Relative Path inside workspace",
          "type": "string"
        },
        "WsLabel": {
          "title": "Workspace Label",
          "type": "string"
        },
        "WsScope": {
          "title": "Workspace Scope",
          "type": "string"
        },
        "WsSlug": {
          "title": "Workspace slug",
          "type": "string"
        },
        "WsUuid": {
          "title": "Workspace Id",
          "type": "string"
        }
      },
      "title": "Used in AppearsIn to signal a node is\nappearing in multiple workspaces in the current context",
      "type": "object"
    }
  },
  "externalDocs": {
    "description": "More about Pydio Cells Apis",
    "url": "https://pydio.com"
  },
  "info": {
    "contact": {
      "name": "Pydio",
      "url": "https://pydio.com"
    },
    "title": "Pydio Cells Rest API",
    "version": "v2"
  },
  "paths": {
    "/n/action/{Name}": {
      "post": {
        "operationId": "PerformAction",
        "parameters": [
          {
            "enum": [
              "delete",
              "restore",
              "copy",
              "move",
              "extract",
              "compress"
            ],
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Parameters",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restActionParameters"
            }
          },
          {
            "in": "query",
            "name": "JobUuid",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restPerformActionResponse"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Trigger an action on the tree. Returns a JobInfo describing a background task.",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/action/{Name}/{JobUuid}": {
      "get": {
        "operationId": "BackgroundActionInfo",
        "parameters": [
          {
            "enum": [
              "delete",
              "restore",
              "copy",
              "move",
              "extract",
              "compress"
            ],
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "JobUuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBackgroundAction"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Retrieve information about an action running in background",
        "tags": [
          "NodeService"
        ]
      },
      "patch": {
        "operationId": "ControlBackgroundAction",
        "parameters": [
          {
            "enum": [
              "delete",
              "restore",
              "copy",
              "move",
              "extract",
              "compress"
            ],
            "in": "path",
            "name": "Name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "name": "JobUuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Command",
            "required": true,
            "schema": {
              "$ref": "#/definitions/jobsCtrlCommand"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBackgroundAction"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Send control commands to a background job",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/link/{LinkUuid}": {
      "delete": {
        "operationId": "DeletePublicLink",
        "parameters": [
          {
            "in": "path",
            "name": "LinkUuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restPublicLinkDeleteSuccess"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Remove a public link",
        "tags": [
          "NodeService"
        ]
      },
      "get": {
        "operationId": "GetPublicLink",
        "parameters": [
          {
            "in": "path",
            "name": "LinkUuid",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restShareLink"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Load public link information by Uuid",
        "tags": [
          "NodeService"
        ]
      },
      "patch": {
        "operationId": "UpdatePublicLink",
        "parameters": [
          {
            "in": "path",
            "name": "LinkUuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "PublicLinkRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restPublicLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restShareLink"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Update public link settings",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/meta/batch": {
      "patch": {
        "operationId": "BatchUpdateMeta",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restBatchUpdateMetaList"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restBatchUpdateMetaList"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/meta/find": {
      "post": {
        "operationId": "SearchMeta",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/idmSearchUserMetaRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserMetaList"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Search a list of meta by node Id or by User id and by namespace",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/meta/namespace": {
      "get": {
        "operationId": "ListNamespaces",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restUserMetaNamespaceCollection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "List defined meta namespaces",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/meta/namespace/{Namespace}": {
      "get": {
        "operationId": "ListNamespaceValues",
        "parameters": [
          {
            "description": "List persisted values for this namespace",
            "in": "path",
            "name": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "default": "PUT",
            "enum": [
              "PUT",
              "DELETE"
            ],
            "in": "query",
            "name": "Operation.Operation",
            "required": true,
            "type": "string"
          },
          {
            "collectionFormat": "multi",
            "in": "query",
            "items": {
              "type": "string"
            },
            "name": "Operation.Values",
            "required": true,
            "type": "array"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNamespaceValuesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "List values for a given namespace",
        "tags": [
          "NodeService"
        ]
      },
      "patch": {
        "operationId": "UpdateNamespaceValues",
        "parameters": [
          {
            "description": "List persisted values for this namespace",
            "in": "path",
            "name": "Namespace",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "Operation",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restNamespaceValuesOperation"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNamespaceValuesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Add/delete a values for a given namespace",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/node/{Uuid}": {
      "get": {
        "operationId": "GetByUuid",
        "parameters": [
          {
            "in": "path",
            "name": "Uuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNode"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Load a node by its Uuid",
        "tags": [
          "NodeService"
        ]
      },
      "patch": {
        "operationId": "PatchNode",
        "parameters": [
          {
            "in": "path",
            "name": "Uuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "NodeUpdates",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restNodeUpdates"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNode"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "PatchNode is used to update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/node/{Uuid}/link": {
      "post": {
        "operationId": "CreatePublicLink",
        "parameters": [
          {
            "in": "path",
            "name": "Uuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "PublicLinkRequest",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restPublicLinkRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restShareLink"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Create a public link on a given node",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/node/{Uuid}/versions": {
      "get": {
        "operationId": "ListVersions",
        "parameters": [
          {
            "in": "path",
            "name": "Uuid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "name": "Path",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodeCollection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "List all known versions of a node",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/nodes": {
      "post": {
        "operationId": "Lookup",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restLookupRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodeCollection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "security": [
          {
            "Bearer": []
          }
        ],
        "summary": "Generic request to either list (using Locators) or search (using Query) for nodes",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/nodes/bookmarks": {
      "get": {
        "operationId": "UserBookmarks",
        "parameters": [
          {
            "in": "query",
            "name": "All",
            "required": false,
            "type": "boolean"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodeCollection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Special API for Bookmarks, will load userMeta and the associated nodes, and return\nas a node list",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/nodes/create": {
      "post": {
        "operationId": "Create",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restNodeCollection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Create one or many files (empty or hydrated from a TemplateUuid) or folders",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/selection": {
      "post": {
        "operationId": "CreateSelection",
        "parameters": [
          {
            "description": "Request to create a selection from a list of nodes.",
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/restSelection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restSelection"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "Create and persist a temporary selection of nodes, that can be used by other actions",
        "tags": [
          "NodeService"
        ]
      }
    },
    "/n/templates": {
      "get": {
        "operationId": "Templates",
        "parameters": [
          {
            "in": "query",
            "name": "TemplateType",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/restListTemplatesResponse"
            }
          },
          "401": {
            "description": "User is not authenticated",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "403": {
            "description": "User has no permission to access this particular resource",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "404": {
            "description": "Resource does not exist in the system",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          },
          "500": {
            "description": "An internal error occurred in the backend",
            "schema": {
              "$ref": "#/definitions/restError"
            }
          }
        },
        "summary": "List available templates for hydrating empty files",
        "tags": [
          "NodeService"
        ]
      }
    }
  },
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https",
    "wss"
  ],
  "security": [
    {
      "Bearer": []
    }
  ],
  "securityDefinitions": {
    "Bearer": {
      "description": "Expected value is 'Bearer {TOKEN}'",
      "in": "header",
      "name": "Authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0",
  "tags": [
    {
      "name": "NodeService"
    }
  ]
}