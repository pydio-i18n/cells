// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: cellsapi-rest-v2.proto

package rest

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	activity "github.com/pydio/cells/v5/common/proto/activity"
	_ "github.com/pydio/cells/v5/common/proto/ctl"
	_ "github.com/pydio/cells/v5/common/proto/encryption"
	idm "github.com/pydio/cells/v5/common/proto/idm"
	_ "github.com/pydio/cells/v5/common/proto/install"
	jobs "github.com/pydio/cells/v5/common/proto/jobs"
	_ "github.com/pydio/cells/v5/common/proto/log"
	_ "github.com/pydio/cells/v5/common/proto/mailer"
	_ "github.com/pydio/cells/v5/common/proto/object"
	_ "github.com/pydio/cells/v5/common/proto/registry"
	tree "github.com/pydio/cells/v5/common/proto/tree"
	_ "github.com/pydio/cells/v5/common/proto/update"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Mode int32

const (
	Mode_Default       Mode = 0
	Mode_NodeReadOnly  Mode = 1
	Mode_NodeWriteOnly Mode = 2
	Mode_LevelReadOnly Mode = 3
)

// Enum value maps for Mode.
var (
	Mode_name = map[int32]string{
		0: "Default",
		1: "NodeReadOnly",
		2: "NodeWriteOnly",
		3: "LevelReadOnly",
	}
	Mode_value = map[string]int32{
		"Default":       0,
		"NodeReadOnly":  1,
		"NodeWriteOnly": 2,
		"LevelReadOnly": 3,
	}
)

func (x Mode) Enum() *Mode {
	p := new(Mode)
	*p = x
	return p
}

func (x Mode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Mode) Descriptor() protoreflect.EnumDescriptor {
	return file_cellsapi_rest_v2_proto_enumTypes[0].Descriptor()
}

func (Mode) Type() protoreflect.EnumType {
	return &file_cellsapi_rest_v2_proto_enumTypes[0]
}

func (x Mode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Mode.Descriptor instead.
func (Mode) EnumDescriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{0}
}

type UserActionType int32

const (
	UserActionType_delete   UserActionType = 0
	UserActionType_restore  UserActionType = 1
	UserActionType_copy     UserActionType = 2
	UserActionType_move     UserActionType = 3
	UserActionType_extract  UserActionType = 4
	UserActionType_compress UserActionType = 5
)

// Enum value maps for UserActionType.
var (
	UserActionType_name = map[int32]string{
		0: "delete",
		1: "restore",
		2: "copy",
		3: "move",
		4: "extract",
		5: "compress",
	}
	UserActionType_value = map[string]int32{
		"delete":   0,
		"restore":  1,
		"copy":     2,
		"move":     3,
		"extract":  4,
		"compress": 5,
	}
)

func (x UserActionType) Enum() *UserActionType {
	p := new(UserActionType)
	*p = x
	return p
}

func (x UserActionType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (UserActionType) Descriptor() protoreflect.EnumDescriptor {
	return file_cellsapi_rest_v2_proto_enumTypes[1].Descriptor()
}

func (UserActionType) Type() protoreflect.EnumType {
	return &file_cellsapi_rest_v2_proto_enumTypes[1]
}

func (x UserActionType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use UserActionType.Descriptor instead.
func (UserActionType) EnumDescriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{1}
}

type ActionStatus int32

const (
	ActionStatus_Performed  ActionStatus = 0
	ActionStatus_Background ActionStatus = 1
)

// Enum value maps for ActionStatus.
var (
	ActionStatus_name = map[int32]string{
		0: "Performed",
		1: "Background",
	}
	ActionStatus_value = map[string]int32{
		"Performed":  0,
		"Background": 1,
	}
)

func (x ActionStatus) Enum() *ActionStatus {
	p := new(ActionStatus)
	*p = x
	return p
}

func (x ActionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cellsapi_rest_v2_proto_enumTypes[2].Descriptor()
}

func (ActionStatus) Type() protoreflect.EnumType {
	return &file_cellsapi_rest_v2_proto_enumTypes[2]
}

func (x ActionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionStatus.Descriptor instead.
func (ActionStatus) EnumDescriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{2}
}

type LockInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsLocked bool   `protobuf:"varint,1,opt,name=IsLocked,proto3" json:"IsLocked,omitempty"`
	Owner    string `protobuf:"bytes,2,opt,name=Owner,proto3" json:"Owner,omitempty"`
}

func (x *LockInfo) Reset() {
	*x = LockInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LockInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LockInfo) ProtoMessage() {}

func (x *LockInfo) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LockInfo.ProtoReflect.Descriptor instead.
func (*LockInfo) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{0}
}

func (x *LockInfo) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *LockInfo) GetOwner() string {
	if x != nil {
		return x.Owner
	}
	return ""
}

type ContextWorkspace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRoot        bool               `protobuf:"varint,1,opt,name=IsRoot,proto3" json:"IsRoot,omitempty"`
	Uuid          string             `protobuf:"bytes,2,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Slug          string             `protobuf:"bytes,3,opt,name=Slug,proto3" json:"Slug,omitempty"`
	Scope         idm.WorkspaceScope `protobuf:"varint,4,opt,name=Scope,proto3,enum=idm.WorkspaceScope" json:"Scope,omitempty"`
	Permissions   string             `protobuf:"bytes,5,opt,name=Permissions,proto3" json:"Permissions,omitempty"`
	Label         string             `protobuf:"bytes,6,opt,name=Label,proto3" json:"Label,omitempty"`
	Description   string             `protobuf:"bytes,7,opt,name=Description,proto3" json:"Description,omitempty"`
	Syncable      bool               `protobuf:"varint,8,opt,name=Syncable,proto3" json:"Syncable,omitempty"`
	IsVirtualRoot bool               `protobuf:"varint,9,opt,name=IsVirtualRoot,proto3" json:"IsVirtualRoot,omitempty"`
	SkipRecycle   bool               `protobuf:"varint,10,opt,name=SkipRecycle,proto3" json:"SkipRecycle,omitempty"`
	Quota         int64              `protobuf:"varint,11,opt,name=Quota,proto3" json:"Quota,omitempty"`
	QuotaUsage    int64              `protobuf:"varint,12,opt,name=QuotaUsage,proto3" json:"QuotaUsage,omitempty"`
}

func (x *ContextWorkspace) Reset() {
	*x = ContextWorkspace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContextWorkspace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContextWorkspace) ProtoMessage() {}

func (x *ContextWorkspace) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContextWorkspace.ProtoReflect.Descriptor instead.
func (*ContextWorkspace) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{1}
}

func (x *ContextWorkspace) GetIsRoot() bool {
	if x != nil {
		return x.IsRoot
	}
	return false
}

func (x *ContextWorkspace) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ContextWorkspace) GetSlug() string {
	if x != nil {
		return x.Slug
	}
	return ""
}

func (x *ContextWorkspace) GetScope() idm.WorkspaceScope {
	if x != nil {
		return x.Scope
	}
	return idm.WorkspaceScope(0)
}

func (x *ContextWorkspace) GetPermissions() string {
	if x != nil {
		return x.Permissions
	}
	return ""
}

func (x *ContextWorkspace) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *ContextWorkspace) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *ContextWorkspace) GetSyncable() bool {
	if x != nil {
		return x.Syncable
	}
	return false
}

func (x *ContextWorkspace) GetIsVirtualRoot() bool {
	if x != nil {
		return x.IsVirtualRoot
	}
	return false
}

func (x *ContextWorkspace) GetSkipRecycle() bool {
	if x != nil {
		return x.SkipRecycle
	}
	return false
}

func (x *ContextWorkspace) GetQuota() int64 {
	if x != nil {
		return x.Quota
	}
	return 0
}

func (x *ContextWorkspace) GetQuotaUsage() int64 {
	if x != nil {
		return x.QuotaUsage
	}
	return 0
}

type DataSourceFeatures struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encrypted bool `protobuf:"varint,1,opt,name=Encrypted,proto3" json:"Encrypted,omitempty"`
	Versioned bool `protobuf:"varint,2,opt,name=Versioned,proto3" json:"Versioned,omitempty"`
}

func (x *DataSourceFeatures) Reset() {
	*x = DataSourceFeatures{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataSourceFeatures) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataSourceFeatures) ProtoMessage() {}

func (x *DataSourceFeatures) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataSourceFeatures.ProtoReflect.Descriptor instead.
func (*DataSourceFeatures) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{2}
}

func (x *DataSourceFeatures) GetEncrypted() bool {
	if x != nil {
		return x.Encrypted
	}
	return false
}

func (x *DataSourceFeatures) GetVersioned() bool {
	if x != nil {
		return x.Versioned
	}
	return false
}

type ImageMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Width       int32  `protobuf:"varint,1,opt,name=Width,proto3" json:"Width,omitempty"`
	Height      int32  `protobuf:"varint,2,opt,name=Height,proto3" json:"Height,omitempty"`
	Orientation int32  `protobuf:"varint,3,opt,name=Orientation,proto3" json:"Orientation,omitempty"`
	JsonEXIF    string `protobuf:"bytes,4,opt,name=JsonEXIF,proto3" json:"JsonEXIF,omitempty"`
}

func (x *ImageMeta) Reset() {
	*x = ImageMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImageMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImageMeta) ProtoMessage() {}

func (x *ImageMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImageMeta.ProtoReflect.Descriptor instead.
func (*ImageMeta) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{3}
}

func (x *ImageMeta) GetWidth() int32 {
	if x != nil {
		return x.Width
	}
	return 0
}

func (x *ImageMeta) GetHeight() int32 {
	if x != nil {
		return x.Height
	}
	return 0
}

func (x *ImageMeta) GetOrientation() int32 {
	if x != nil {
		return x.Orientation
	}
	return 0
}

func (x *ImageMeta) GetJsonEXIF() string {
	if x != nil {
		return x.JsonEXIF
	}
	return ""
}

type FilePreview struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Processing  bool   `protobuf:"varint,1,opt,name=Processing,proto3" json:"Processing,omitempty"`
	ContentType string `protobuf:"bytes,2,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	URL         string `protobuf:"bytes,3,opt,name=URL,proto3" json:"URL,omitempty"`
	Dimension   int32  `protobuf:"varint,4,opt,name=Dimension,proto3" json:"Dimension,omitempty"`
}

func (x *FilePreview) Reset() {
	*x = FilePreview{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilePreview) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilePreview) ProtoMessage() {}

func (x *FilePreview) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilePreview.ProtoReflect.Descriptor instead.
func (*FilePreview) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{4}
}

func (x *FilePreview) GetProcessing() bool {
	if x != nil {
		return x.Processing
	}
	return false
}

func (x *FilePreview) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *FilePreview) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *FilePreview) GetDimension() int32 {
	if x != nil {
		return x.Dimension
	}
	return 0
}

type JsonMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Value     string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *JsonMeta) Reset() {
	*x = JsonMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JsonMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JsonMeta) ProtoMessage() {}

func (x *JsonMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JsonMeta.ProtoReflect.Descriptor instead.
func (*JsonMeta) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{5}
}

func (x *JsonMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *JsonMeta) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CountMeta struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	Value     int32  `protobuf:"varint,2,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *CountMeta) Reset() {
	*x = CountMeta{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CountMeta) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CountMeta) ProtoMessage() {}

func (x *CountMeta) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CountMeta.ProtoReflect.Descriptor instead.
func (*CountMeta) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{6}
}

func (x *CountMeta) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *CountMeta) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid               string                   `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Path               string                   `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
	Type               tree.NodeType            `protobuf:"varint,3,opt,name=Type,proto3,enum=tree.NodeType" json:"Type,omitempty"`
	Mode               Mode                     `protobuf:"varint,4,opt,name=Mode,proto3,enum=rest.Mode" json:"Mode,omitempty"`
	Size               int64                    `protobuf:"varint,5,opt,name=Size,proto3" json:"Size,omitempty"`
	Modified           int64                    `protobuf:"varint,6,opt,name=Modified,proto3" json:"Modified,omitempty"` // Date instead of TS ?
	ContentType        string                   `protobuf:"bytes,7,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	ContentsHash       string                   `protobuf:"bytes,8,opt,name=ContentsHash,proto3" json:"ContentsHash,omitempty"`
	HashingMethod      string                   `protobuf:"bytes,23,opt,name=HashingMethod,proto3" json:"HashingMethod,omitempty"`
	StorageETag        string                   `protobuf:"bytes,9,opt,name=StorageETag,proto3" json:"StorageETag,omitempty"`
	IsRecycleBin       bool                     `protobuf:"varint,10,opt,name=IsRecycleBin,proto3" json:"IsRecycleBin,omitempty"`
	IsRecycled         bool                     `protobuf:"varint,11,opt,name=IsRecycled,proto3" json:"IsRecycled,omitempty"`
	IsBookmarked       bool                     `protobuf:"varint,12,opt,name=IsBookmarked,proto3" json:"IsBookmarked,omitempty"`
	ContextWorkspace   *ContextWorkspace        `protobuf:"bytes,13,opt,name=ContextWorkspace,proto3" json:"ContextWorkspace,omitempty"`
	DataSourceFeatures *DataSourceFeatures      `protobuf:"bytes,24,opt,name=DataSourceFeatures,proto3" json:"DataSourceFeatures,omitempty"`
	ContentLock        *LockInfo                `protobuf:"bytes,14,opt,name=ContentLock,proto3" json:"ContentLock,omitempty"`
	Previews           []*FilePreview           `protobuf:"bytes,16,rep,name=Previews,proto3" json:"Previews,omitempty"`
	Shares             []*ShareLink             `protobuf:"bytes,17,rep,name=Shares,proto3" json:"Shares,omitempty"`
	Activities         []*activity.Object       `protobuf:"bytes,18,rep,name=Activities,proto3" json:"Activities,omitempty"`
	Subscriptions      []*activity.Subscription `protobuf:"bytes,19,rep,name=Subscriptions,proto3" json:"Subscriptions,omitempty"`
	ImageMeta          *ImageMeta               `protobuf:"bytes,25,opt,name=ImageMeta,proto3" json:"ImageMeta,omitempty"`
	Metadata           []*JsonMeta              `protobuf:"bytes,21,rep,name=Metadata,proto3" json:"Metadata,omitempty"`
	FolderMeta         []*CountMeta             `protobuf:"bytes,15,rep,name=FolderMeta,proto3" json:"FolderMeta,omitempty"`
	UserMetadata       []*JsonMeta              `protobuf:"bytes,22,rep,name=UserMetadata,proto3" json:"UserMetadata,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{7}
}

func (x *Node) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Node) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Node) GetType() tree.NodeType {
	if x != nil {
		return x.Type
	}
	return tree.NodeType(0)
}

func (x *Node) GetMode() Mode {
	if x != nil {
		return x.Mode
	}
	return Mode_Default
}

func (x *Node) GetSize() int64 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *Node) GetModified() int64 {
	if x != nil {
		return x.Modified
	}
	return 0
}

func (x *Node) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *Node) GetContentsHash() string {
	if x != nil {
		return x.ContentsHash
	}
	return ""
}

func (x *Node) GetHashingMethod() string {
	if x != nil {
		return x.HashingMethod
	}
	return ""
}

func (x *Node) GetStorageETag() string {
	if x != nil {
		return x.StorageETag
	}
	return ""
}

func (x *Node) GetIsRecycleBin() bool {
	if x != nil {
		return x.IsRecycleBin
	}
	return false
}

func (x *Node) GetIsRecycled() bool {
	if x != nil {
		return x.IsRecycled
	}
	return false
}

func (x *Node) GetIsBookmarked() bool {
	if x != nil {
		return x.IsBookmarked
	}
	return false
}

func (x *Node) GetContextWorkspace() *ContextWorkspace {
	if x != nil {
		return x.ContextWorkspace
	}
	return nil
}

func (x *Node) GetDataSourceFeatures() *DataSourceFeatures {
	if x != nil {
		return x.DataSourceFeatures
	}
	return nil
}

func (x *Node) GetContentLock() *LockInfo {
	if x != nil {
		return x.ContentLock
	}
	return nil
}

func (x *Node) GetPreviews() []*FilePreview {
	if x != nil {
		return x.Previews
	}
	return nil
}

func (x *Node) GetShares() []*ShareLink {
	if x != nil {
		return x.Shares
	}
	return nil
}

func (x *Node) GetActivities() []*activity.Object {
	if x != nil {
		return x.Activities
	}
	return nil
}

func (x *Node) GetSubscriptions() []*activity.Subscription {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

func (x *Node) GetImageMeta() *ImageMeta {
	if x != nil {
		return x.ImageMeta
	}
	return nil
}

func (x *Node) GetMetadata() []*JsonMeta {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Node) GetFolderMeta() []*CountMeta {
	if x != nil {
		return x.FolderMeta
	}
	return nil
}

func (x *Node) GetUserMetadata() []*JsonMeta {
	if x != nil {
		return x.UserMetadata
	}
	return nil
}

type NodeLocator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=Path,proto3" json:"Path,omitempty"`
}

func (x *NodeLocator) Reset() {
	*x = NodeLocator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLocator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLocator) ProtoMessage() {}

func (x *NodeLocator) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLocator.ProtoReflect.Descriptor instead.
func (*NodeLocator) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{8}
}

func (x *NodeLocator) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *NodeLocator) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type IncomingNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locator      *NodeLocator  `protobuf:"bytes,1,opt,name=Locator,proto3" json:"Locator,omitempty"`
	Type         tree.NodeType `protobuf:"varint,2,opt,name=Type,proto3,enum=tree.NodeType" json:"Type,omitempty"`
	ContentType  string        `protobuf:"bytes,3,opt,name=ContentType,proto3" json:"ContentType,omitempty"`
	TemplateUuid string        `protobuf:"bytes,4,opt,name=TemplateUuid,proto3" json:"TemplateUuid,omitempty"`
}

func (x *IncomingNode) Reset() {
	*x = IncomingNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IncomingNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IncomingNode) ProtoMessage() {}

func (x *IncomingNode) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IncomingNode.ProtoReflect.Descriptor instead.
func (*IncomingNode) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{9}
}

func (x *IncomingNode) GetLocator() *NodeLocator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *IncomingNode) GetType() tree.NodeType {
	if x != nil {
		return x.Type
	}
	return tree.NodeType(0)
}

func (x *IncomingNode) GetContentType() string {
	if x != nil {
		return x.ContentType
	}
	return ""
}

func (x *IncomingNode) GetTemplateUuid() string {
	if x != nil {
		return x.TemplateUuid
	}
	return ""
}

type NodeCollection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes      []*Node             `protobuf:"bytes,1,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	Facets     []*tree.SearchFacet `protobuf:"bytes,3,rep,name=Facets,proto3" json:"Facets,omitempty"`
	Pagination *Pagination         `protobuf:"bytes,2,opt,name=Pagination,proto3" json:"Pagination,omitempty"`
}

func (x *NodeCollection) Reset() {
	*x = NodeCollection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeCollection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeCollection) ProtoMessage() {}

func (x *NodeCollection) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeCollection.ProtoReflect.Descriptor instead.
func (*NodeCollection) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{10}
}

func (x *NodeCollection) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeCollection) GetFacets() []*tree.SearchFacet {
	if x != nil {
		return x.Facets
	}
	return nil
}

func (x *NodeCollection) GetPagination() *Pagination {
	if x != nil {
		return x.Pagination
	}
	return nil
}

type CreateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Inputs    []*IncomingNode `protobuf:"bytes,1,rep,name=Inputs,proto3" json:"Inputs,omitempty"`
	Recursive bool            `protobuf:"varint,2,opt,name=Recursive,proto3" json:"Recursive,omitempty"`
}

func (x *CreateRequest) Reset() {
	*x = CreateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateRequest) ProtoMessage() {}

func (x *CreateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateRequest.ProtoReflect.Descriptor instead.
func (*CreateRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{11}
}

func (x *CreateRequest) GetInputs() []*IncomingNode {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CreateRequest) GetRecursive() bool {
	if x != nil {
		return x.Recursive
	}
	return false
}

type LookupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Locators    []*NodeLocator `protobuf:"bytes,1,rep,name=Locators,proto3" json:"Locators,omitempty"`
	Query       *tree.Query    `protobuf:"bytes,2,opt,name=Query,proto3" json:"Query,omitempty"`
	Offset      int64          `protobuf:"varint,3,opt,name=Offset,proto3" json:"Offset,omitempty"`
	Limit       int64          `protobuf:"varint,4,opt,name=Limit,proto3" json:"Limit,omitempty"`
	SortField   string         `protobuf:"bytes,5,opt,name=SortField,proto3" json:"SortField,omitempty"`
	SortDirDesc bool           `protobuf:"varint,6,opt,name=SortDirDesc,proto3" json:"SortDirDesc,omitempty"`
	StatFlags   []uint32       `protobuf:"varint,7,rep,packed,name=StatFlags,proto3" json:"StatFlags,omitempty"`
}

func (x *LookupRequest) Reset() {
	*x = LookupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LookupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LookupRequest) ProtoMessage() {}

func (x *LookupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LookupRequest.ProtoReflect.Descriptor instead.
func (*LookupRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{12}
}

func (x *LookupRequest) GetLocators() []*NodeLocator {
	if x != nil {
		return x.Locators
	}
	return nil
}

func (x *LookupRequest) GetQuery() *tree.Query {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *LookupRequest) GetOffset() int64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *LookupRequest) GetLimit() int64 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LookupRequest) GetSortField() string {
	if x != nil {
		return x.SortField
	}
	return ""
}

func (x *LookupRequest) GetSortDirDesc() bool {
	if x != nil {
		return x.SortDirDesc
	}
	return false
}

func (x *LookupRequest) GetStatFlags() []uint32 {
	if x != nil {
		return x.StatFlags
	}
	return nil
}

type ActionParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Nodes          []*NodeLocator `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
	TargetNode     *NodeLocator   `protobuf:"bytes,3,opt,name=TargetNode,proto3" json:"TargetNode,omitempty"`
	SelectionUuid  string         `protobuf:"bytes,4,opt,name=SelectionUuid,proto3" json:"SelectionUuid,omitempty"`
	JsonParameters string         `protobuf:"bytes,5,opt,name=JsonParameters,proto3" json:"JsonParameters,omitempty"`
	Await          bool           `protobuf:"varint,6,opt,name=Await,proto3" json:"Await,omitempty"`
}

func (x *ActionParameters) Reset() {
	*x = ActionParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionParameters) ProtoMessage() {}

func (x *ActionParameters) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionParameters.ProtoReflect.Descriptor instead.
func (*ActionParameters) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{13}
}

func (x *ActionParameters) GetNodes() []*NodeLocator {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ActionParameters) GetTargetNode() *NodeLocator {
	if x != nil {
		return x.TargetNode
	}
	return nil
}

func (x *ActionParameters) GetSelectionUuid() string {
	if x != nil {
		return x.SelectionUuid
	}
	return ""
}

func (x *ActionParameters) GetJsonParameters() string {
	if x != nil {
		return x.JsonParameters
	}
	return ""
}

func (x *ActionParameters) GetAwait() bool {
	if x != nil {
		return x.Await
	}
	return false
}

type ActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       UserActionType    `protobuf:"varint,1,opt,name=Name,proto3,enum=rest.UserActionType" json:"Name,omitempty"`
	JobUuid    string            `protobuf:"bytes,2,opt,name=JobUuid,proto3" json:"JobUuid,omitempty"`
	Parameters *ActionParameters `protobuf:"bytes,3,opt,name=Parameters,proto3" json:"Parameters,omitempty"`
}

func (x *ActionRequest) Reset() {
	*x = ActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionRequest) ProtoMessage() {}

func (x *ActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionRequest.ProtoReflect.Descriptor instead.
func (*ActionRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{14}
}

func (x *ActionRequest) GetName() UserActionType {
	if x != nil {
		return x.Name
	}
	return UserActionType_delete
}

func (x *ActionRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *ActionRequest) GetParameters() *ActionParameters {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type ControlActionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    UserActionType    `protobuf:"varint,1,opt,name=Name,proto3,enum=rest.UserActionType" json:"Name,omitempty"`
	JobUuid string            `protobuf:"bytes,2,opt,name=JobUuid,proto3" json:"JobUuid,omitempty"`
	Command *jobs.CtrlCommand `protobuf:"bytes,3,opt,name=Command,proto3" json:"Command,omitempty"`
}

func (x *ControlActionRequest) Reset() {
	*x = ControlActionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControlActionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControlActionRequest) ProtoMessage() {}

func (x *ControlActionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControlActionRequest.ProtoReflect.Descriptor instead.
func (*ControlActionRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{15}
}

func (x *ControlActionRequest) GetName() UserActionType {
	if x != nil {
		return x.Name
	}
	return UserActionType_delete
}

func (x *ControlActionRequest) GetJobUuid() string {
	if x != nil {
		return x.JobUuid
	}
	return ""
}

func (x *ControlActionRequest) GetCommand() *jobs.CtrlCommand {
	if x != nil {
		return x.Command
	}
	return nil
}

type ActionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status        ActionStatus `protobuf:"varint,1,opt,name=Status,proto3,enum=rest.ActionStatus" json:"Status,omitempty"`
	AffectedNodes []*Node      `protobuf:"bytes,2,rep,name=AffectedNodes,proto3" json:"AffectedNodes,omitempty"`
	Jobs          []*jobs.Job  `protobuf:"bytes,3,rep,name=Jobs,proto3" json:"Jobs,omitempty"`
}

func (x *ActionResponse) Reset() {
	*x = ActionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionResponse) ProtoMessage() {}

func (x *ActionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionResponse.ProtoReflect.Descriptor instead.
func (*ActionResponse) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{16}
}

func (x *ActionResponse) GetStatus() ActionStatus {
	if x != nil {
		return x.Status
	}
	return ActionStatus_Performed
}

func (x *ActionResponse) GetAffectedNodes() []*Node {
	if x != nil {
		return x.AffectedNodes
	}
	return nil
}

func (x *ActionResponse) GetJobs() []*jobs.Job {
	if x != nil {
		return x.Jobs
	}
	return nil
}

type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid  string  `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Nodes []*Node `protobuf:"bytes,2,rep,name=Nodes,proto3" json:"Nodes,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{17}
}

func (x *Selection) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Selection) GetNodes() []*Node {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type UpsertPublicLinkRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string     `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Link *ShareLink `protobuf:"bytes,2,opt,name=Link,proto3" json:"Link,omitempty"`
	// Whether it has Password enabled
	PasswordEnabled bool `protobuf:"varint,3,opt,name=PasswordEnabled,proto3" json:"PasswordEnabled,omitempty"`
	// Set if switching from no password to password
	CreatePassword string `protobuf:"bytes,4,opt,name=CreatePassword,proto3" json:"CreatePassword,omitempty"`
	// Set if updating an existing password
	UpdatePassword string `protobuf:"bytes,5,opt,name=UpdatePassword,proto3" json:"UpdatePassword,omitempty"`
	// Change the ShareLink Hash with a custom value
	UpdateCustomHash string `protobuf:"bytes,6,opt,name=UpdateCustomHash,proto3" json:"UpdateCustomHash,omitempty"`
}

func (x *UpsertPublicLinkRequest) Reset() {
	*x = UpsertPublicLinkRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpsertPublicLinkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpsertPublicLinkRequest) ProtoMessage() {}

func (x *UpsertPublicLinkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpsertPublicLinkRequest.ProtoReflect.Descriptor instead.
func (*UpsertPublicLinkRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{18}
}

func (x *UpsertPublicLinkRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *UpsertPublicLinkRequest) GetLink() *ShareLink {
	if x != nil {
		return x.Link
	}
	return nil
}

func (x *UpsertPublicLinkRequest) GetPasswordEnabled() bool {
	if x != nil {
		return x.PasswordEnabled
	}
	return false
}

func (x *UpsertPublicLinkRequest) GetCreatePassword() string {
	if x != nil {
		return x.CreatePassword
	}
	return ""
}

func (x *UpsertPublicLinkRequest) GetUpdatePassword() string {
	if x != nil {
		return x.UpdatePassword
	}
	return ""
}

func (x *UpsertPublicLinkRequest) GetUpdateCustomHash() string {
	if x != nil {
		return x.UpdateCustomHash
	}
	return ""
}

type PublicLinkUuidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
}

func (x *PublicLinkUuidRequest) Reset() {
	*x = PublicLinkUuidRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicLinkUuidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicLinkUuidRequest) ProtoMessage() {}

func (x *PublicLinkUuidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicLinkUuidRequest.ProtoReflect.Descriptor instead.
func (*PublicLinkUuidRequest) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{19}
}

func (x *PublicLinkUuidRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type PublicLinkDeleteSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid    string `protobuf:"bytes,1,opt,name=Uuid,proto3" json:"Uuid,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=Message,proto3" json:"Message,omitempty"`
}

func (x *PublicLinkDeleteSuccess) Reset() {
	*x = PublicLinkDeleteSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cellsapi_rest_v2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PublicLinkDeleteSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PublicLinkDeleteSuccess) ProtoMessage() {}

func (x *PublicLinkDeleteSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_cellsapi_rest_v2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PublicLinkDeleteSuccess.ProtoReflect.Descriptor instead.
func (*PublicLinkDeleteSuccess) Descriptor() ([]byte, []int) {
	return file_cellsapi_rest_v2_proto_rawDescGZIP(), []int{20}
}

func (x *PublicLinkDeleteSuccess) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PublicLinkDeleteSuccess) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

var File_cellsapi_rest_v2_proto protoreflect.FileDescriptor

var file_cellsapi_rest_v2_proto_rawDesc = []byte{
	0x0a, 0x16, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x72, 0x65, 0x73, 0x74, 0x2d,
	0x76, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x72, 0x65, 0x73, 0x74, 0x1a, 0x15,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x61, 0x70, 0x69, 0x2d, 0x69, 0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15,
	0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x62, 0x72, 0x6f, 0x6b, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x72,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69,
	0x2d, 0x67, 0x72, 0x61, 0x70, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x14, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x73, 0x68, 0x61, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x17, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x66, 0x72, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x18, 0x63, 0x65, 0x6c,
	0x6c, 0x73, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69,
	0x64, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d,
	0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x2d, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x10, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d,
	0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x65, 0x6c, 0x6c,
	0x73, 0x2d, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x6c, 0x6f, 0x67, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x6f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x69,
	0x6e, 0x73, 0x74, 0x61, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0f, 0x63, 0x65,
	0x6c, 0x6c, 0x73, 0x2d, 0x63, 0x74, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x63,
	0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x14, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2d, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4f, 0x77,
	0x6e, 0x65, 0x72, 0x22, 0xf1, 0x02, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x73, 0x52, 0x6f,
	0x6f, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x49, 0x73, 0x52, 0x6f, 0x6f, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x53, 0x6c, 0x75, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x69, 0x64, 0x6d, 0x2e, 0x57, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x63, 0x6f, 0x70, 0x65, 0x52, 0x05, 0x53, 0x63,
	0x6f, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x79, 0x6e, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x53, 0x79, 0x6e, 0x63, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x49, 0x73, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x49, 0x73, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x6f, 0x6f, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x6b, 0x69, 0x70, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x05, 0x51, 0x75, 0x6f, 0x74, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x51, 0x75, 0x6f, 0x74, 0x61,
	0x55, 0x73, 0x61, 0x67, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x51, 0x75, 0x6f,
	0x74, 0x61, 0x55, 0x73, 0x61, 0x67, 0x65, 0x22, 0x50, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x22, 0x77, 0x0a, 0x09, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x14, 0x0a, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x57, 0x69, 0x64, 0x74, 0x68, 0x12, 0x16, 0x0a, 0x06,
	0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x48, 0x65,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x4f, 0x72, 0x69, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x58,
	0x49, 0x46, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x58,
	0x49, 0x46, 0x22, 0x7f, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x69, 0x6e,
	0x67, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x55, 0x52, 0x4c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x3e, 0x0a, 0x08, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3f, 0x0a, 0x09, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61,
	0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0xe0, 0x07, 0x0a, 0x04, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x50, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x69, 0x7a,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x08, 0x4d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x61, 0x73, 0x68, 0x12,
	0x24, 0x0a, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x48, 0x61, 0x73, 0x68, 0x69, 0x6e, 0x67, 0x4d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x45, 0x54, 0x61, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x45, 0x54, 0x61, 0x67, 0x12, 0x22, 0x0a, 0x0c, 0x49, 0x73, 0x52, 0x65, 0x63,
	0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x42, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x49,
	0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x49, 0x73, 0x52, 0x65, 0x63, 0x79, 0x63, 0x6c, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x49,
	0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x49, 0x73, 0x42, 0x6f, 0x6f, 0x6b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x64, 0x12,
	0x42, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63,
	0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x12, 0x48, 0x0a, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x52, 0x12, 0x44, 0x61, 0x74, 0x61, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a,
	0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x63, 0x6b, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x4c, 0x6f, 0x63, 0x6b, 0x12,
	0x2d, 0x0a, 0x08, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x10, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x52, 0x08, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x12, 0x27,
	0x0a, 0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x18, 0x11, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x52,
	0x06, 0x53, 0x68, 0x61, 0x72, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x12, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x49, 0x6d, 0x61, 0x67, 0x65,
	0x4d, 0x65, 0x74, 0x61, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x2e, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x09, 0x49, 0x6d, 0x61,
	0x67, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x15, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x2f, 0x0a, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61,
	0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0a, 0x46, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x12, 0x32, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x4a, 0x73, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x0c, 0x55, 0x73, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22, 0x35, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x50, 0x61, 0x74, 0x68, 0x22, 0xa5,
	0x01, 0x0a, 0x0c, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x12,
	0x2b, 0x0a, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x52, 0x07, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x22, 0x0a, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x72, 0x65,
	0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x55, 0x75,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x55, 0x75, 0x69, 0x64, 0x22, 0x8f, 0x01, 0x0a, 0x0e, 0x4e, 0x6f, 0x64, 0x65, 0x43,
	0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x64,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x06, 0x46,
	0x61, 0x63, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x72,
	0x65, 0x65, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x46, 0x61, 0x63, 0x65, 0x74, 0x52, 0x06,
	0x46, 0x61, 0x63, 0x65, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x2e, 0x50, 0x61, 0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x50, 0x61,
	0x67, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x59, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x0a, 0x06, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x49, 0x6e, 0x63, 0x6f, 0x6d, 0x69, 0x6e, 0x67, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x06, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73, 0x69,
	0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x52, 0x65, 0x63, 0x75, 0x72, 0x73,
	0x69, 0x76, 0x65, 0x22, 0xed, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x08, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x08, 0x4c, 0x6f, 0x63, 0x61,
	0x74, 0x6f, 0x72, 0x73, 0x12, 0x21, 0x0a, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x52, 0x05, 0x51, 0x75, 0x65, 0x72, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x53, 0x6f, 0x72, 0x74, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69, 0x72, 0x44, 0x65,
	0x73, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x6f, 0x72, 0x74, 0x44, 0x69,
	0x72, 0x44, 0x65, 0x73, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x09, 0x53, 0x74, 0x61, 0x74, 0x46, 0x6c,
	0x61, 0x67, 0x73, 0x22, 0xd2, 0x01, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x27, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x05, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x31, 0x0a, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0a, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x4e, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x55, 0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x55, 0x75, 0x69, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x4a, 0x73,
	0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x77, 0x61, 0x69, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x05, 0x41, 0x77, 0x61, 0x69, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x12, 0x36,
	0x0a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x0a, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x28, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4a, 0x6f, 0x62,
	0x55, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4a, 0x6f, 0x62, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x2b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x43, 0x74, 0x72, 0x6c,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x22, 0x8d, 0x01, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x12, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x30, 0x0a, 0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x0d, 0x41, 0x66, 0x66, 0x65, 0x63, 0x74, 0x65, 0x64, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x12, 0x1d, 0x0a, 0x04, 0x4a, 0x6f, 0x62, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x04, 0x4a, 0x6f, 0x62, 0x73,
	0x22, 0x41, 0x0a, 0x09, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69,
	0x64, 0x12, 0x20, 0x0a, 0x05, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x22, 0xf8, 0x01, 0x0a, 0x17, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55,
	0x75, 0x69, 0x64, 0x12, 0x23, 0x0a, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69,
	0x6e, 0x6b, 0x52, 0x04, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0f, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f,
	0x72, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x48, 0x61, 0x73, 0x68, 0x22, 0x2b,
	0x0a, 0x15, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x75, 0x69, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x22, 0x47, 0x0a, 0x17, 0x50,
	0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2a, 0x4b, 0x0a, 0x04, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x6f, 0x64,
	0x65, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x4e,
	0x6f, 0x64, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4f, 0x6e, 0x6c, 0x79, 0x10, 0x02, 0x12, 0x11,
	0x0a, 0x0d, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x6e, 0x6c, 0x79, 0x10,
	0x03, 0x2a, 0x58, 0x0a, 0x0e, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a, 0x06, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x0b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x63, 0x6f, 0x70, 0x79, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x6d, 0x6f, 0x76, 0x65, 0x10, 0x03,
	0x12, 0x0b, 0x0a, 0x07, 0x65, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x10, 0x04, 0x12, 0x0c, 0x0a,
	0x08, 0x63, 0x6f, 0x6d, 0x70, 0x72, 0x65, 0x73, 0x73, 0x10, 0x05, 0x2a, 0x2d, 0x0a, 0x0c, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0d, 0x0a, 0x09, 0x50,
	0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61,
	0x63, 0x6b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x10, 0x01, 0x32, 0xd9, 0x09, 0x0a, 0x0b, 0x4e,
	0x6f, 0x64, 0x65, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4d, 0x0a, 0x06, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x12, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x17, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x3a, 0x01, 0x2a, 0x22, 0x0c, 0x2f, 0x6e, 0x6f,
	0x64, 0x65, 0x2f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x06, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x12, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x6f, 0x6f, 0x6b, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x4e, 0x6f, 0x64, 0x65, 0x73, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x10, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x50, 0x61, 0x74, 0x68, 0x12, 0x11,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f,
	0x72, 0x1a, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x2f, 0x7b,
	0x50, 0x61, 0x74, 0x68, 0x7d, 0x12, 0x42, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x42, 0x79, 0x55, 0x75,
	0x69, 0x64, 0x12, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x0a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64,
	0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x75, 0x2f, 0x7b, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x4f, 0x0a, 0x0c, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x11, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x1a, 0x14, 0x2e, 0x72,
	0x65, 0x73, 0x74, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x76, 0x2f, 0x7b, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x59, 0x0a, 0x10, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1d,
	0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e,
	0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x15,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x58, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x50, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x12, 0x11, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12,
	0x63, 0x0a, 0x10, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c,
	0x69, 0x6e, 0x6b, 0x12, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x55, 0x70, 0x73, 0x65, 0x72,
	0x74, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x68, 0x61, 0x72, 0x65, 0x4c,
	0x69, 0x6e, 0x6b, 0x22, 0x1f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x19, 0x3a, 0x04, 0x4c, 0x69, 0x6e,
	0x6b, 0x32, 0x11, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x55,
	0x75, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x10, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x55, 0x75, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4c, 0x69, 0x6e, 0x6b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x53, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x22, 0x19, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x2a, 0x11, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x6c, 0x69, 0x6e, 0x6b, 0x2f, 0x7b, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12,
	0x63, 0x0a, 0x0d, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x21, 0x3a, 0x0a, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22,
	0x13, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x4e,
	0x61, 0x6d, 0x65, 0x7d, 0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x6f, 0x62, 0x12, 0x13, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x6a, 0x6f, 0x62, 0x73,
	0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x12, 0x1d, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x4e, 0x61, 0x6d, 0x65,
	0x7d, 0x2f, 0x7b, 0x4a, 0x6f, 0x62, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x69, 0x0a, 0x10, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x6f, 0x62, 0x12,
	0x1a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x09, 0x2e, 0x6a, 0x6f,
	0x62, 0x73, 0x2e, 0x4a, 0x6f, 0x62, 0x22, 0x2e, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x28, 0x3a, 0x07,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x32, 0x1d, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x7b, 0x4e, 0x61, 0x6d, 0x65, 0x7d, 0x2f, 0x7b, 0x4a, 0x6f,
	0x62, 0x55, 0x75, 0x69, 0x64, 0x7d, 0x12, 0x4f, 0x0a, 0x0f, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0f, 0x2e, 0x72, 0x65, 0x73, 0x74,
	0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x0f, 0x2e, 0x72, 0x65, 0x73,
	0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x1a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x14, 0x3a, 0x01, 0x2a, 0x22, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5d, 0x0a, 0x09, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x73, 0x12, 0x1a, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1b, 0x2e, 0x72, 0x65, 0x73, 0x74, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x65, 0x6d,
	0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0xc4, 0x01, 0x92, 0x41, 0x93, 0x01, 0x12, 0x36, 0x0a,
	0x14, 0x50, 0x79, 0x64, 0x69, 0x6f, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x52, 0x65, 0x73,
	0x74, 0x20, 0x41, 0x50, 0x49, 0x22, 0x1a, 0x0a, 0x05, 0x50, 0x79, 0x64, 0x69, 0x6f, 0x12, 0x11,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f, 0x2e, 0x63, 0x6f,
	0x6d, 0x32, 0x02, 0x76, 0x32, 0x2a, 0x03, 0x01, 0x02, 0x04, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x72, 0x30,
	0x0a, 0x1b, 0x4d, 0x6f, 0x72, 0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x50, 0x79, 0x64,
	0x69, 0x6f, 0x20, 0x43, 0x65, 0x6c, 0x6c, 0x73, 0x20, 0x41, 0x70, 0x69, 0x73, 0x12, 0x11, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x79, 0x64, 0x69, 0x6f, 0x2e, 0x63, 0x6f, 0x6d,
	0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x70, 0x79, 0x64,
	0x69, 0x6f, 0x2f, 0x63, 0x65, 0x6c, 0x6c, 0x73, 0x2f, 0x76, 0x35, 0x2f, 0x63, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x65, 0x73, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cellsapi_rest_v2_proto_rawDescOnce sync.Once
	file_cellsapi_rest_v2_proto_rawDescData = file_cellsapi_rest_v2_proto_rawDesc
)

func file_cellsapi_rest_v2_proto_rawDescGZIP() []byte {
	file_cellsapi_rest_v2_proto_rawDescOnce.Do(func() {
		file_cellsapi_rest_v2_proto_rawDescData = protoimpl.X.CompressGZIP(file_cellsapi_rest_v2_proto_rawDescData)
	})
	return file_cellsapi_rest_v2_proto_rawDescData
}

var file_cellsapi_rest_v2_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cellsapi_rest_v2_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_cellsapi_rest_v2_proto_goTypes = []any{
	(Mode)(0),                       // 0: rest.Mode
	(UserActionType)(0),             // 1: rest.UserActionType
	(ActionStatus)(0),               // 2: rest.ActionStatus
	(*LockInfo)(nil),                // 3: rest.LockInfo
	(*ContextWorkspace)(nil),        // 4: rest.ContextWorkspace
	(*DataSourceFeatures)(nil),      // 5: rest.DataSourceFeatures
	(*ImageMeta)(nil),               // 6: rest.ImageMeta
	(*FilePreview)(nil),             // 7: rest.FilePreview
	(*JsonMeta)(nil),                // 8: rest.JsonMeta
	(*CountMeta)(nil),               // 9: rest.CountMeta
	(*Node)(nil),                    // 10: rest.Node
	(*NodeLocator)(nil),             // 11: rest.NodeLocator
	(*IncomingNode)(nil),            // 12: rest.IncomingNode
	(*NodeCollection)(nil),          // 13: rest.NodeCollection
	(*CreateRequest)(nil),           // 14: rest.CreateRequest
	(*LookupRequest)(nil),           // 15: rest.LookupRequest
	(*ActionParameters)(nil),        // 16: rest.ActionParameters
	(*ActionRequest)(nil),           // 17: rest.ActionRequest
	(*ControlActionRequest)(nil),    // 18: rest.ControlActionRequest
	(*ActionResponse)(nil),          // 19: rest.ActionResponse
	(*Selection)(nil),               // 20: rest.Selection
	(*UpsertPublicLinkRequest)(nil), // 21: rest.UpsertPublicLinkRequest
	(*PublicLinkUuidRequest)(nil),   // 22: rest.PublicLinkUuidRequest
	(*PublicLinkDeleteSuccess)(nil), // 23: rest.PublicLinkDeleteSuccess
	(idm.WorkspaceScope)(0),         // 24: idm.WorkspaceScope
	(tree.NodeType)(0),              // 25: tree.NodeType
	(*ShareLink)(nil),               // 26: rest.ShareLink
	(*activity.Object)(nil),         // 27: activity.Object
	(*activity.Subscription)(nil),   // 28: activity.Subscription
	(*tree.SearchFacet)(nil),        // 29: tree.SearchFacet
	(*Pagination)(nil),              // 30: rest.Pagination
	(*tree.Query)(nil),              // 31: tree.Query
	(*jobs.CtrlCommand)(nil),        // 32: jobs.CtrlCommand
	(*jobs.Job)(nil),                // 33: jobs.Job
	(*ListTemplatesRequest)(nil),    // 34: rest.ListTemplatesRequest
	(*NodesCollection)(nil),         // 35: rest.NodesCollection
	(*ListTemplatesResponse)(nil),   // 36: rest.ListTemplatesResponse
}
var file_cellsapi_rest_v2_proto_depIdxs = []int32{
	24, // 0: rest.ContextWorkspace.Scope:type_name -> idm.WorkspaceScope
	25, // 1: rest.Node.Type:type_name -> tree.NodeType
	0,  // 2: rest.Node.Mode:type_name -> rest.Mode
	4,  // 3: rest.Node.ContextWorkspace:type_name -> rest.ContextWorkspace
	5,  // 4: rest.Node.DataSourceFeatures:type_name -> rest.DataSourceFeatures
	3,  // 5: rest.Node.ContentLock:type_name -> rest.LockInfo
	7,  // 6: rest.Node.Previews:type_name -> rest.FilePreview
	26, // 7: rest.Node.Shares:type_name -> rest.ShareLink
	27, // 8: rest.Node.Activities:type_name -> activity.Object
	28, // 9: rest.Node.Subscriptions:type_name -> activity.Subscription
	6,  // 10: rest.Node.ImageMeta:type_name -> rest.ImageMeta
	8,  // 11: rest.Node.Metadata:type_name -> rest.JsonMeta
	9,  // 12: rest.Node.FolderMeta:type_name -> rest.CountMeta
	8,  // 13: rest.Node.UserMetadata:type_name -> rest.JsonMeta
	11, // 14: rest.IncomingNode.Locator:type_name -> rest.NodeLocator
	25, // 15: rest.IncomingNode.Type:type_name -> tree.NodeType
	10, // 16: rest.NodeCollection.Nodes:type_name -> rest.Node
	29, // 17: rest.NodeCollection.Facets:type_name -> tree.SearchFacet
	30, // 18: rest.NodeCollection.Pagination:type_name -> rest.Pagination
	12, // 19: rest.CreateRequest.Inputs:type_name -> rest.IncomingNode
	11, // 20: rest.LookupRequest.Locators:type_name -> rest.NodeLocator
	31, // 21: rest.LookupRequest.Query:type_name -> tree.Query
	11, // 22: rest.ActionParameters.Nodes:type_name -> rest.NodeLocator
	11, // 23: rest.ActionParameters.TargetNode:type_name -> rest.NodeLocator
	1,  // 24: rest.ActionRequest.Name:type_name -> rest.UserActionType
	16, // 25: rest.ActionRequest.Parameters:type_name -> rest.ActionParameters
	1,  // 26: rest.ControlActionRequest.Name:type_name -> rest.UserActionType
	32, // 27: rest.ControlActionRequest.Command:type_name -> jobs.CtrlCommand
	2,  // 28: rest.ActionResponse.Status:type_name -> rest.ActionStatus
	10, // 29: rest.ActionResponse.AffectedNodes:type_name -> rest.Node
	33, // 30: rest.ActionResponse.Jobs:type_name -> jobs.Job
	10, // 31: rest.Selection.Nodes:type_name -> rest.Node
	26, // 32: rest.UpsertPublicLinkRequest.Link:type_name -> rest.ShareLink
	14, // 33: rest.NodeService.Create:input_type -> rest.CreateRequest
	15, // 34: rest.NodeService.Lookup:input_type -> rest.LookupRequest
	11, // 35: rest.NodeService.GetByPath:input_type -> rest.NodeLocator
	11, // 36: rest.NodeService.GetByUuid:input_type -> rest.NodeLocator
	11, // 37: rest.NodeService.ListVersions:input_type -> rest.NodeLocator
	21, // 38: rest.NodeService.CreatePublicLink:input_type -> rest.UpsertPublicLinkRequest
	22, // 39: rest.NodeService.GetPublicLink:input_type -> rest.PublicLinkUuidRequest
	21, // 40: rest.NodeService.UpdatePublicLink:input_type -> rest.UpsertPublicLinkRequest
	22, // 41: rest.NodeService.DeletePublicLink:input_type -> rest.PublicLinkUuidRequest
	17, // 42: rest.NodeService.PerformAction:input_type -> rest.ActionRequest
	17, // 43: rest.NodeService.GetActionJob:input_type -> rest.ActionRequest
	18, // 44: rest.NodeService.ControlActionJob:input_type -> rest.ControlActionRequest
	20, // 45: rest.NodeService.CreateSelection:input_type -> rest.Selection
	34, // 46: rest.NodeService.Templates:input_type -> rest.ListTemplatesRequest
	35, // 47: rest.NodeService.Create:output_type -> rest.NodesCollection
	35, // 48: rest.NodeService.Lookup:output_type -> rest.NodesCollection
	10, // 49: rest.NodeService.GetByPath:output_type -> rest.Node
	10, // 50: rest.NodeService.GetByUuid:output_type -> rest.Node
	13, // 51: rest.NodeService.ListVersions:output_type -> rest.NodeCollection
	26, // 52: rest.NodeService.CreatePublicLink:output_type -> rest.ShareLink
	26, // 53: rest.NodeService.GetPublicLink:output_type -> rest.ShareLink
	26, // 54: rest.NodeService.UpdatePublicLink:output_type -> rest.ShareLink
	23, // 55: rest.NodeService.DeletePublicLink:output_type -> rest.PublicLinkDeleteSuccess
	19, // 56: rest.NodeService.PerformAction:output_type -> rest.ActionResponse
	33, // 57: rest.NodeService.GetActionJob:output_type -> jobs.Job
	33, // 58: rest.NodeService.ControlActionJob:output_type -> jobs.Job
	20, // 59: rest.NodeService.CreateSelection:output_type -> rest.Selection
	36, // 60: rest.NodeService.Templates:output_type -> rest.ListTemplatesResponse
	47, // [47:61] is the sub-list for method output_type
	33, // [33:47] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_cellsapi_rest_v2_proto_init() }
func file_cellsapi_rest_v2_proto_init() {
	if File_cellsapi_rest_v2_proto != nil {
		return
	}
	file_cellsapi_common_proto_init()
	file_cellsapi_data_proto_init()
	file_cellsapi_idm_proto_init()
	file_cellsapi_broker_proto_init()
	file_cellsapi_config_proto_init()
	file_cellsapi_scheduler_proto_init()
	file_cellsapi_graph_proto_init()
	file_cellsapi_share_proto_init()
	file_cellsapi_frontend_proto_init()
	file_cellsapi_templates_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cellsapi_rest_v2_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*LockInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*ContextWorkspace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*DataSourceFeatures); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ImageMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*FilePreview); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*JsonMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CountMeta); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*NodeLocator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*IncomingNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*NodeCollection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CreateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*LookupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*ActionParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*ActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*ControlActionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*ActionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[18].Exporter = func(v any, i int) any {
			switch v := v.(*UpsertPublicLinkRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[19].Exporter = func(v any, i int) any {
			switch v := v.(*PublicLinkUuidRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cellsapi_rest_v2_proto_msgTypes[20].Exporter = func(v any, i int) any {
			switch v := v.(*PublicLinkDeleteSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cellsapi_rest_v2_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cellsapi_rest_v2_proto_goTypes,
		DependencyIndexes: file_cellsapi_rest_v2_proto_depIdxs,
		EnumInfos:         file_cellsapi_rest_v2_proto_enumTypes,
		MessageInfos:      file_cellsapi_rest_v2_proto_msgTypes,
	}.Build()
	File_cellsapi_rest_v2_proto = out.File
	file_cellsapi_rest_v2_proto_rawDesc = nil
	file_cellsapi_rest_v2_proto_goTypes = nil
	file_cellsapi_rest_v2_proto_depIdxs = nil
}
