syntax = "proto3";

package rest;

import "cellsapi-common.proto";
import "cellsapi-data.proto";
import "cellsapi-idm.proto";
import "cellsapi-broker.proto";
import "cellsapi-config.proto";
import "cellsapi-scheduler.proto";
import "cellsapi-graph.proto";
import "cellsapi-share.proto";
import "cellsapi-frontend.proto";
import "cellsapi-templates.proto";

import "cells-tree.proto";
import "cells-idm.proto";
import "cells-mailer.proto";
import "cells-activitystream.proto";
import "cells-jobs.proto";
import "cells-encryption.proto";
import "cells-log.proto";
import "cells-object.proto";
import "cells-install.proto";
import "cells-ctl.proto";
import "cells-update.proto";
import "cells-registry.proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package ="github.com/pydio/cells/v5/common/proto/rest";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "Pydio Cells Rest API";
    version: "v2";
    contact: {
      name: "Pydio";
      url: "https://pydio.com";
    };
  };
  external_docs: {
    url: "https://pydio.com";
    description: "More about Pydio Cells Apis";
  }
  schemes: HTTP;
  schemes: HTTPS;
  schemes: WSS;
  consumes: "application/json";
  produces: "application/json";
};

// Special permission modes for Nodes
enum Mode {
  Default = 0;
  NodeReadOnly = 1;
  NodeWriteOnly = 2;
  LevelReadOnly = 3;
}

// Info about content locking
message LockInfo{
  bool IsLocked = 1;
  string Owner = 2;
}

// Current workspace information
message ContextWorkspace{
  bool IsRoot = 1;
  string Uuid = 2;
  string Slug = 3;
  idm.WorkspaceScope Scope = 4;
  string Permissions = 5;
  string Label = 6;
  string Description = 7;
  bool Syncable = 8;
  bool IsVirtualRoot = 9;
  bool SkipRecycle = 10;
  int64 Quota = 11;
  int64 QuotaUsage = 12;
}

// Current datasource features
message DataSourceFeatures{
  bool Encrypted = 1;
  bool Versioned = 2;
}

// If file is an image, extracted information about this image
message ImageMeta {
  int32 Width = 1;
  int32 Height = 2;
  int32 Orientation = 3;
  string JsonEXIF = 4;
}

// Description of an available preview
message FilePreview{
  bool Processing = 1;
  string ContentType = 2;
  string Url = 3;
  int32 Dimension = 4;
}

// Open definition for a key/value metadata, value stored in json
message JsonMeta {
  string Namespace = 1;
  string Value = 2;
}

// Open definition for a key/value metadata, value is a number
// Using int32 to avoid json strings (for int64)
message CountMeta {
  string Namespace = 1;
  int32 Value = 2;
}

// Userspace metadata (namespaces are defined by admin)
message UserMeta {
  string NodeUuid = 1;
  string Namespace = 2;
  string JsonValue = 3;
  bool Editable = 4;
}

message RevisionMeta {
  string Uuid = 1;
  string Description = 2;
}

// List of UserMeta
message UserMetaList {
  repeated UserMeta UserMeta = 1;
}

// Representation of a file or folder
message Node {

  string Uuid = 1;
  string Path = 2;
  tree.NodeType Type = 3;
  Mode Mode = 4;
  int64 Size = 5;
  int64 Modified = 6; // Date instead of TS ?

  string ContentType = 7;
  string ContentsHash = 8;
  string HashingMethod = 23;
  string StorageETag = 9;

  bool IsRecycleBin = 10;
  bool IsRecycled = 11;
  bool IsBookmarked = 12;
  ContextWorkspace ContextWorkspace = 13;
  DataSourceFeatures DataSourceFeatures = 24;
  LockInfo ContentLock = 14;

  repeated FilePreview Previews = 16;
  repeated ShareLink Shares = 17;
  repeated activity.Object Activities = 18;
  repeated activity.Subscription Subscriptions = 19;

  ImageMeta ImageMeta = 25;
  RevisionMeta RevisionMeta = 26;
  repeated JsonMeta Metadata = 21;
  repeated CountMeta FolderMeta = 15;
  repeated UserMeta UserMetadata = 22;

}

// Simple Uuid/Path discriminator to locate a node
message NodeLocator{
  string Uuid = 1;
  string Path = 2;
}

// List of nodes, as returned by list/search operations. Facets and Pagination may be empty
message NodeCollection {
  repeated Node Nodes = 1;
  repeated tree.SearchFacet Facets = 3;
  Pagination Pagination = 2;
}

// Lightweight node representation for creation, exposing a NodeLocator and additional data
message IncomingNode {
  NodeLocator Locator = 1;
  tree.NodeType Type = 2;
  string ContentType = 3;
  string TemplateUuid = 4;
}

// Request for creating nodes
message CreateRequest {
  repeated IncomingNode Inputs = 1;
  bool Recursive = 2;
}

message NodeLocators {
  repeated NodeLocator Many = 1;
}

// Request for list/search. Accepts either
// - a list of Locators (using path/* will list a folder's first level children) to retrieve stats about nodes
// - a Query to search nodes in a more flexible way
message LookupRequest {
  oneof Input {
    NodeLocators Locators = 1;
    tree.Query Query = 2;
  }
  int64 Offset = 3;
  int64 Limit = 4;
  string SortField = 5;
  bool SortDirDesc = 6;
  repeated uint32 StatFlags = 7;
}

// Authorized actions that user can trigger
enum UserActionType {
  delete = 0;
  restore = 1;
  copy = 2;
  move = 3;
  extract = 4;
  compress = 5;
}

// Parameters used by actions. Some may use Nodes/TargetNode, but not necessarily
message ActionParameters {
  repeated NodeLocator Nodes = 2;
  NodeLocator TargetNode = 3;
  string SelectionUuid = 4;
  string JsonParameters = 5;

  // Optionally wait for the task to exist with a specific status
  jobs.TaskStatus AwaitStatus = 6;
  // Define a golang duration to wait for
  string AwaitTimeout = 7;
}

// Request used for Actions-related endpoints
message ActionRequest {
  UserActionType Name = 1;
  string JobUuid = 2;
}

message PerformActionRequest {
  UserActionType Name = 1;
  string JobUuid = 2;
  ActionParameters Parameters = 3;
}

// Send a start/pause/resume on background jobs that support it
message ControlActionRequest {
  UserActionType Name = 1;
  string JobUuid = 2;
  jobs.CtrlCommand Command = 3;
}

// Used in an PerformActionResponse - currently always Background
enum ActionStatus {
  Performed = 0;
  Background = 1;
}

// Response to an action triggered
message PerformActionResponse {
  ActionStatus Status = 1;
  repeated Node AffectedNodes = 2;
  repeated BackgroundAction Tasks = 3;
}

// Publishes a status about a background action
message BackgroundAction {
  string Name = 1;
  string JobUuid = 2;
  string Label = 3;

  jobs.TaskStatus Status = 4;
  string StatusMessage = 5;

  int32 StartTime = 6;
  int32 EndTime = 7;

  // Can be interrupted
  bool CanStop = 8;
  // Can be paused/resumed
  bool CanPause = 9;

  // Task publishes a progress
  bool HasProgress = 10;
  // Float value of the progress between 0 and 1
  float Progress = 11;
}

// Request to create a selection from a list of nodes.
message Selection {
  string Uuid = 1;
  repeated Node Nodes = 2;
}

// Create or update a public link on a node
message PublicLinkRequest {
  // Public link definition
  ShareLink Link = 2;
  // Whether it has Password enabled
  bool PasswordEnabled = 3;
  // Set if switching from no password to password
  string CreatePassword = 4;
  // Set if updating an existing password
  string UpdatePassword = 5;
  // Change the ShareLink Hash with a custom value
  string UpdateCustomHash = 6;
}

message NodePublicLinkRequest {
  string Uuid = 1;
  PublicLinkRequest PublicLinkRequest = 2;
}

message UpdatePublicLinkRequest {
  string LinkUuid = 1;
  PublicLinkRequest PublicLinkRequest = 2;
}

// Locate a public link by UUID
message PublicLinkUuidRequest {
  string LinkUuid = 1;
}

// Response to public link deletion
message PublicLinkDeleteSuccess {
  string Uuid = 1;
  string Message = 2;
}

// Update operation on Metadata
message MetaUpdate {
  enum Op {
    PUT = 0;
    DELETE = 1;
  }
  Op Operation = 1;
  UserMeta UserMeta = 2;
}

// Boolean value used for special metadata (bookmark,content_lock)
message MetaToggle {
  bool Value = 1;
}

// Set of updates to apply to metadata
message NodeUpdates {
  // Updates to metadata
  repeated MetaUpdate MetaUpdates = 1;
  // Shortcut to special "bookmark" usermeta
  MetaToggle Bookmark = 2;
  // Shortcut to special "content_lock" usermeta
  MetaToggle ContentLock = 3;
}

// Update a specific node's metadata
message PatchNodeRequest {
  string Uuid = 1;
  NodeUpdates NodeUpdates = 2;
}

// Update directly metadata in batch
message BatchUpdateMetaList {
  repeated MetaUpdate Updates = 1;
}

// Operation on namespaces
enum NsOp {
  PUT = 0;
  DELETE = 1;
}

// Operations on namespaces that can persist values (typically, tags known values)
message NamespaceValuesOperation {
  NsOp Operation = 1;
  repeated string Values = 2;
}

// Request on namespaces values
message NamespaceValuesRequest{
  // List persisted values for this namespace
  string Namespace = 1;
  NamespaceValuesOperation Operation = 2;
}

// Response for Namespaces values
message NamespaceValuesResponse{
  // List of existing values
  repeated string Values = 1;
}


// This RestAPI gather various aspects in one /node API
service NodeService {

  // Generic request to either list (using Locators) or search (using Query) for nodes
  rpc Lookup(LookupRequest) returns (NodeCollection) {
    option (google.api.http) = {
      post: "/n/nodes"
      body: "*"
    };
  }
  // Create one or many files (empty or hydrated from a TemplateUuid) or folders
  rpc Create(CreateRequest) returns (NodeCollection) {
    option (google.api.http) = {
      post: "/n/nodes/create"
      body: "*"
    };
  }
  // Special API for Bookmarks, will load userMeta and the associated nodes, and return
  // as a node list
  rpc UserBookmarks(UserBookmarksRequest) returns (NodeCollection) {
    option (google.api.http) = {
      get: "/n/nodes/bookmarks"
    };
  }

  // Load a node by its Uuid
  rpc GetByUuid(NodeLocator) returns (Node){
    option (google.api.http) = {
      get: "/n/node/{Uuid}"
    };
  };
  // PatchNode is used to update a node specific meta. It is used for reserved meta as well (bookmarks, contentLock)
  rpc PatchNode(PatchNodeRequest) returns (Node){
    option (google.api.http) = {
      patch: "/n/node/{Uuid}"
      body: "NodeUpdates"
    };
  };
  // List all known versions of a node
  rpc ListVersions(NodeLocator) returns (NodeCollection){
    option (google.api.http) = {
      get: "/n/node/{Uuid}/versions"
    };
  };

  // Create a public link on a given node
  rpc CreatePublicLink(NodePublicLinkRequest) returns (ShareLink) {
    option (google.api.http) = {
      post: "/n/node/{Uuid}/link"
      body: "PublicLinkRequest"
    };
  }


  // Search a list of meta by node Id or by User id and by namespace
  rpc SearchMeta(idm.SearchUserMetaRequest) returns (UserMetaList) {
    option (google.api.http) = {
      post: "/n/meta/find"
      body: "*"
    };
  }
  // Update/delete user meta in batch. Passed UserMetas must contain a NodeUuid
  rpc BatchUpdateMeta(BatchUpdateMetaList) returns (BatchUpdateMetaList) {
    option (google.api.http) = {
      patch: "/n/meta/batch"
      body: "*"
    };
  }
  // List defined meta namespaces
  rpc ListNamespaces(idm.ListUserMetaNamespaceRequest) returns (UserMetaNamespaceCollection){
    option (google.api.http) = {
      get: "/n/meta/namespace"
    };
  }
  // List values for a given namespace
  rpc ListNamespaceValues(NamespaceValuesRequest) returns (NamespaceValuesResponse){
    option (google.api.http) = {
      get: "/n/meta/namespace/{Namespace}"
    };
  }
  // Add/delete a values for a given namespace
  rpc UpdateNamespaceValues(NamespaceValuesRequest) returns (NamespaceValuesResponse){
    option (google.api.http) = {
      patch: "/n/meta/namespace/{Namespace}"
      body: "Operation"
    };
  }


  // Load public link information by Uuid
  rpc GetPublicLink(PublicLinkUuidRequest) returns (ShareLink) {
    option (google.api.http) = {
      get: "/n/link/{LinkUuid}"
    };
  }
  // Update public link settings
  rpc UpdatePublicLink(UpdatePublicLinkRequest) returns (ShareLink) {
    option (google.api.http) = {
      patch: "/n/link/{LinkUuid}"
      body: "PublicLinkRequest"
    };
  }
  // Remove a public link
  rpc DeletePublicLink(PublicLinkUuidRequest) returns (PublicLinkDeleteSuccess) {
    option (google.api.http) = {
      delete: "/n/link/{LinkUuid}"
    };
  }

  // Trigger an action on the tree. Returns a JobInfo describing a background task.
  rpc PerformAction(PerformActionRequest) returns (PerformActionResponse) {
    option (google.api.http) = {
      post: "/n/action/{Name}"
      body: "Parameters"
    };
  }
  // Retrieve information about an action running in background
  rpc BackgroundActionInfo(ActionRequest) returns (BackgroundAction) {
    option (google.api.http) = {
      get: "/n/action/{Name}/{JobUuid}"
    };
  }
  // Send control commands to a background job
  rpc ControlBackgroundAction(ControlActionRequest) returns (BackgroundAction) {
    option (google.api.http) = {
      patch: "/n/action/{Name}/{JobUuid}"
      body:"Command"
    };
  }
  // Create and persist a temporary selection of nodes, that can be used by other actions
  rpc CreateSelection(Selection) returns (Selection) {
    option (google.api.http) = {
      post: "/n/selection"
      body: "*"
    };
  }
  // List available templates for hydrating empty files
  rpc Templates(ListTemplatesRequest) returns (ListTemplatesResponse) {
    option (google.api.http) = {
      get: "/n/templates"
    };
  }

}