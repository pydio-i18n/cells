// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReadyzClient is the client API for Readyz service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReadyzClient interface {
	Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*ReadyCheckResponse, error)
}

type readyzClient struct {
	cc grpc.ClientConnInterface
}

func NewReadyzClient(cc grpc.ClientConnInterface) ReadyzClient {
	return &readyzClient{cc}
}

func (c *readyzClient) Ready(ctx context.Context, in *ReadyCheckRequest, opts ...grpc.CallOption) (*ReadyCheckResponse, error) {
	out := new(ReadyCheckResponse)
	err := c.cc.Invoke(ctx, "/server.Readyz/Ready", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReadyzServer is the server API for Readyz service.
// All implementations must embed UnimplementedReadyzServer
// for forward compatibility
type ReadyzServer interface {
	Ready(context.Context, *ReadyCheckRequest) (*ReadyCheckResponse, error)
	mustEmbedUnimplementedReadyzServer()
}

// UnimplementedReadyzServer must be embedded to have forward compatible implementations.
type UnimplementedReadyzServer struct {
}

func (UnimplementedReadyzServer) Ready(context.Context, *ReadyCheckRequest) (*ReadyCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ready not implemented")
}
func (UnimplementedReadyzServer) mustEmbedUnimplementedReadyzServer() {}

// UnsafeReadyzServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReadyzServer will
// result in compilation errors.
type UnsafeReadyzServer interface {
	mustEmbedUnimplementedReadyzServer()
}

func RegisterReadyzServer(s grpc.ServiceRegistrar, srv ReadyzServer) {
	s.RegisterService(&Readyz_ServiceDesc, srv)
}

func _Readyz_Ready_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReadyCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReadyzServer).Ready(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.Readyz/Ready",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReadyzServer).Ready(ctx, req.(*ReadyCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Readyz_ServiceDesc is the grpc.ServiceDesc for Readyz service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Readyz_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.Readyz",
	HandlerType: (*ReadyzServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ready",
			Handler:    _Readyz_Ready_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cells-server.proto",
}
