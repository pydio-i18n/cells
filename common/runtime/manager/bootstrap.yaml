#------------------------------------------
# Actual Bootstrap Keys
#
# Defaults variable values are injected at load time
#------------------------------------------
name: main
connections: *connections
telemetry:
  loggers:
    - encoding: console
      level: info
      outputs:
        - stdout:///
    - encoding: json
      level: info
      outputs:
        - file:///Users/charles/Library/Application Support/Pydio/cells5/logs{{ tenantPathWithBlank .Tenant "default" }}/pydio.log
        - service:///?service=pydio.grpc.log
    - encoding: json
      level: error
      outputs:
        - file:///Users/charles/Library/Application Support/Pydio/cells5/logs{{ tenantPathWithBlank .Tenant "default" }}/pydio_err.log
processes:
  discovery:
    runtime: discovery
    connections:
      config:
        uri: file://{{{{ .ApplicationWorkingDir }}}}/pydio.json
        pools:
          rp: file://{{{{ .ApplicationWorkingDir }}}}/{{ .Tenant }}.json
      registry:
        uri: mem://?cache=shared
      broker:
        uri: mem://
    listeners:
      grpcd:
        type: tcp
        bind: 0.0.0.0
        port: 8030
    servers:
      grpc:
        type: grpc
        listener: grpcd
        services:
          #- filter: "discovery ~= {{ sliceToRegexpFmt .Tags }}"
          - filter: "{{ .Name }} ~= pydio.grpc..*"
    storages: *storages
    services: *services
    env: *env

  all:
    runtime: main
    connections: *connections
    listeners:
      grpcall:
        type: tcp
        bind: 0.0.0.0
        port: 0
    servers:
      grpc:
        type: grpc
        listener: grpcall
        services:
          - filter: "{{ .Name }} ~= pydio\\.grpc\\..*"
      caddy:
        type: caddy
        services:
          - filter: "{{ .Name }} ~= pydio\\.web\\..* or {{ .Name }} ~= pydio\\.rest\\..* or {{ .Name }} ~= pydio\\.gateway\\.*"
          - filter: "{{ .Name }} !~= pydio\\.web\\.sites"
    env: *env
    storages: *storages
    services: *services
    queues: *queues
    caches: *caches

#  datasource-peer:
#    runtime: datasource
#    connections: *connections
#    env:
#      <<: *env
#      CELLS_BOOTSTRAP_TEMPLATE: datasources
#    storages: *storages
#    services: *services
#    queues: *queues
#    caches: *caches

