#--------------------------------------------
# Default variables
#--------------------------------------------
defaults:
  bind: &bind 0.0.0.0
  advertise: &advertise 0.0.0.0

  #--------------------------------------------
  # Default listeners
  #--------------------------------------------
  listeners: &listeners
    grpc:
      type: tcp
      bind: *bind
      port: 0
    http:
      type: tcp
      bind: *bind
      addr: 0

  queues: &queues
    debouncer:
     uri: mem://?debounce={{ .debounce }}&idle={{ .idle }}&max={{ .max }}&openerID={{ .openerID }}&tenant={{ .Tenant }}
    persisted:
      uri: fifo://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant "default" ) ) }}?name={{ .name }}&prefix={{ .prefix }}

  caches: &caches
    short:
      uri: pm://?evictionTime={{ .evictionTime}}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}
    shared:
      uri: bigcache://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}

  #--------------------------------------------
  # Default connection to runtime functions
  #--------------------------------------------
  connections: &connections
    grpcconn:
      uri: xds://default.cells.com/cells
      services:
        - filter: "{{ .Name }} ~= pydio.grpc..*"

  #--------------------------------------------
  # Default servers configuration
  #--------------------------------------------
  servers: &servers
    caddy:
      type: caddy
      services:
        - filter: "{{ .Name }} ~= pydio\\.rest\\..*"
    grpc:
      type: grpc
      listener: grpc
      services:
        - filter: "{{ .Name }} ~= pydio\\.grpc\\..*"
    http:
      type: http
      listener: http
      services:
        - filter: "{{ .Name }} ~= pydio\\.http\\..*"


  #--------------------------------------------
  # Default env configuration
  #--------------------------------------------
  env: &env
    CELLS_USE_REGISTRY_SESSION: true
    GRPC_EXPERIMENTAL_XDS_FEDERATION: true
    GRPC_XDS_BOOTSTRAP_CONFIG: {
      "xds_servers": [
        {
          "server_uri": "0.0.0.0:8030",
          "server_features": [
            "xds_v3"
          ],
          "channel_creds": [
            {
              "type": "insecure"
            }
          ]
        }
      ],
      "client_default_listener_resource_name_template": "xdstp://default.cells.com/envoy.config.listener.v3.Listener/grpc/client/%s",
      "server_listener_resource_name_template": "xdstp://default.cells.com/envoy.config.listener.v3.Listener/grpc/server/%s",
      "node": {
        "id": "test-id",
        "locality": {
          "zone": "us-central1-a"
        }
      },
      "authorities": {
        "default.cells.com": {
          "client_listener_resource_name_template": "xdstp://default.cells.com/envoy.config.listener.v3.Listener/grpc/client/%s"
        },
        "sub1.cells.com": {
          "client_listener_resource_name_template": "xdstp://sub1.cells.com/envoy.config.listener.v3.Listener/grpc/client/%s",
          "server_listener_resource_name_template": "xdstp://sub1.cells.com/envoy.config.listener.v3.Listener/grpc/server/%s",
          "xds_servers": [
            {
              "server_uri": "127.0.0.1:8130",
              "server_features": [
                "xds_v3"
              ],
              "channel_creds": [
                {
                  "type": "insecure"
                }
              ]
            }
          ]
        }
      }
    }

  #------------------------------------
  # All services
  #------------------------------------
  services: &services

    pydio.grpc.oauth:
      storages:
        main:
          - type: sql
            prefix: oauth2_
            singular: "true"
    pydio.web.oauth:
      storages:
        main:
          - type: sql
            prefix: oauth2_
            singular: "true"
    pydio.rest.frontend:
      storages:
        main:
          - type: sql
            prefix: idm_
    pydio.grpc.search:
      storages:
        main:
          - type: search
            path: chat
    pydio.grpc.activity:
      storages:
        main:
          - type: bolt
            file: activities.db
    pydio.grpc.versions:
      storages:
        main:
          - type: bolt
            file: versions.db
    pydio.grpc.docstore:
      storages:
        main:
          - type: bolt
            file: docstore.db
          - type: bleve
            file: docstore.bleve?rotationSize=-1
    pydio.grpc.log:
      storages:
        main:
          - type: bleve
            file: syslog.bleve?mapping=log&rotationSize=-1
    pydio.grpc.jobs:
      storages:
        main:
          - type: bolt
            file: jobs.db
        logs:
          - type: bleve
            file: tasklogs.bleve?mapping=log&rotationSize=-1
    pydio.grpc.role:
      storages:
        main:
          - type: sql
            prefix: idm_
            policies: idm_role_policies
    pydio.grpc.acl:
      storages:
        main:
          - type: sql
            prefix: idm_
    pydio.grpc.user:
      storages:
        main:
          - type: sql
            prefix: idm_
            policies: idm_user_policies
    pydio.grpc.token:
      storages:
        main:
          - type: sql
            prefix: idm_
    pydio.grpc.key:
      storages:
        main:
          - type: sql
            prefix: data_key_
    pydio.grpc.user-key:
      storages:
        main:
          - type: sql
            prefix: idm_
    pydio.grpc.workspace:
      storages:
        main:
          - type: sql
            prefix: idm_
            policies: idm_workspace_policies
    pydio.grpc.meta:
      storages:
        main:
          - type: sql
            prefix: data_
    pydio.grpc.policy:
      storages:
        main:
          - type: sql
            prefix: ladon_
            singular: "true"
    pydio.grpc.user-meta:
      storages:
        main:
          - type: sql
            prefix: idm_usr_
            policies: idm_usr_meta_policies

  # Storages
  storages: &storages
    sql:
      # uri: sqlite://test.db?prefix={{ .Value "prefix" }}&policies={{ .Value "policies" }}&singular={{ .Value "singular" }}
      uri: mysql://root:P@ssw0rd@tcp(localhost:3306)/cellstmp?parseTime=true&prefix={{ .Meta.prefix }}&policies={{ .Meta.policies }}&singular={{ .Meta.singular }}
    #      uri: postgres://postgres:cells@localhost:5432/postgres?sslmode=disable&prefix={{ .Value "prefix" }}&policies={{ .Value "policies" }}&singular={{ .Value "singular" }}
    bolt:
      uri: boltdb://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant "default" ) ) }}/{{ .Meta.file }}
    bleve:
      uri: bleve://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant "default" ) ) }}/{{ .Meta.file }}
    #  search:
    #    uri: mongo+indexer://localhost:24017/search
    #    uri: bleve:///tmp/{{ TODOMustServiceDataDir .Value service }}.bleve?mapping={{ .Value mapping }}&rotationSize={{ .Value rotationSize }}
    #  fifo:
    #    uri: goq:///tmp/{{ .Value tenant }}/fifo/{{ .Value prefix }}?evictionTime={{ .evictionTime }}
    #  user:
    #    uri: mysql://tcp(localhost:3306)/cells-{{ .Value tenant }}?prefix={{ .Value prefix }}&shardedBy=name
    #  redis-cache:
    #    uri: redis://:53535/{{tenant}}

  #--------------------------------------------
  # All processes
  #--------------------------------------------
  processes: &processes
    discovery: &discovery
      runtime: discovery
      connections:
        <<: *connections
        config:
          uri: file://{{{{ .ApplicationWorkingDir }}}}/pydio.json
        registry:
          uri: mem://?cache=shared
        broker:
          uri: mem://

      listeners:
        grpc:
          type: tcp
          bind: 0.0.0.0
          port: 8030
        http:
          type: tcp
          bind: 0.0.0.0
          port: 0

      servers:
        caddy:
          type: caddy
          services:
            - filter: "{{ .Name }} ~= pydio.rest..* or {{ .Name }} ~= pydio.web.statics"
        grpc:
          type: grpc
          listener: grpc
          services:
            - filter: "{{ .Name }} ~= pydio.grpc..*"
            - filter: "{{ .Name }} !~= pydio.grpc.data."

#        http:
#          type: http
#          listener: http
#          services:
#            - filter: "{{ .Name }} ~= pydio.rest..* or {{ .Name }} ~= pydio.web.statics"

      env: *env

      storages: *storages

      services: *services

      queues: *queues

      caches: *caches

#      tags:
#        discovery:
#        gateway:
#        frontend:
#        data:
#        scheduler:
#        auth:
#        broker:
#        idm:

      #  gateway:
      #    connections:
      #      <<: *connections
      #    env: *env
      #    services:
      #      gateway:
      #    servers:
      #      http:
      #        type: caddy
      #        port: 8080


      #  data:
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:
      #      data:

      #  idm:
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:


      #  datasource-peer:
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:
      #      datasource:
      #        - pydio.grpc.data.objects.peer
      #
      #  {{ if .Config }}
      #  {{ $objectsVal := .Config.Val "services/pydio.grpc.data.objects/sources" }}
      #  {{ $ := .Config }}
      #  {{ range $objectsVal.StringArray }}
      #  {{ if or (lt (len .) 8) (ne (slice . 0 8) ("updated:")) }}
      #  {{ if not ($.Val "services" (print "pydio.grpc.data.objects." .) "Disabled").Bool }}
      #  objects-{{ . }}:
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:
      #      datasource:
      #        - pydio.grpc.data.objects.{{ . }}
      #  {{ end }}
      #  {{ end }}
      #  {{ end }}
      #
      #  {{ $indexesVal := .Config.Val "services/pydio.grpc.data.index/sources" }}
      #  {{ $ := .Config }}
      #  {{ range $indexesVal.StringArray }}
      #  {{ if or (lt (len .) 8) (ne (slice . 0 8) ("updated:")) }}
      #  {{ if not ($.Val "services" (print "pydio.grpc.data.index." .) "Disabled").Bool }}
      #  index-{{ . }}:
      #    #{{ if eq . "pydiods1" }}debug: true{{ end }}
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:
      #      datasource:
      #        - pydio.grpc.data.index.{{ . }}
      #  {{ end }}
      #  {{ end }}
      #  {{ end }}
      #
      #  {{ $syncVal := .Config.Val "services/pydio.grpc.data.sync/sources" }}
      #  {{ $ := .Config }}
      #  {{ range $syncVal.StringArray }}
      #  {{ if or (lt (len .) 8) (ne (slice . 0 8) ("updated:")) }}
      #  {{ if not ($.Val "services" (print "pydio.grpc.data.sync." .) "Disabled").Bool }}
      #  sync-{{ . }}:
      #    #{{ if eq . "pydiods1" }}debug: true{{ end }}
      #    connections: *connections
      #    servers: *servers
      #    env: *env
      #
      #    services:
      #      datasource:
      #        - pydio.grpc.data.sync.{{ . }}
      #  {{ end }}
      #  {{ end }}
      #  {{ end }}
      #  {{ end }}