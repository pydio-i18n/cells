#------------------------------------------
# Actual Bootstrap Keys
#
# Defaults variable values are injected at load time
#------------------------------------------
runtime: main
connections:
  grpcconn:
    uri: 0.0.0.0:8030
    services:
      - filter: "{{ .Name }} ~= pydio.grpc..*"
listeners:
  grpcall:
    type: tcp
    bind: 0.0.0.0
    port: 8030
  httpall:
    type: tcp
    bind: 0.0.0.0
    port: 0
servers:
  caddy:
    type: generic
    services:
      - filter: "{{ .Name }} ~= pydio\\.web\\.sites"
  grpcall:
    type: grpc
    listener: grpcall
    services:
      - filter: "{{ .Name }} ~= pydio\\.grpc\\..*"
  httpall:
    type: http
    listener: httpall
    services:
      - filter: "{{ .Name }} !~= pydio\\.web\\.sites"
      - filter: "{{ .Name }} ~= pydio\\.web\\..* or {{ .Name }} ~= pydio\\.rest\\..* or {{ .Name }} ~= pydio\\.gateway\\.*"

env: &env
  CELLS_CONFIG: mem://
  CELLS_USE_REGISTRY_SESSION: true
  PYDIO_ADMIN_USER_LOGIN: admin
  PYDIO_ADMIN_USER_PASSWORD: admin
  CELLS_GLOBAL_SECRET: a-very-insecure-secret-for-checking-out-the-demo
  CELLS_OAUTH_CONNECTORS: [
    {
      "type": "pydio",
      "id": "pydio",
      "name": "Pydio Cells"
    }
  ]
  CELLS_OAUTH_CORS: {
    "public": {
      "allowedOrigins": "*"
    }
  }
  CELLS_OAUTH_CLIENTS: [
    {
      "client_id": "cells-frontend",
      "client_name": "CellsFrontend Application",
      "revokeRefreshTokenAfterInactivity": "2h",
      "grant_types": [
        "authorization_code",
        "refresh_token"
      ],
      "redirect_uris": [
        "#default_bind#/auth/callback"
      ],
      "post_logout_redirect_uris": [
        "#default_bind#/auth/logout"
      ],
      "response_types": [ "code", "token", "id_token" ],
      "scope": "openid email profile pydio offline"
    },
    {
      "client_id": "cells-sync",
      "client_name": "CellsSync Application",
      "grant_types": [
        "authorization_code",
        "refresh_token"
      ],
      "redirect_uris": [
        "http://localhost:3000/servers/callback",
        "http://localhost:[3636-3666]/servers/callback"
      ],
      "response_types": [ "code", "token", "id_token" ],
      "scope": "openid email profile pydio offline"
    },
    {
      "client_id": "cells-client",
      "client_name": "Cells Client CLI Tool",
      "grant_types": [
        "authorization_code",
        "refresh_token"
      ],
      "redirect_uris": [
        "http://localhost:3000/servers/callback",
        "#binds...#/oauth2/oob"
      ],
      "response_types": [
        "code",
        "token",
        "id_token"
      ],
      "scope": "openid email profile pydio offline"
    },
    {
      "client_id": "cells-mobile",
      "client_name": "Mobile Applications",
      "grant_types": [
        "authorization_code",
        "refresh_token"
      ],
      "redirect_uris": [
        "cellsauth://callback"
      ],
      "response_types": [
        "code",
        "token",
        "id_token"
      ],
      "scope": "openid email profile pydio offline"
    }
  ]
  GRPC_EXPERIMENTAL_XDS_FEDERATION: true
  GRPC_XDS_BOOTSTRAP_CONFIG: {
    "xds_servers": [
      {
        "server_uri": "0.0.0.0:8030",
        "server_features": [
          "xds_v3"
        ],
        "channel_creds": [
          {
            "type": "insecure"
          }
        ]
      }
    ],
    "node": {
      "id": "test-id"
    },
    "authorities": {
      "default.cells.com": {
        "client_listener_resource_name_template": "xdstp://default.cells.com/envoy.config.listener.v3.Listener/grpc/client/%s",
        "server_listener_resource_name_template": "xdstp://default.cells.com/envoy.config.listener.v3.Listener/grpc/server/%s",
        "xds_servers": [
          {
            "server_uri": "127.0.0.1:8030",
            "server_features": [
              "xds_v3"
            ],
            "channel_creds": [
              {
                "type": "insecure"
              }
            ]
          }
        ]
      }
    }
  }

storages:
  sql:
    uri: "sqlite:///tmp/pydio/{{.Tenant}}.db?cache=shared&prefix={{ .Meta.prefix }}&policies={{ .Meta.policies }}&singular={{ .Meta.singular }}"
  dssql:
    uri: sqlite:///tmp/pydio/{{.Tenant}}.db?ache=shared&prefix={{ .Meta.prefix }}{{if ne .DataSource ""}}{{ .DataSource }}_{{end}}&policies={{ .Meta.policies }}&singular={{ .Meta.singular }}
  bleve:
    uri: "bleve://{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}/{{ .Meta.file }}"
  bolt:
    uri: "boltdb://{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}/{{ .Meta.file }}"

queues:
  debouncer:
    uri: "mem://?debounce={{ .debounce }}&idle={{ .idle }} }&max={{ .max }}&openerID={{ .openerID }}&tenant={{ .Tenant }}"
  persisted:
    uri: "fifo://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant \"default\" )) }}?name={{ .name }}&prefix={  .prefix }}"

caches:
  short:
    uri: "pm://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}"
  shared:
    uri: "bigcache://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}"


#------------------------------------
# All services
#------------------------------------
services: &services
  pydio.grpc.oauth:
    storages:
      main:
        - type: sql
          prefix: oauth2_
          singular: "true"
  pydio.web.oauth:
    storages:
      main:
        - type: sql
          prefix: oauth2_
          singular: "true"
  pydio.rest.frontend:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.search:
    storages:
      main:
        - type: bleve
          file: searchengine.bleve
  pydio.grpc.chat:
    storages:
      main:
        - type: bolt
          file: chat.db
  pydio.grpc.data-key:
    storages:
      main:
        - type: sql
          prefix: data_
  pydio.grpc.activity:
    storages:
      main:
        - type: bolt
          file: activities.db
  pydio.grpc.versions:
    storages:
      main:
        - type: bolt
          file: versions.db
  pydio.grpc.mailer:
    storages:
      main:
        - type: bolt
          file: queue.db
  pydio.grpc.docstore:
    storages:
      main:
        - type: bolt
          file: docstore.db
        - type: bleve
          file: docstore.bleve?rotationSize=-1
  pydio.grpc.log:
    storages:
      main:
        - type: bleve
          file: syslog.bleve?mapping=log&rotationSize=-1
  pydio.grpc.jobs:
    storages:
      main:
        - type: bolt
          file: jobs.db
      logs:
        - type: bleve
          file: tasklogs.bleve?mapping=log&rotationSize=-1
  pydio.grpc.role:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_role_policies
  pydio.grpc.acl:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.user:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_user_policies
  pydio.grpc.token:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.key:
    storages:
      main:
        - type: sql
          prefix: data_key_
  pydio.grpc.user-key:
    storages:
      main:
        - type: sql
          prefix: idm_
  pydio.grpc.workspace:
    storages:
      main:
        - type: sql
          prefix: idm_
          policies: idm_workspace_policies
  pydio.grpc.meta:
    storages:
      main:
        - type: sql
          prefix: data_
  pydio.grpc.policy:
    storages:
      main:
        - type: sql
          prefix: ladon_
          singular: "true"
  pydio.grpc.user-meta:
    storages:
      main:
        - type: sql
          prefix: idm_usr_
          policies: idm_usr_meta_policies
  pydio.grpc.data.index:
    storages:
      main:
        - type: dssql
          prefix: data_index_
