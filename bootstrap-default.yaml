  #------------------------------------------
  # Actual Bootstrap Keys
  #
  # Defaults variable values are injected at load time
  #------------------------------------------
  name: main

  processes:
    discovery:
      env:
        CELLS_CONFIG: file://{{ autoMkdir (applicationDataDir) }}/{{ .Tenant }}.json
        CELLS_CONFIG_SUB1_ : {
          "services": {
            "pydio.grpc.data.objects": {
              "sources": [ "s3tenant2" ]
            }
          }
        }

        CELLS_CONFIG_DEFAULT_ : {
          "services": {
            "pydio.grpc.data.objects": {
              "sources": [ "s3" ]
            },
            "pydio.grpc.data.objects.s3": {
              "ApiKey": "minioadmin",
              "ApiSecret": "minioadmin",
              "LocalFolder": "/tmp/tenant1/datasource",
              "Name": "myds",
              "RunningPort": 60206
            },
            "pydio.grpc.data.index":{
              "sources": [ "s3" ]
            },
            "pydio.grpc.data.index.s3": {
              "dsn": "mysql",
              "tables": {
                "commits": "data_myds_commits",
                "nodes": "data_myds_nodes",
                "tree": "data_myds_tree"
             }
            },
            "pydio.grpc.data.sync.s3": {
              "ApiKey": "pydio",
              "ApiSecret": "pydioforever",
              "FlatStorage": true,
              "Name": "myds",
              "ObjectsBucket": "myds",
              "ObjectsPort": 60206,
              "ObjectsServiceName": "myds",
              "StorageConfiguration": {
                "folder": "/tmp/tenant1/datasource",
                "hashingVersion": "v4",
                "normalize": "true"
              }
            }
          },
          "storages": {
            "sql": {
              "uri": "sqlite://file::memory:?cache=shared&prefix={{ .Meta.prefix }}&policies={{ .Meta.policies }}&singular={{ .Meta.singular }}"
            },
            bleve: {
              uri: "bleve://{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}/{{ .Meta.file }}"
            },
            bolt: {
              uri: "boltdb://{{ autoMkdir (joinPath (serviceDataDir .Service) (tenantPathWithBlank .Tenant \"default\")) }}/{{ .Meta.file }}"
            }
          },
          "queues": {
            "debouncer": {
              uri: "mem://?debounce={{ .debounce }}&idle={{ .idle }} }&max={{ .max }}&openerID={{ .openerID }}&tenant={{ .Tenant }}"
            },
            "persisted": {
              uri: "fifo://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant \"default\" )) }}?name={{ .name }}&prefix={  .prefix }}"
            }
          },
          "caches": {
            "short": {
              "uri": "pm://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}"
            },
            "shared": {
              "uri": "bigcache://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}"
            }
          }
        }
      runtime: discovery
      connections:
        config:
          uri: mem://{{ .Tenant }}?env=CELLS_CONFIG_{{ .Tenant }}
        registry:
          uri: mem://?cache=shared
        broker:
          uri: mem://

      listeners:
        grpcdiscovery:
          type: tcp
          bind: 0.0.0.0
          port: 8030

      queues: &queues
        debouncer:
          uri: mem://?debounce={{ .debounce }}&idle={{ .idle }}&max={{ .max }}&openerID={{ .openerID }}&tenant={{ .Tenant }}
        persisted:
          uri: fifo://{{ autoMkdir (joinPath  ( serviceDataDir .Service ) ( tenantPathWithBlank .Tenant "default" ) ) }}?name={{ .name }}&prefix={{ .prefix }}

      caches: &caches
        short:
          uri: pm://?evictionTime={{ .evictionTime}}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}
        shared:
          uri: bigcache://?evictionTime={{ .evictionTime }}&cleanWindow={{ .cleanWindow }}&tenant={{ .Tenant }}&prefix={{ .prefix }}

      servers:
        grpcdiscovery:
          type: grpc
          listener: grpcdiscovery
          services:
            - filter: "{{ .Name }} ~= pydio.grpc..*"
        caddy:
          type: generic
          services:
            - filter: "{{ .Name }} ~= pydio\\.web\\.sites"

#    {{ range .Iterate tenant }}
    datasource:
      env:
        CELLS_BOOTSTRAP_FILE: bootstrap-datasource.yaml
#    {{ end }}