# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import cells_tree_pb2 as cells__tree__pb2


class NodeProviderStub(object):
    """==========================================================
    * Node Provider
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadNode = channel.unary_unary(
                '/tree.NodeProvider/ReadNode',
                request_serializer=cells__tree__pb2.ReadNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.ReadNodeResponse.FromString,
                _registered_method=True)
        self.ListNodes = channel.unary_stream(
                '/tree.NodeProvider/ListNodes',
                request_serializer=cells__tree__pb2.ListNodesRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.ListNodesResponse.FromString,
                _registered_method=True)


class NodeProviderServicer(object):
    """==========================================================
    * Node Provider
    ==========================================================
    """

    def ReadNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNodes(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadNode': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadNode,
                    request_deserializer=cells__tree__pb2.ReadNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.ReadNodeResponse.SerializeToString,
            ),
            'ListNodes': grpc.unary_stream_rpc_method_handler(
                    servicer.ListNodes,
                    request_deserializer=cells__tree__pb2.ListNodesRequest.FromString,
                    response_serializer=cells__tree__pb2.ListNodesResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeProvider', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeProvider(object):
    """==========================================================
    * Node Provider
    ==========================================================
    """

    @staticmethod
    def ReadNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeProvider/ReadNode',
            cells__tree__pb2.ReadNodeRequest.SerializeToString,
            cells__tree__pb2.ReadNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.NodeProvider/ListNodes',
            cells__tree__pb2.ListNodesRequest.SerializeToString,
            cells__tree__pb2.ListNodesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeProviderStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReadNodeStream = channel.stream_stream(
                '/tree.NodeProviderStreamer/ReadNodeStream',
                request_serializer=cells__tree__pb2.ReadNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.ReadNodeResponse.FromString,
                _registered_method=True)


class NodeProviderStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReadNodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeProviderStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReadNodeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.ReadNodeStream,
                    request_deserializer=cells__tree__pb2.ReadNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.ReadNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeProviderStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeProviderStreamer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeProviderStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReadNodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tree.NodeProviderStreamer/ReadNodeStream',
            cells__tree__pb2.ReadNodeRequest.SerializeToString,
            cells__tree__pb2.ReadNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeChangesStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StreamChanges = channel.unary_stream(
                '/tree.NodeChangesStreamer/StreamChanges',
                request_serializer=cells__tree__pb2.StreamChangesRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.NodeChangeEvent.FromString,
                _registered_method=True)


class NodeChangesStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StreamChanges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeChangesStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StreamChanges': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChanges,
                    request_deserializer=cells__tree__pb2.StreamChangesRequest.FromString,
                    response_serializer=cells__tree__pb2.NodeChangeEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeChangesStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeChangesStreamer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeChangesStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StreamChanges(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.NodeChangesStreamer/StreamChanges',
            cells__tree__pb2.StreamChangesRequest.SerializeToString,
            cells__tree__pb2.NodeChangeEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeChangesReceiverStreamerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.PostNodeChanges = channel.stream_stream(
                '/tree.NodeChangesReceiverStreamer/PostNodeChanges',
                request_serializer=cells__tree__pb2.NodeChangeEvent.SerializeToString,
                response_deserializer=cells__tree__pb2.NodeChangeEvent.FromString,
                _registered_method=True)


class NodeChangesReceiverStreamerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def PostNodeChanges(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeChangesReceiverStreamerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'PostNodeChanges': grpc.stream_stream_rpc_method_handler(
                    servicer.PostNodeChanges,
                    request_deserializer=cells__tree__pb2.NodeChangeEvent.FromString,
                    response_serializer=cells__tree__pb2.NodeChangeEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeChangesReceiverStreamer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeChangesReceiverStreamer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeChangesReceiverStreamer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def PostNodeChanges(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tree.NodeChangesReceiverStreamer/PostNodeChanges',
            cells__tree__pb2.NodeChangeEvent.SerializeToString,
            cells__tree__pb2.NodeChangeEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeReceiverStub(object):
    """==========================================================
    * Node Receiver
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNode = channel.unary_unary(
                '/tree.NodeReceiver/CreateNode',
                request_serializer=cells__tree__pb2.CreateNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.CreateNodeResponse.FromString,
                _registered_method=True)
        self.UpdateNode = channel.unary_unary(
                '/tree.NodeReceiver/UpdateNode',
                request_serializer=cells__tree__pb2.UpdateNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.UpdateNodeResponse.FromString,
                _registered_method=True)
        self.DeleteNode = channel.unary_unary(
                '/tree.NodeReceiver/DeleteNode',
                request_serializer=cells__tree__pb2.DeleteNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.DeleteNodeResponse.FromString,
                _registered_method=True)


class NodeReceiverServicer(object):
    """==========================================================
    * Node Receiver
    ==========================================================
    """

    def CreateNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeReceiverServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNode': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateNode,
                    request_deserializer=cells__tree__pb2.CreateNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.CreateNodeResponse.SerializeToString,
            ),
            'UpdateNode': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateNode,
                    request_deserializer=cells__tree__pb2.UpdateNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.UpdateNodeResponse.SerializeToString,
            ),
            'DeleteNode': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteNode,
                    request_deserializer=cells__tree__pb2.DeleteNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.DeleteNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeReceiver', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeReceiver', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeReceiver(object):
    """==========================================================
    * Node Receiver
    ==========================================================
    """

    @staticmethod
    def CreateNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeReceiver/CreateNode',
            cells__tree__pb2.CreateNodeRequest.SerializeToString,
            cells__tree__pb2.CreateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeReceiver/UpdateNode',
            cells__tree__pb2.UpdateNodeRequest.SerializeToString,
            cells__tree__pb2.UpdateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeReceiver/DeleteNode',
            cells__tree__pb2.DeleteNodeRequest.SerializeToString,
            cells__tree__pb2.DeleteNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeReceiverStreamStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateNodeStream = channel.stream_stream(
                '/tree.NodeReceiverStream/CreateNodeStream',
                request_serializer=cells__tree__pb2.CreateNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.CreateNodeResponse.FromString,
                _registered_method=True)
        self.UpdateNodeStream = channel.stream_stream(
                '/tree.NodeReceiverStream/UpdateNodeStream',
                request_serializer=cells__tree__pb2.UpdateNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.UpdateNodeResponse.FromString,
                _registered_method=True)
        self.DeleteNodeStream = channel.stream_stream(
                '/tree.NodeReceiverStream/DeleteNodeStream',
                request_serializer=cells__tree__pb2.DeleteNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.DeleteNodeResponse.FromString,
                _registered_method=True)


class NodeReceiverStreamServicer(object):
    """Missing associated documentation comment in .proto file."""

    def CreateNodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateNodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteNodeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeReceiverStreamServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateNodeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.CreateNodeStream,
                    request_deserializer=cells__tree__pb2.CreateNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.CreateNodeResponse.SerializeToString,
            ),
            'UpdateNodeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.UpdateNodeStream,
                    request_deserializer=cells__tree__pb2.UpdateNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.UpdateNodeResponse.SerializeToString,
            ),
            'DeleteNodeStream': grpc.stream_stream_rpc_method_handler(
                    servicer.DeleteNodeStream,
                    request_deserializer=cells__tree__pb2.DeleteNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.DeleteNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeReceiverStream', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeReceiverStream', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeReceiverStream(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def CreateNodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tree.NodeReceiverStream/CreateNodeStream',
            cells__tree__pb2.CreateNodeRequest.SerializeToString,
            cells__tree__pb2.CreateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateNodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tree.NodeReceiverStream/UpdateNodeStream',
            cells__tree__pb2.UpdateNodeRequest.SerializeToString,
            cells__tree__pb2.UpdateNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteNodeStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/tree.NodeReceiverStream/DeleteNodeStream',
            cells__tree__pb2.DeleteNodeRequest.SerializeToString,
            cells__tree__pb2.DeleteNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SessionIndexerStub(object):
    """==========================================================
    * Session Indexer
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.OpenSession = channel.unary_unary(
                '/tree.SessionIndexer/OpenSession',
                request_serializer=cells__tree__pb2.OpenSessionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.OpenSessionResponse.FromString,
                _registered_method=True)
        self.FlushSession = channel.unary_unary(
                '/tree.SessionIndexer/FlushSession',
                request_serializer=cells__tree__pb2.FlushSessionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.FlushSessionResponse.FromString,
                _registered_method=True)
        self.CloseSession = channel.unary_unary(
                '/tree.SessionIndexer/CloseSession',
                request_serializer=cells__tree__pb2.CloseSessionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.CloseSessionResponse.FromString,
                _registered_method=True)


class SessionIndexerServicer(object):
    """==========================================================
    * Session Indexer
    ==========================================================
    """

    def OpenSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FlushSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CloseSession(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SessionIndexerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'OpenSession': grpc.unary_unary_rpc_method_handler(
                    servicer.OpenSession,
                    request_deserializer=cells__tree__pb2.OpenSessionRequest.FromString,
                    response_serializer=cells__tree__pb2.OpenSessionResponse.SerializeToString,
            ),
            'FlushSession': grpc.unary_unary_rpc_method_handler(
                    servicer.FlushSession,
                    request_deserializer=cells__tree__pb2.FlushSessionRequest.FromString,
                    response_serializer=cells__tree__pb2.FlushSessionResponse.SerializeToString,
            ),
            'CloseSession': grpc.unary_unary_rpc_method_handler(
                    servicer.CloseSession,
                    request_deserializer=cells__tree__pb2.CloseSessionRequest.FromString,
                    response_serializer=cells__tree__pb2.CloseSessionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.SessionIndexer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.SessionIndexer', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SessionIndexer(object):
    """==========================================================
    * Session Indexer
    ==========================================================
    """

    @staticmethod
    def OpenSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.SessionIndexer/OpenSession',
            cells__tree__pb2.OpenSessionRequest.SerializeToString,
            cells__tree__pb2.OpenSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FlushSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.SessionIndexer/FlushSession',
            cells__tree__pb2.FlushSessionRequest.SerializeToString,
            cells__tree__pb2.FlushSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CloseSession(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.SessionIndexer/CloseSession',
            cells__tree__pb2.CloseSessionRequest.SerializeToString,
            cells__tree__pb2.CloseSessionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeEventsProviderStub(object):
    """==========================================================
    * Node Events Provider
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WatchNode = channel.unary_stream(
                '/tree.NodeEventsProvider/WatchNode',
                request_serializer=cells__tree__pb2.WatchNodeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.WatchNodeResponse.FromString,
                _registered_method=True)


class NodeEventsProviderServicer(object):
    """==========================================================
    * Node Events Provider
    ==========================================================
    """

    def WatchNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeEventsProviderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WatchNode': grpc.unary_stream_rpc_method_handler(
                    servicer.WatchNode,
                    request_deserializer=cells__tree__pb2.WatchNodeRequest.FromString,
                    response_serializer=cells__tree__pb2.WatchNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeEventsProvider', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeEventsProvider', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeEventsProvider(object):
    """==========================================================
    * Node Events Provider
    ==========================================================
    """

    @staticmethod
    def WatchNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.NodeEventsProvider/WatchNode',
            cells__tree__pb2.WatchNodeRequest.SerializeToString,
            cells__tree__pb2.WatchNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SearcherStub(object):
    """==========================================================
    * Node Searcher
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Search = channel.unary_stream(
                '/tree.Searcher/Search',
                request_serializer=cells__tree__pb2.SearchRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.SearchResponse.FromString,
                _registered_method=True)


class SearcherServicer(object):
    """==========================================================
    * Node Searcher
    ==========================================================
    """

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SearcherServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Search': grpc.unary_stream_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=cells__tree__pb2.SearchRequest.FromString,
                    response_serializer=cells__tree__pb2.SearchResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.Searcher', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.Searcher', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Searcher(object):
    """==========================================================
    * Node Searcher
    ==========================================================
    """

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.Searcher/Search',
            cells__tree__pb2.SearchRequest.SerializeToString,
            cells__tree__pb2.SearchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class NodeContentReaderStub(object):
    """==========================================================
    * Node Content Reader
    ==========================================================
    Content Read / write will not go through gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class NodeContentReaderServicer(object):
    """==========================================================
    * Node Content Reader
    ==========================================================
    Content Read / write will not go through gRPC
    """


def add_NodeContentReaderServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeContentReader', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeContentReader', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeContentReader(object):
    """==========================================================
    * Node Content Reader
    ==========================================================
    Content Read / write will not go through gRPC
    """


class NodeContentWriterStub(object):
    """==========================================================
    * Node Content Writer
    ==========================================================
    Content Read / write will not go through gRPC
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """


class NodeContentWriterServicer(object):
    """==========================================================
    * Node Content Writer
    ==========================================================
    Content Read / write will not go through gRPC
    """


def add_NodeContentWriterServicer_to_server(servicer, server):
    rpc_method_handlers = {
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeContentWriter', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeContentWriter', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeContentWriter(object):
    """==========================================================
    * Node Content Writer
    ==========================================================
    Content Read / write will not go through gRPC
    """


class NodeVersionerStub(object):
    """==========================================================
    * Node Versions Provider
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateVersion = channel.unary_unary(
                '/tree.NodeVersioner/CreateVersion',
                request_serializer=cells__tree__pb2.CreateVersionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.CreateVersionResponse.FromString,
                _registered_method=True)
        self.StoreVersion = channel.unary_unary(
                '/tree.NodeVersioner/StoreVersion',
                request_serializer=cells__tree__pb2.StoreVersionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.StoreVersionResponse.FromString,
                _registered_method=True)
        self.ListVersions = channel.unary_stream(
                '/tree.NodeVersioner/ListVersions',
                request_serializer=cells__tree__pb2.ListVersionsRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.ListVersionsResponse.FromString,
                _registered_method=True)
        self.HeadVersion = channel.unary_unary(
                '/tree.NodeVersioner/HeadVersion',
                request_serializer=cells__tree__pb2.HeadVersionRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.HeadVersionResponse.FromString,
                _registered_method=True)
        self.PruneVersions = channel.unary_unary(
                '/tree.NodeVersioner/PruneVersions',
                request_serializer=cells__tree__pb2.PruneVersionsRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.PruneVersionsResponse.FromString,
                _registered_method=True)
        self.ListVersioningPolicies = channel.unary_stream(
                '/tree.NodeVersioner/ListVersioningPolicies',
                request_serializer=cells__tree__pb2.ListVersioningPoliciesRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.VersioningPolicy.FromString,
                _registered_method=True)


class NodeVersionerServicer(object):
    """==========================================================
    * Node Versions Provider
    ==========================================================
    """

    def CreateVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StoreVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVersions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def HeadVersion(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PruneVersions(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListVersioningPolicies(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NodeVersionerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateVersion,
                    request_deserializer=cells__tree__pb2.CreateVersionRequest.FromString,
                    response_serializer=cells__tree__pb2.CreateVersionResponse.SerializeToString,
            ),
            'StoreVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.StoreVersion,
                    request_deserializer=cells__tree__pb2.StoreVersionRequest.FromString,
                    response_serializer=cells__tree__pb2.StoreVersionResponse.SerializeToString,
            ),
            'ListVersions': grpc.unary_stream_rpc_method_handler(
                    servicer.ListVersions,
                    request_deserializer=cells__tree__pb2.ListVersionsRequest.FromString,
                    response_serializer=cells__tree__pb2.ListVersionsResponse.SerializeToString,
            ),
            'HeadVersion': grpc.unary_unary_rpc_method_handler(
                    servicer.HeadVersion,
                    request_deserializer=cells__tree__pb2.HeadVersionRequest.FromString,
                    response_serializer=cells__tree__pb2.HeadVersionResponse.SerializeToString,
            ),
            'PruneVersions': grpc.unary_unary_rpc_method_handler(
                    servicer.PruneVersions,
                    request_deserializer=cells__tree__pb2.PruneVersionsRequest.FromString,
                    response_serializer=cells__tree__pb2.PruneVersionsResponse.SerializeToString,
            ),
            'ListVersioningPolicies': grpc.unary_stream_rpc_method_handler(
                    servicer.ListVersioningPolicies,
                    request_deserializer=cells__tree__pb2.ListVersioningPoliciesRequest.FromString,
                    response_serializer=cells__tree__pb2.VersioningPolicy.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.NodeVersioner', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.NodeVersioner', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class NodeVersioner(object):
    """==========================================================
    * Node Versions Provider
    ==========================================================
    """

    @staticmethod
    def CreateVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeVersioner/CreateVersion',
            cells__tree__pb2.CreateVersionRequest.SerializeToString,
            cells__tree__pb2.CreateVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StoreVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeVersioner/StoreVersion',
            cells__tree__pb2.StoreVersionRequest.SerializeToString,
            cells__tree__pb2.StoreVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.NodeVersioner/ListVersions',
            cells__tree__pb2.ListVersionsRequest.SerializeToString,
            cells__tree__pb2.ListVersionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def HeadVersion(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeVersioner/HeadVersion',
            cells__tree__pb2.HeadVersionRequest.SerializeToString,
            cells__tree__pb2.HeadVersionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PruneVersions(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.NodeVersioner/PruneVersions',
            cells__tree__pb2.PruneVersionsRequest.SerializeToString,
            cells__tree__pb2.PruneVersionsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListVersioningPolicies(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.NodeVersioner/ListVersioningPolicies',
            cells__tree__pb2.ListVersioningPoliciesRequest.SerializeToString,
            cells__tree__pb2.VersioningPolicy.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class FileKeyManagerStub(object):
    """==========================================================
    * Node FileKeyManager
    ==========================================================
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetEncryptionKey = channel.unary_unary(
                '/tree.FileKeyManager/GetEncryptionKey',
                request_serializer=cells__tree__pb2.GetEncryptionKeyRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.GetEncryptionKeyResponse.FromString,
                _registered_method=True)


class FileKeyManagerServicer(object):
    """==========================================================
    * Node FileKeyManager
    ==========================================================
    """

    def GetEncryptionKey(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FileKeyManagerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetEncryptionKey': grpc.unary_unary_rpc_method_handler(
                    servicer.GetEncryptionKey,
                    request_deserializer=cells__tree__pb2.GetEncryptionKeyRequest.FromString,
                    response_serializer=cells__tree__pb2.GetEncryptionKeyResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.FileKeyManager', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.FileKeyManager', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class FileKeyManager(object):
    """==========================================================
    * Node FileKeyManager
    ==========================================================
    """

    @staticmethod
    def GetEncryptionKey(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/tree.FileKeyManager/GetEncryptionKey',
            cells__tree__pb2.GetEncryptionKeyRequest.SerializeToString,
            cells__tree__pb2.GetEncryptionKeyResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SyncChangesStub(object):
    """==========================================================
    * Changes Service
    ==========================================================

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Put = channel.stream_unary(
                '/tree.SyncChanges/Put',
                request_serializer=cells__tree__pb2.SyncChange.SerializeToString,
                response_deserializer=cells__tree__pb2.PutSyncChangeResponse.FromString,
                _registered_method=True)
        self.Search = channel.unary_stream(
                '/tree.SyncChanges/Search',
                request_serializer=cells__tree__pb2.SearchSyncChangeRequest.SerializeToString,
                response_deserializer=cells__tree__pb2.SyncChange.FromString,
                _registered_method=True)


class SyncChangesServicer(object):
    """==========================================================
    * Changes Service
    ==========================================================

    """

    def Put(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Search(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SyncChangesServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Put': grpc.stream_unary_rpc_method_handler(
                    servicer.Put,
                    request_deserializer=cells__tree__pb2.SyncChange.FromString,
                    response_serializer=cells__tree__pb2.PutSyncChangeResponse.SerializeToString,
            ),
            'Search': grpc.unary_stream_rpc_method_handler(
                    servicer.Search,
                    request_deserializer=cells__tree__pb2.SearchSyncChangeRequest.FromString,
                    response_serializer=cells__tree__pb2.SyncChange.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'tree.SyncChanges', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('tree.SyncChanges', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SyncChanges(object):
    """==========================================================
    * Changes Service
    ==========================================================

    """

    @staticmethod
    def Put(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/tree.SyncChanges/Put',
            cells__tree__pb2.SyncChange.SerializeToString,
            cells__tree__pb2.PutSyncChangeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Search(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/tree.SyncChanges/Search',
            cells__tree__pb2.SearchSyncChangeRequest.SerializeToString,
            cells__tree__pb2.SyncChange.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
